/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/locales/en.json
var require_en = __commonJS({
  "src/locales/en.json"(exports, module2) {
    module2.exports = {
      OPEN_CARD_NAVIGATOR: "Open Card Navigator",
      CARD_NAVIGATOR: "Card Navigator",
      COPY_AS_LINK: "Copy as Link",
      COPY_CARD_CONTENT: "Copy Card Content",
      LINK_COPIED_TO_CLIPBOARD: "Link copied to clipboard",
      FAILED_TO_COPY_LINK: "Failed to copy link",
      CARD_CONTENT_COPIED_TO_CLIPBOARD: "Card content copied to clipboard",
      FAILED_TO_COPY_CARD_CONTENT: "Failed to copy card content",
      SEARCH_PLACEHOLDER: "Search...",
      SORT_CARDS: "Sort cards",
      SETTINGS: "Settings",
      PRESET_SETTINGS: "Preset Settings",
      GLOBAL_PRESET: "Global Preset",
      SORT_FILE_NAME_ASC: "File name(A to Z)",
      SORT_FILE_NAME_DESC: "File name(Z to A)",
      SORT_LAST_MODIFIED_DESC: "Last modified(newest first)",
      SORT_LAST_MODIFIED_ASC: "Last modified(oldest first)",
      SORT_CREATED_DESC: "Created(newest first)",
      SORT_CREATED_ASC: "Created(oldest first)",
      SHOW_FILE_NAME: "Show file name",
      SHOW_FIRST_HEADER: "Show first header",
      SHOW_BODY: "Show body",
      TOGGLE_FILE_NAME_DISPLAY: "Toggle file name display",
      TOGGLE_FIRST_HEADER_DISPLAY: "Toggle first header display",
      TOGGLE_BODY_DISPLAY: "Toggle body display",
      FILE_NAME_FONT_SIZE: "File name font size",
      FIRST_HEADER_FONT_SIZE: "First header font size",
      BODY_FONT_SIZE: "Body font size",
      SET_FILE_NAME_FONT_SIZE: "Set font size for file name",
      SET_FIRST_HEADER_FONT_SIZE: "Set font size for first header",
      SET_BODY_FONT_SIZE: "Set font size for body",
      SCROLL_UP_ONE_CARD: "Scroll up one card",
      SCROLL_DOWN_ONE_CARD: "Scroll down one card",
      SCROLL_LEFT_ONE_CARD: "Scroll left one card",
      SCROLL_RIGHT_ONE_CARD: "Scroll right one card",
      SCROLL_UP_LEFT_ONE_PAGE: "Scroll up/left one page",
      SCROLL_DOWN_RIGHT_ONE_PAGE: "Scroll down/right one page",
      CENTER_ACTIVE_CARD: "Center active card",
      MOVE_FOCUS_TO_CARD_NAVIGATOR: "Move focus to Card Navigator",
      OPEN_CARD_CONTEXT_MENU: "Open card context menu",
      MOVE_UP_ONE_CARD: "Move up by one card.",
      MOVE_DOWN_ONE_CARD: "Move down by one card.",
      MOVE_LEFT_ONE_CARD: "Move left by one card.",
      MOVE_RIGHT_ONE_CARD: "Move right by one card.",
      MOVE_UP_LEFT_ONE_PAGE: "Move up/left by one page of cards.",
      MOVE_DOWN_RIGHT_ONE_PAGE: "Move down/right by one page of cards.",
      CENTER_CURRENTLY_ACTIVE_CARD: "Center the currently active card.",
      SET_FOCUS_TO_CARD_NAVIGATOR: "Set focus to the Card Navigator.",
      OPEN_CONTEXT_MENU_FOR_FOCUSED_CARD: "Open the context menu for the focused card.",
      CONFIRM_DELETE: "Confirm Delete",
      CONFIRM_DELETE_ITEM: "Are you sure you want to delete?",
      CANCEL: "Cancel",
      ERROR_SAVING_SETTINGS: "Error saving settings:",
      ERROR_SAVING_DEFAULT_PRESET: "Error saving default preset:",
      ERROR_LOADING_PRESET_FROM_FILE: "Error loading preset from file {{fileName}}:",
      ERROR_SAVING_NEW_PRESET: "Error saving new preset {{presetName}}:",
      PRESET_FOLDER: "Preset Folder",
      SELECT_PRESET_FOLDER: "First, create a folder within your Vault to save preset files in JSON format and select that folder. For existing folders, manually move the preset files to the newly designated folder and then safely delete the old folder.",
      PRESET_FOLDER_PLACEHOLDER: "e.g. CardNavigatorPresets",
      PRESET_MANAGEMENT_AND_GLOBAL_SETTINGS: "Preset Management and Global Settings",
      PRESET_MANAGEMENT_DESC: "You can create a new preset with the current settings or create a new preset by entering data in JSON format. You can edit, copy, delete, export presets and set them as global presets.",
      CREATE_NEW_PRESET: "Create new preset",
      IMPORT_PRESET: "Import preset",
      NO_DESCRIPTION: "No description",
      EDIT: "Edit",
      CLONE: "Clone",
      DELETE: "Delete",
      EXPORT: "Export",
      SET_AS_GLOBAL_PRESET: "Set as global preset",
      PRESET_NAME: "Name",
      PRESET_DELETED_NOTICE: "Preset deleted and default preset applied",
      AUTO_APPLY_PRESETS: "Auto Apply Presets",
      AUTO_APPLY_PRESETS_DESC: "Automatically apply presets when opening files.",
      AUTO_APPLY_FOLDER_PRESET: "Auto Apply Folder Presets",
      AUTO_APPLY_FOLDER_PRESET_DESC: "Automatically apply folder-specific presets when opening files in different folders. If no preset is found for a folder, the global preset will be applied.",
      ADD_NEW_FOLDER_PRESET: "Add New Folder Preset",
      ADD_NEW_FOLDER_PRESET_DESC: "Add a new folder-specific preset.",
      PRESET_ALREADY_EXISTS: "Preset already exists",
      FOLDER: "Folder",
      PRESET_ALREADY_EXISTS_FOR_FOLDER: "Preset already exists for this folder",
      PRESET: "Preset",
      MOVE_DOWN: "Move down",
      PRESET_NOT_FOUND: "Preset '{{name}}' not found",
      SOURCE_PRESET_NOT_FOUND: "Source preset '{{name}}' not found",
      PRESET_ALREADY_EXISTS_WITH_NAME: "Preset '{{name}}' already exists",
      INVALID_PRESET_FORMAT: "Invalid preset format",
      PRESET_IMPORT_FAILED: "Failed to import preset: {{error}}",
      GLOBAL_PRESET_NOT_SET: "Global preset is not set",
      CONTAINER_SETTINGS: "Container settings",
      SOURCE_FOLDER: "Source folder",
      SOURCE_FOLDER_DESC: "Choose whether to display notes from the active folder or from a selected folder as cards in the Card Navigator.",
      SELECT_FOLDER: "Select source folder",
      SELECT_FOLDER_DESC: "Select a folder for Card Navigator",
      SELECT_FOLDER_PLACEHOLDER: "Select folder",
      DEFAULT_SORT_METHOD: "Default sort method",
      DEFAULT_SORT_METHOD_DESC: "Choose the default sorting method for cards.",
      CENTER_ACTIVE_CARD_ON_OPEN: "Center active card on open",
      CENTER_ACTIVE_CARD_ON_OPEN_DESC: "Automatically center the active card when opening the Card Navigator",
      LAYOUT_SETTINGS: "Layout settings",
      DEFAULT_LAYOUT: "Default layout",
      DEFAULT_LAYOUT_DESC: "Choose the default layout for Card Navigator.",
      AUTO: "Auto",
      LIST: "List",
      GRID: "Grid",
      MASONRY: "Masonry",
      CARD_WIDTH_THRESHOLD: "Card width threshold",
      CARD_WIDTH_THRESHOLD_DESC: "Card width threshold for adding/removing columns in auto layout",
      ALIGN_CARD_HEIGHT: "Align card height",
      ALIGN_CARD_HEIGHT_DESC: "If enabled, all cards will have the same height(Grid). If disabled, card height will adjust to content(Masonry).",
      CARDS_PER_VIEW: "Cards per view",
      CARDS_PER_VIEW_DESC: "Number of cards to display at once in list layout when card heights are equal",
      GRID_COLUMNS: "Grid columns",
      GRID_COLUMNS_DESC: "Number of columns in grid layout",
      GRID_CARD_HEIGHT: "Grid card height",
      GRID_CARD_HEIGHT_DESC: "Card height in grid layout",
      MASONRY_COLUMNS: "Masonry columns",
      MASONRY_COLUMNS_DESC: "Number of columns in masonry layout",
      CARD_CONTENT_SETTINGS: "Card content settings",
      RENDER_CONTENT_AS_HTML: "Render content as HTML",
      RENDER_CONTENT_AS_HTML_DESC: "When activated, the card content is rendered in HTML. If the content is not displayed properly or errors occur, adjust the body length limit.",
      DRAG_AND_DROP_CONTENT: "Drag and drop content",
      DRAG_AND_DROP_CONTENT_DESC: "When enabled, dragging a card will insert the content of the card selected below instead of a link.",
      BODY_LENGTH_LIMIT: "Body length limit",
      BODY_LENGTH_LIMIT_DESC: "Toggle between limited and unlimited body length.",
      BODY_LENGTH: "Body length",
      BODY_LENGTH_DESC: "Set the maximum body length displayed on each card when body length is limited.",
      CARD_STYLING_SETTINGS: "Card styling settings",
      FILE_NAME_FONT_SIZE_DESC: "Set the font size for file names in cards",
      FIRST_HEADER_FONT_SIZE_DESC: "Set the font size for the first header in cards",
      BODY_FONT_SIZE_DESC: "Set the font size for the body text in cards",
      KEYBOARD_SHORTCUTS: "Keyboard shortcuts",
      KEYBOARD_SHORTCUTS_DESC: "Card Navigator provides the following features that can be assigned keyboard shortcuts. You can set these up in Obsidian's Hotkeys settings:",
      COMMAND: "Command",
      DESCRIPTION: "Description",
      KEYBOARD_SHORTCUTS_CUSTOMIZE_NOTE: 'To set up shortcuts for these actions, go to Settings \u2192 Hotkeys and search for "Card Navigator". You can then assign your preferred key combinations for each action.',
      KEYBOARD_SHORTCUTS_ADDITIONAL_NOTE: "Note: Some shortcuts like arrow keys for navigation and Enter for opening cards are built-in and cannot be customized.",
      ENTER_PRESET_NAME: "Enter preset name",
      ENTER_PRESET_NAME_PLACEHOLDER: "Enter preset name",
      ENTER_PRESET_DESCRIPTION: "Enter preset description",
      ENTER_PRESET_DESCRIPTION_PLACEHOLDER: "Enter preset description",
      PRESET_DATA: "Preset Data",
      EDIT_PRESET_DATA_DESC: "Edit preset data (JSON format)",
      PRESET_DATA_PLACEHOLDER: "Enter preset data in JSON format",
      UPDATE_WITH_CURRENT_SETTINGS: "Update with current settings",
      SAVE: "Save",
      EDIT_PRESET: "Edit Preset",
      CLONE_PRESET: "Clone Preset",
      PRESET_COPY: "Copy of {{name}}",
      ENTER_PRESET_NAME_NOTICE: "Please enter a preset name",
      PRESET_DATA_EMPTY: "Preset data cannot be empty",
      PRESET_SAVED: "Preset '{{name}}' saved",
      FAILED_TO_SAVE_PRESET: "Failed to save preset",
      PRESET_SAVE_FAILED: "Failed to save preset: {{error}}",
      PASTE_PRESET_JSON_HERE: "Paste preset JSON here",
      IMPORT: "Import",
      INVALID_PRESET_DATA: "Invalid preset data",
      PRESET_IMPORTED_SUCCESSFULLY: "Preset '{{name}}' imported successfully",
      UNKNOWN_ERROR_DURING_IMPORT: "Unknown error occurred during import",
      EXPORT_PRESET: "Export Preset",
      COPY: "Copy",
      PRESET_JSON_COPIED: "Preset JSON copied to clipboard",
      ERROR_LOADING_PRESET: "Error loading preset",
      NO_PRESET_SELECTED: "No preset selected"
    };
  }
});

// src/locales/ko.json
var require_ko = __commonJS({
  "src/locales/ko.json"(exports, module2) {
    module2.exports = {
      OPEN_CARD_NAVIGATOR: "\uCE74\uB4DC \uB124\uBE44\uAC8C\uC774\uD130 \uC5F4\uAE30",
      CARD_NAVIGATOR: "\uCE74\uB4DC \uB124\uBE44\uAC8C\uC774\uD130",
      COPY_AS_LINK: "\uB9C1\uD06C\uB85C \uBCF5\uC0AC",
      COPY_CARD_CONTENT: "\uCE74\uB4DC \uB0B4\uC6A9 \uBCF5\uC0AC",
      LINK_COPIED_TO_CLIPBOARD: "\uB9C1\uD06C\uAC00 \uD074\uB9BD\uBCF4\uB4DC\uC5D0 \uBCF5\uC0AC\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
      FAILED_TO_COPY_LINK: "\uB9C1\uD06C \uBCF5\uC0AC \uC2E4\uD328",
      CARD_CONTENT_COPIED_TO_CLIPBOARD: "\uCE74\uB4DC \uB0B4\uC6A9\uC774 \uD074\uB9BD\uBCF4\uB4DC\uC5D0 \uBCF5\uC0AC\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
      FAILED_TO_COPY_CARD_CONTENT: "\uCE74\uB4DC \uB0B4\uC6A9 \uBCF5\uC0AC \uC2E4\uD328",
      SEARCH_PLACEHOLDER: "\uAC80\uC0C9...",
      SORT_CARDS: "\uCE74\uB4DC \uC815\uB82C",
      SETTINGS: "\uC124\uC815",
      PRESET_SETTINGS: "\uD504\uB9AC\uC14B \uC124\uC815",
      GLOBAL_PRESET: "\uC804\uC5ED \uD504\uB9AC\uC14B",
      SORT_FILE_NAME_ASC: "\uD30C\uC77C \uC774\uB984(\uC54C\uD30C\uBCB3\uC21C)",
      SORT_FILE_NAME_DESC: "\uD30C\uC77C \uC774\uB984(\uC54C\uD30C\uBCB3 \uC5ED\uC21C)",
      SORT_LAST_MODIFIED_DESC: "\uC5C5\uB370\uC774\uD2B8 \uB0A0\uC9DC(\uCD5C\uC2E0\uC21C)",
      SORT_LAST_MODIFIED_ASC: "\uC5C5\uB370\uC774\uD2B8 \uB0A0\uC9DC(\uC624\uB798\uB41C \uC21C)",
      SORT_CREATED_DESC: "\uC791\uC131\uC77C(\uCD5C\uC2E0\uC21C)",
      SORT_CREATED_ASC: "\uC791\uC131\uC77C(\uC624\uB798\uB41C \uC21C)",
      SHOW_FILE_NAME: "\uD30C\uC77C \uC774\uB984 \uD45C\uC2DC",
      SHOW_FIRST_HEADER: "\uCCAB \uBC88\uC9F8 \uD5E4\uB354 \uD45C\uC2DC",
      SHOW_BODY: "\uBCF8\uBB38 \uD45C\uC2DC",
      TOGGLE_FILE_NAME_DISPLAY: "\uD30C\uC77C \uC774\uB984 \uD45C\uC2DC \uD1A0\uAE00",
      TOGGLE_FIRST_HEADER_DISPLAY: "\uCCAB \uBC88\uC9F8 \uD5E4\uB354 \uD45C\uC2DC \uD1A0\uAE00",
      TOGGLE_BODY_DISPLAY: "\uBCF8\uBB38 \uD45C\uC2DC \uD1A0\uAE00",
      FILE_NAME_FONT_SIZE: "\uD30C\uC77C \uC774\uB984 \uAE00\uAF34 \uD06C\uAE30",
      FIRST_HEADER_FONT_SIZE: "\uCCAB \uBC88\uC9F8 \uD5E4\uB354 \uAE00\uAF34 \uD06C\uAE30",
      BODY_FONT_SIZE: "\uBCF8\uBB38 \uAE00\uAF34 \uD06C\uAE30",
      SET_FILE_NAME_FONT_SIZE: "\uD30C\uC77C \uC774\uB984 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
      SET_FIRST_HEADER_FONT_SIZE: "\uCCAB \uBC88\uC9F8 \uD5E4\uB354 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
      SET_BODY_FONT_SIZE: "\uBCF8\uBB38 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
      SCROLL_UP_ONE_CARD: "\uCE74\uB4DC \uD558\uB098\uB9CC\uD07C \uC704\uB85C \uC2A4\uD06C\uB864",
      SCROLL_DOWN_ONE_CARD: "\uCE74\uB4DC \uD558\uB098\uB9CC\uD07C \uC544\uB798\uB85C \uC2A4\uD06C\uB864",
      SCROLL_LEFT_ONE_CARD: "\uCE74\uB4DC \uD558\uB098\uB9CC\uD07C \uC67C\uCABD\uC73C\uB85C \uC2A4\uD06C\uB864",
      SCROLL_RIGHT_ONE_CARD: "\uCE74\uB4DC \uD558\uB098\uB9CC\uD07C \uC624\uB978\uCABD\uC73C\uB85C \uC2A4\uD06C\uB864",
      SCROLL_UP_LEFT_ONE_PAGE: "\uD55C \uD398\uC774\uC9C0 \uC704\uB85C/\uC67C\uCABD\uC73C\uB85C \uC2A4\uD06C\uB864",
      SCROLL_DOWN_RIGHT_ONE_PAGE: "\uD55C \uD398\uC774\uC9C0 \uC544\uB798\uB85C/\uC624\uB978\uCABD\uC73C\uB85C \uC2A4\uD06C\uB864",
      CENTER_ACTIVE_CARD: "\uD65C\uC131 \uCE74\uB4DC \uC911\uC559 \uC815\uB82C",
      MOVE_FOCUS_TO_CARD_NAVIGATOR: "\uCE74\uB4DC \uB124\uBE44\uAC8C\uC774\uD130\uB85C \uD3EC\uCEE4\uC2A4 \uC774\uB3D9",
      OPEN_CARD_CONTEXT_MENU: "\uCE74\uB4DC \uCEE8\uD14D\uC2A4\uD2B8 \uBA54\uB274 \uC5F4\uAE30",
      MOVE_UP_ONE_CARD: "\uCE74\uB4DC \uD558\uB098\uB9CC\uD07C \uC704\uB85C \uC774\uB3D9",
      MOVE_DOWN_ONE_CARD: "\uCE74\uB4DC \uD558\uB098\uB9CC\uD07C \uC544\uB798\uB85C \uC774\uB3D9",
      MOVE_LEFT_ONE_CARD: "\uCE74\uB4DC \uD558\uB098\uB9CC\uD07C \uC67C\uCABD\uC73C\uB85C \uC774\uB3D9",
      MOVE_RIGHT_ONE_CARD: "\uCE74\uB4DC \uD558\uB098\uB9CC\uD07C \uC624\uB978\uCABD\uC73C\uB85C \uC774\uB3D9",
      MOVE_UP_LEFT_ONE_PAGE: "\uD55C \uD398\uC774\uC9C0 \uC704\uB85C/\uC67C\uCABD\uC73C\uB85C \uC774\uB3D9",
      MOVE_DOWN_RIGHT_ONE_PAGE: "\uD55C \uD398\uC774\uC9C0 \uC544\uB798\uB85C/\uC624\uB978\uCABD\uC73C\uB85C \uC774\uB3D9",
      CENTER_CURRENTLY_ACTIVE_CARD: "\uD604\uC7AC \uD65C\uC131 \uCE74\uB4DC\uB97C \uC911\uC559\uC5D0 \uBC30\uCE58",
      SET_FOCUS_TO_CARD_NAVIGATOR: "\uCE74\uB4DC \uB124\uBE44\uAC8C\uC774\uD130\uC5D0 \uD3EC\uCEE4\uC2A4 \uC124\uC815",
      OPEN_CONTEXT_MENU_FOR_FOCUSED_CARD: "\uD3EC\uCEE4\uC2A4\uB41C \uCE74\uB4DC\uC758 \uCEE8\uD14D\uC2A4\uD2B8 \uBA54\uB274 \uC5F4\uAE30",
      CONFIRM_DELETE: "\uC0AD\uC81C \uD655\uC778",
      CONFIRM_DELETE_ITEM: "\uC815\uB9D0\uB85C \uC0AD\uC81C\uD558\uC2DC\uACA0\uC2B5\uB2C8\uAE4C?",
      CANCEL: "\uCDE8\uC18C",
      ERROR_SAVING_SETTINGS: "\uC124\uC815 \uC800\uC7A5 \uC911 \uC624\uB958 \uBC1C\uC0DD:",
      ERROR_SAVING_DEFAULT_PRESET: "\uAE30\uBCF8 \uD504\uB9AC\uC14B \uC800\uC7A5 \uC911 \uC624\uB958 \uBC1C\uC0DD:",
      ERROR_LOADING_PRESET_FROM_FILE: "{{fileName}} \uD30C\uC77C\uC5D0\uC11C \uD504\uB9AC\uC14B \uB85C\uB529 \uC911 \uC624\uB958 \uBC1C\uC0DD:",
      ERROR_SAVING_NEW_PRESET: "\uC0C8 \uD504\uB9AC\uC14B {{presetName}} \uC800\uC7A5 \uC911 \uC624\uB958 \uBC1C\uC0DD:",
      PRESET_FOLDER: "\uD504\uB9AC\uC14B \uD3F4\uB354",
      SELECT_PRESET_FOLDER: "\uBA3C\uC800 Vault \uB0B4\uC5D0 JSON \uD615\uC2DD\uC758 \uD504\uB9AC\uC14B \uD30C\uC77C\uC744 \uC800\uC7A5\uD560 \uD3F4\uB354\uB97C \uB9CC\uB4E4\uACE0 \uADF8 \uD3F4\uB354\uB97C \uC120\uD0DD\uD558\uC138\uC694. \uAE30\uC874\uC758 \uD3F4\uB354\uB294 \uD504\uB9AC\uC14B \uD30C\uC77C\uC744 \uC0C8\uB85C \uC9C0\uC815\uD55C \uD3F4\uB354\uC5D0 \uC218\uB3D9\uC73C\uB85C \uC62E\uAE34 \uD6C4 \uC548\uC804\uD558\uAC8C \uC0AD\uC81C\uD558\uC138\uC694.",
      PRESET_FOLDER_PLACEHOLDER: "\uC608: CardNavigatorPresets",
      PRESET_MANAGEMENT_AND_GLOBAL_SETTINGS: "\uD504\uB9AC\uC14B \uAD00\uB9AC \uBC0F \uC804\uC5ED \uC124\uC815",
      PRESET_MANAGEMENT_DESC: "\uD604\uC7AC \uC124\uC815\uC73C\uB85C \uD504\uB9AC\uC14B\uC744 \uC0C8\uB85C \uB9CC\uB4E4\uAC70\uB098 JSON \uD615\uC2DD\uC758 \uB370\uC774\uD130\uB97C \uC785\uB825\uD558\uC5EC \uC0C8 \uD504\uB9AC\uC14B\uC744 \uB9CC\uB4E4 \uC218 \uC788\uC2B5\uB2C8\uB2E4. \uD504\uB9AC\uC14B\uC744 \uD3B8\uC9D1, \uBCF5\uC0AC, \uC0AD\uC81C, \uB0B4\uBCF4\uB0B4\uAE30 \uBC0F \uC804\uC5ED \uD504\uB9AC\uC14B\uC73C\uB85C \uC124\uC815 \uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.",
      CREATE_NEW_PRESET: "\uC0C8 \uD504\uB9AC\uC14B \uC0DD\uC131",
      IMPORT_PRESET: "\uD504\uB9AC\uC14B \uAC00\uC838\uC624\uAE30",
      NO_DESCRIPTION: "\uC124\uBA85 \uC5C6\uC74C",
      EDIT: "\uD3B8\uC9D1",
      CLONE: "\uBCF5\uC81C",
      DELETE: "\uC0AD\uC81C",
      EXPORT: "\uB0B4\uBCF4\uB0B4\uAE30",
      SET_AS_GLOBAL_PRESET: "\uC804\uC5ED \uD504\uB9AC\uC14B\uC73C\uB85C \uC124\uC815",
      PRESET_NAME: "\uC774\uB984",
      PRESET_DELETED_NOTICE: "\uD504\uB9AC\uC14B\uC774 \uC0AD\uC81C\uB418\uACE0 \uAE30\uBCF8 \uD504\uB9AC\uC14B\uC774 \uC801\uC6A9\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
      AUTO_APPLY_PRESETS: "\uD504\uB9AC\uC14B \uC790\uB3D9 \uC801\uC6A9",
      AUTO_APPLY_PRESETS_DESC: "\uD30C\uC77C\uC744 \uC5F4 \uB54C \uD504\uB9AC\uC14B\uC744 \uC790\uB3D9\uC73C\uB85C \uC801\uC6A9\uD569\uB2C8\uB2E4.",
      AUTO_APPLY_FOLDER_PRESET: "\uD3F4\uB354\uBCC4 \uD504\uB9AC\uC14B \uC790\uB3D9 \uC801\uC6A9",
      AUTO_APPLY_FOLDER_PRESET_DESC: "\uB2E4\uB978 \uD3F4\uB354\uC758 \uD30C\uC77C\uC744 \uC5F4 \uB54C \uD3F4\uB354\uBCC4 \uD504\uB9AC\uC14B\uC744 \uC790\uB3D9\uC73C\uB85C \uC801\uC6A9\uD569\uB2C8\uB2E4. \uD3F4\uB354\uC5D0 \uD504\uB9AC\uC14B\uC774 \uC5C6\uC73C\uBA74 \uC804\uC5ED \uD504\uB9AC\uC14B\uC774 \uC801\uC6A9\uB429\uB2C8\uB2E4.",
      ADD_NEW_FOLDER_PRESET: "\uC0C8 \uD3F4\uB354 \uD504\uB9AC\uC14B \uCD94\uAC00",
      ADD_NEW_FOLDER_PRESET_DESC: "\uC0C8\uB85C\uC6B4 \uD3F4\uB354\uBCC4 \uD504\uB9AC\uC14B\uC744 \uCD94\uAC00\uD569\uB2C8\uB2E4.",
      PRESET_ALREADY_EXISTS: "\uD504\uB9AC\uC14B\uC774 \uC774\uBBF8 \uC874\uC7AC\uD569\uB2C8\uB2E4",
      FOLDER: "\uD3F4\uB354",
      PRESET_ALREADY_EXISTS_FOR_FOLDER: "\uC774 \uD3F4\uB354\uC5D0 \uB300\uD55C \uD504\uB9AC\uC14B\uC774 \uC774\uBBF8 \uC874\uC7AC\uD569\uB2C8\uB2E4",
      PRESET: "\uD504\uB9AC\uC14B",
      MOVE_DOWN: "\uC544\uB798\uB85C \uC774\uB3D9",
      PRESET_NOT_FOUND: "\uD504\uB9AC\uC14B '{{name}}'\uC744(\uB97C) \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4",
      SOURCE_PRESET_NOT_FOUND: "\uC18C\uC2A4 \uD504\uB9AC\uC14B '{{name}}'\uC744(\uB97C) \uCC3E\uC744 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4",
      PRESET_ALREADY_EXISTS_WITH_NAME: "\uD504\uB9AC\uC14B '{{name}}'\uC774(\uAC00) \uC774\uBBF8 \uC874\uC7AC\uD569\uB2C8\uB2E4",
      INVALID_PRESET_FORMAT: "\uC798\uBABB\uB41C \uD504\uB9AC\uC14B \uD615\uC2DD\uC785\uB2C8\uB2E4",
      PRESET_IMPORT_FAILED: "\uD504\uB9AC\uC14B \uAC00\uC838\uC624\uAE30 \uC2E4\uD328: {{error}}",
      GLOBAL_PRESET_NOT_SET: "\uC804\uC5ED \uD504\uB9AC\uC14B\uC774 \uC124\uC815\uB418\uC9C0 \uC54A\uC558\uC2B5\uB2C8\uB2E4",
      CONTAINER_SETTINGS: "\uCEE8\uD14C\uC774\uB108 \uC124\uC815",
      SOURCE_FOLDER: "\uC18C\uC2A4 \uD3F4\uB354",
      SOURCE_FOLDER_DESC: "\uCE74\uB4DC \uB124\uBE44\uAC8C\uC774\uD130\uC5D0\uC11C \uD65C\uC131 \uD3F4\uB354\uC758 \uB178\uD2B8\uB97C \uCE74\uB4DC\uB85C \uD45C\uC2DC\uD560\uC9C0 \uC120\uD0DD\uD55C \uD3F4\uB354\uC758 \uB178\uD2B8\uB97C \uCE74\uB4DC\uB85C \uD45C\uC2DC\uD560\uC9C0 \uC120\uD0DD\uD558\uC138\uC694.",
      SELECT_FOLDER: "\uD3F4\uB354 \uC120\uD0DD",
      SELECT_FOLDER_DESC: "\uC18C\uC2A4 \uD3F4\uB354 \uC120\uD0DD",
      SELECT_FOLDER_PLACEHOLDER: "\uD3F4\uB354 \uC120\uD0DD",
      DEFAULT_SORT_METHOD: "\uAE30\uBCF8 \uC815\uB82C \uBC29\uBC95",
      DEFAULT_SORT_METHOD_DESC: "\uCE74\uB4DC\uC758 \uAE30\uBCF8 \uC815\uB82C \uBC29\uBC95\uC744 \uC120\uD0DD\uD558\uC138\uC694.",
      CENTER_ACTIVE_CARD_ON_OPEN: "\uC5F4 \uB54C \uD65C\uC131 \uCE74\uB4DC \uC911\uC559 \uC815\uB82C",
      CENTER_ACTIVE_CARD_ON_OPEN_DESC: "\uCE74\uB4DC \uB124\uBE44\uAC8C\uC774\uD130\uB97C \uC5F4 \uB54C \uC790\uB3D9\uC73C\uB85C \uD65C\uC131 \uCE74\uB4DC\uB97C \uC911\uC559\uC5D0 \uC815\uB82C\uD569\uB2C8\uB2E4",
      LAYOUT_SETTINGS: "\uB808\uC774\uC544\uC6C3 \uC124\uC815",
      DEFAULT_LAYOUT: "\uAE30\uBCF8 \uB808\uC774\uC544\uC6C3",
      DEFAULT_LAYOUT_DESC: "\uCE74\uB4DC \uB124\uBE44\uAC8C\uC774\uD130\uC758 \uAE30\uBCF8 \uB808\uC774\uC544\uC6C3\uC744 \uC120\uD0DD\uD558\uC138\uC694.",
      AUTO: "\uC790\uB3D9",
      LIST: "\uBAA9\uB85D",
      GRID: "\uADF8\uB9AC\uB4DC",
      MASONRY: "\uB9E4\uC18C\uB2C8",
      CARD_WIDTH_THRESHOLD: "\uCE74\uB4DC \uB108\uBE44 \uC784\uACC4\uAC12",
      CARD_WIDTH_THRESHOLD_DESC: "\uC790\uB3D9 \uB808\uC774\uC544\uC6C3\uC5D0\uC11C \uC5F4 \uCD94\uAC00/\uC81C\uAC70\uB97C \uC704\uD55C \uCE74\uB4DC \uB108\uBE44 \uC784\uACC4\uAC12",
      ALIGN_CARD_HEIGHT: "\uCE74\uB4DC \uB192\uC774 \uC815\uB82C",
      ALIGN_CARD_HEIGHT_DESC: "\uD65C\uC131\uD654\uD558\uBA74 \uBAA8\uB4E0 \uCE74\uB4DC\uC758 \uB192\uC774\uAC00 \uB3D9\uC77C\uD569\uB2C8\uB2E4(\uADF8\uB9AC\uB4DC). \uBE44\uD65C\uC131\uD654\uD558\uBA74 \uCE74\uB4DC \uB192\uC774\uAC00 \uB0B4\uC6A9\uC5D0 \uB9DE\uAC8C \uC870\uC815\uB429\uB2C8\uB2E4(\uB9E4\uC18C\uB2C8).",
      CARDS_PER_VIEW: "\uBDF0\uB2F9 \uCE74\uB4DC \uC218",
      CARDS_PER_VIEW_DESC: "\uB9AC\uC2A4\uD2B8 \uB808\uC774\uC544\uC6C3\uC5D0\uC11C \uCE74\uB4DC\uC758 \uB192\uC774\uAC00 \uAC19\uC744 \uB54C \uD55C \uBC88\uC5D0 \uD45C\uC2DC\uD560 \uCE74\uB4DC \uC218",
      GRID_COLUMNS: "\uADF8\uB9AC\uB4DC \uC5F4",
      GRID_COLUMNS_DESC: "\uADF8\uB9AC\uB4DC \uB808\uC774\uC544\uC6C3\uC758 \uC5F4 \uC218",
      GRID_CARD_HEIGHT: "\uADF8\uB9AC\uB4DC \uCE74\uB4DC \uB192\uC774",
      GRID_CARD_HEIGHT_DESC: "\uADF8\uB9AC\uB4DC \uB808\uC774\uC544\uC6C3\uC758 \uCE74\uB4DC \uB192\uC774",
      MASONRY_COLUMNS: "\uB9E4\uC18C\uB2C8 \uC5F4",
      MASONRY_COLUMNS_DESC: "\uB9E4\uC18C\uB2C8 \uB808\uC774\uC544\uC6C3\uC758 \uC5F4 \uC218",
      CARD_CONTENT_SETTINGS: "\uCE74\uB4DC \uB0B4\uC6A9 \uC124\uC815",
      RENDER_CONTENT_AS_HTML: "HTML\uB85C \uB0B4\uC6A9 \uB80C\uB354\uB9C1",
      RENDER_CONTENT_AS_HTML_DESC: "\uD65C\uC131\uD654\uD558\uBA74 \uCE74\uB4DC \uB0B4\uC6A9\uC774 HTML\uB85C \uB80C\uB354\uB9C1\uB429\uB2C8\uB2E4. \uB0B4\uC6A9\uC774 \uC798 \uD45C\uC2DC\uB418\uC9C0 \uC54A\uAC70\uB098 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD560 \uB54C\uC5D0\uB294 \uBCF8\uBB38 \uAE38\uC774 \uC81C\uD55C\uC744 \uC870\uC815\uD558\uC138\uC694.",
      DRAG_AND_DROP_CONTENT: "\uB0B4\uC6A9 \uB4DC\uB798\uADF8 \uC564 \uB4DC\uB86D",
      DRAG_AND_DROP_CONTENT_DESC: "\uD65C\uC131\uD654\uD558\uBA74 \uCE74\uB4DC\uB97C \uB4DC\uB798\uADF8\uD560 \uB54C \uB9C1\uD06C \uB300\uC2E0 \uC544\uB798\uC5D0\uC11C \uC120\uD0DD\uD55C \uCE74\uB4DC\uC758 \uB0B4\uC6A9\uC774 \uC0BD\uC785\uB429\uB2C8\uB2E4.",
      BODY_LENGTH_LIMIT: "\uBCF8\uBB38 \uAE38\uC774 \uC81C\uD55C",
      BODY_LENGTH_LIMIT_DESC: "\uC81C\uD55C\uB41C \uBCF8\uBB38 \uAE38\uC774\uC640 \uBB34\uC81C\uD55C \uBCF8\uBB38 \uAE38\uC774 \uC0AC\uC774\uB97C \uC804\uD658\uD569\uB2C8\uB2E4.",
      BODY_LENGTH: "\uBCF8\uBB38 \uAE38\uC774",
      BODY_LENGTH_DESC: "\uBCF8\uBB38 \uAE38\uC774\uAC00 \uC81C\uD55C\uB41C \uACBD\uC6B0 \uAC01 \uCE74\uB4DC\uC5D0 \uD45C\uC2DC\uB418\uB294 \uCD5C\uB300 \uBCF8\uBB38 \uAE38\uC774\uB97C \uC124\uC815\uD569\uB2C8\uB2E4.",
      CARD_STYLING_SETTINGS: "\uCE74\uB4DC \uC2A4\uD0C0\uC77C \uC124\uC815",
      FILE_NAME_FONT_SIZE_DESC: "\uCE74\uB4DC\uC758 \uD30C\uC77C \uC774\uB984 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
      FIRST_HEADER_FONT_SIZE_DESC: "\uCE74\uB4DC\uC758 \uCCAB \uBC88\uC9F8 \uD5E4\uB354 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
      BODY_FONT_SIZE_DESC: "\uCE74\uB4DC\uC758 \uBCF8\uBB38 \uD14D\uC2A4\uD2B8 \uAE00\uAF34 \uD06C\uAE30 \uC124\uC815",
      KEYBOARD_SHORTCUTS: "\uD0A4\uBCF4\uB4DC \uB2E8\uCD95\uD0A4",
      KEYBOARD_SHORTCUTS_DESC: "\uCE74\uB4DC \uB124\uBE44\uAC8C\uC774\uD130\uB294 \uB2E4\uC74C \uAE30\uB2A5\uB4E4\uC5D0 \uD0A4\uBCF4\uB4DC \uB2E8\uCD95\uD0A4\uB97C \uD560\uB2F9\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4. Obsidian\uC758 \uB2E8\uCD95\uD0A4 \uC124\uC815\uC5D0\uC11C \uC774\uB97C \uC124\uC815\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4:",
      COMMAND: "\uBA85\uB839",
      DESCRIPTION: "\uC124\uBA85",
      KEYBOARD_SHORTCUTS_CUSTOMIZE_NOTE: '\uC774 \uC791\uC5C5\uB4E4\uC758 \uB2E8\uCD95\uD0A4\uB97C \uC124\uC815\uD558\uB824\uBA74 \uC124\uC815 \u2192 \uB2E8\uCD95\uD0A4\uB85C \uC774\uB3D9\uD558\uC5EC "Card Navigator"\uB97C \uAC80\uC0C9\uD558\uC138\uC694. \uADF8\uB7F0 \uB2E4\uC74C \uAC01 \uC791\uC5C5\uC5D0 \uB300\uD574 \uC6D0\uD558\uB294 \uD0A4 \uC870\uD569\uC744 \uD560\uB2F9\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.',
      KEYBOARD_SHORTCUTS_ADDITIONAL_NOTE: "\uCC38\uACE0: \uD0D0\uC0C9\uC744 \uC704\uD55C \uD654\uC0B4\uD45C \uD0A4\uC640 \uCE74\uB4DC\uB97C \uC5F4\uAE30 \uC704\uD55C Enter \uD0A4\uC640 \uAC19\uC740 \uC77C\uBD80 \uB2E8\uCD95\uD0A4\uB294 \uB0B4\uC7A5\uB418\uC5B4 \uC788\uC73C\uBA70 \uC0AC\uC6A9\uC790 \uC815\uC758\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.",
      ENTER_PRESET_NAME: "\uD504\uB9AC\uC14B \uC774\uB984 \uC785\uB825",
      ENTER_PRESET_NAME_PLACEHOLDER: "\uD504\uB9AC\uC14B \uC774\uB984\uC744 \uC785\uB825\uD558\uC138\uC694",
      ENTER_PRESET_DESCRIPTION: "\uD504\uB9AC\uC14B \uC124\uBA85 \uC785\uB825",
      ENTER_PRESET_DESCRIPTION_PLACEHOLDER: "\uD504\uB9AC\uC14B \uC124\uBA85\uC744 \uC785\uB825\uD558\uC138\uC694",
      PRESET_DATA: "\uD504\uB9AC\uC14B \uB370\uC774\uD130",
      EDIT_PRESET_DATA_DESC: "\uD504\uB9AC\uC14B \uB370\uC774\uD130 \uD3B8\uC9D1 (JSON \uD615\uC2DD)",
      PRESET_DATA_PLACEHOLDER: "JSON \uD615\uC2DD\uC73C\uB85C \uD504\uB9AC\uC14B \uB370\uC774\uD130\uB97C \uC785\uB825\uD558\uC138\uC694",
      UPDATE_WITH_CURRENT_SETTINGS: "\uD604\uC7AC \uC124\uC815\uC73C\uB85C \uC5C5\uB370\uC774\uD2B8",
      SAVE: "\uC800\uC7A5",
      EDIT_PRESET: "\uD504\uB9AC\uC14B \uD3B8\uC9D1",
      CLONE_PRESET: "\uD504\uB9AC\uC14B \uBCF5\uC81C",
      PRESET_COPY: "{{name}}\uC758 \uBCF5\uC0AC\uBCF8",
      ENTER_PRESET_NAME_NOTICE: "\uD504\uB9AC\uC14B \uC774\uB984\uC744 \uC785\uB825\uD574\uC8FC\uC138\uC694",
      PRESET_DATA_EMPTY: "\uD504\uB9AC\uC14B \uB370\uC774\uD130\uB294 \uBE44\uC6CC\uB458 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4",
      PRESET_SAVED: "'{{name}}' \uD504\uB9AC\uC14B\uC774 \uC800\uC7A5\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
      FAILED_TO_SAVE_PRESET: "\uD504\uB9AC\uC14B \uC800\uC7A5 \uC2E4\uD328",
      PRESET_SAVE_FAILED: "\uD504\uB9AC\uC14B \uC800\uC7A5 \uC2E4\uD328: {{error}}",
      PASTE_PRESET_JSON_HERE: "\uC5EC\uAE30\uC5D0 \uD504\uB9AC\uC14B JSON\uC744 \uBD99\uC5EC\uB123\uC73C\uC138\uC694",
      IMPORT: "\uAC00\uC838\uC624\uAE30",
      INVALID_PRESET_DATA: "\uC798\uBABB\uB41C \uD504\uB9AC\uC14B \uB370\uC774\uD130",
      PRESET_IMPORTED_SUCCESSFULLY: "\uD504\uB9AC\uC14B '{{name}}'\uC744(\uB97C) \uC131\uACF5\uC801\uC73C\uB85C \uAC00\uC838\uC654\uC2B5\uB2C8\uB2E4",
      UNKNOWN_ERROR_DURING_IMPORT: "\uAC00\uC838\uC624\uAE30 \uC911 \uC54C \uC218 \uC5C6\uB294 \uC624\uB958 \uBC1C\uC0DD",
      EXPORT_PRESET: "\uD504\uB9AC\uC14B \uB0B4\uBCF4\uB0B4\uAE30",
      COPY: "\uBCF5\uC0AC",
      PRESET_JSON_COPIED: "\uD504\uB9AC\uC14B JSON\uC774 \uD074\uB9BD\uBCF4\uB4DC\uC5D0 \uBCF5\uC0AC\uB418\uC5C8\uC2B5\uB2C8\uB2E4",
      ERROR_LOADING_PRESET: "\uD504\uB9AC\uC14B \uB85C\uB529 \uC911 \uC624\uB958 \uBC1C\uC0DD",
      NO_PRESET_SELECTED: "\uC120\uD0DD\uB41C \uD504\uB9AC\uC14B \uC5C6\uC74C"
    };
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CardNavigatorPlugin,
  languageResources: () => languageResources,
  translationLanguage: () => translationLanguage
});
module.exports = __toCommonJS(main_exports);
var import_obsidian22 = require("obsidian");

// src/ui/cardNavigator.ts
var import_obsidian8 = require("obsidian");

// src/ui/toolbar/toolbar.ts
var import_obsidian4 = require("obsidian");

// src/ui/toolbar/toolbarActions.ts
var import_obsidian3 = require("obsidian");

// src/ui/settings/components/FolderSuggest.ts
var import_obsidian2 = require("obsidian");

// src/ui/settings/components/suggest.ts
var import_obsidian = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle2(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle2(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance2 = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance2.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance2.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance2.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance2.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle2(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance2 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance2.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance: instance2
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance2.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance2;
    }
    instance2.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance: instance2,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance2;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/ui/settings/components/suggest.ts
var wrapAround = (value, size) => {
  return (value % size + size) % size;
};
var Suggest = class {
  constructor(owner, containerEl, scope) {
    this.values = [];
    // 빈 배열로 초기화
    this.suggestions = [];
    // 이것도 초기화하는 것이 좋습니다
    this.selectedItem = 0;
    this.owner = owner;
    this.containerEl = containerEl;
    containerEl.on(
      "click",
      ".suggestion-item",
      (event, target) => {
        this.onSuggestionClick(event, target);
      }
    );
    containerEl.on(
      "mousemove",
      ".suggestion-item",
      (event, target) => {
        this.onSuggestionMouseover(event, target);
      }
    );
    scope.register([], "ArrowUp", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem - 1, true);
        return false;
      }
    });
    scope.register([], "ArrowDown", (event) => {
      if (!event.isComposing) {
        this.setSelectedItem(this.selectedItem + 1, true);
        return false;
      }
    });
    scope.register([], "Enter", (event) => {
      if (!event.isComposing) {
        this.useSelectedItem(event);
        return false;
      }
    });
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(_event, el) {
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  setSuggestions(values) {
    this.containerEl.empty();
    const suggestionEls = [];
    values.forEach((value) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(value, suggestionEl);
      suggestionEls.push(suggestionEl);
    });
    this.values = values;
    this.suggestions = suggestionEls;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    const currentValue = this.values[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  setSelectedItem(selectedIndex, scrollIntoView) {
    const normalizedIndex = wrapAround(
      selectedIndex,
      this.suggestions.length
    );
    const prevSelectedSuggestion = this.suggestions[this.selectedItem];
    const selectedSuggestion = this.suggestions[normalizedIndex];
    prevSelectedSuggestion == null ? void 0 : prevSelectedSuggestion.removeClass("is-selected");
    selectedSuggestion == null ? void 0 : selectedSuggestion.addClass("is-selected");
    this.selectedItem = normalizedIndex;
    if (scrollIntoView) {
      selectedSuggestion.scrollIntoView(false);
    }
  }
};
var TextInputSuggest = class {
  constructor(app, inputEl) {
    this.app = app;
    this.inputEl = inputEl;
    this.scope = new import_obsidian.Scope();
    this.suggestEl = createDiv("suggestion-container");
    const suggestion = this.suggestEl.createDiv("suggestion");
    this.suggest = new Suggest(this, suggestion, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on(
      "mousedown",
      ".suggestion-container",
      (event) => {
        event.preventDefault();
      }
    );
  }
  onInputChanged() {
    const inputStr = this.inputEl.value;
    const suggestions = this.getSuggestions(inputStr);
    if (!suggestions) {
      this.close();
      return;
    }
    if (suggestions.length > 0) {
      this.suggest.setSuggestions(suggestions);
      this.open(this.app.workspace.containerEl, this.inputEl);
    } else {
      this.close();
    }
  }
  open(container, inputEl) {
    this.app.keymap.pushScope(this.scope);
    container.appendChild(this.suggestEl);
    this.popper = createPopper(inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "sameWidth",
          enabled: true,
          fn: ({ state, instance: instance2 }) => {
            const targetWidth = `${state.rects.reference.width}px`;
            if (state.styles.popper.width === targetWidth) {
              return;
            }
            state.styles.popper.width = targetWidth;
            instance2.update();
          },
          phase: "beforeWrite",
          requires: ["computeStyles"]
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggest.setSuggestions([]);
    if (this.popper)
      this.popper.destroy();
    this.suggestEl.detach();
  }
};

// src/ui/settings/components/FolderSuggest.ts
var FolderSuggest = class extends TextInputSuggest {
  constructor(app, inputEl, onBlur) {
    super(app, inputEl);
    this.app = app;
    this.inputEl = inputEl;
    this.onBlur = onBlur || (() => {
    });
    this.containerEl = createDiv("suggestion-container");
    this.inputEl.addEventListener("blur", () => {
      setTimeout(() => {
        if (!this.containerEl.contains(document.activeElement)) {
          this.onBlur();
        }
      }, 100);
    });
  }
  getSuggestions(inputStr) {
    const abstractFiles = this.app.vault.getAllLoadedFiles();
    const folders = [];
    const lowerCaseInputStr = inputStr.toLowerCase();
    abstractFiles.forEach((folder) => {
      if (folder instanceof import_obsidian2.TFolder && folder.path.toLowerCase().contains(lowerCaseInputStr)) {
        folders.push(folder);
      }
    });
    return folders.slice(0, 1e3);
  }
  renderSuggestion(file, el) {
    el.setText(file.path);
  }
  selectSuggestion(file) {
    this.inputEl.value = file.path;
    this.inputEl.trigger("input");
    this.close();
  }
};

// node_modules/i18next/dist/esm/i18next.js
var consoleLogger = {
  type: "logger",
  log(args) {
    this.output("log", args);
  },
  warn(args) {
    this.output("warn", args);
  },
  error(args) {
    this.output("error", args);
  },
  output(type, args) {
    if (console && console[type])
      console[type].apply(console, args);
  }
};
var Logger = class {
  constructor(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(concreteLogger, options);
  }
  init(concreteLogger) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = options.prefix || "i18next:";
    this.logger = concreteLogger || consoleLogger;
    this.options = options;
    this.debug = options.debug;
  }
  log() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return this.forward(args, "log", "", true);
  }
  warn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return this.forward(args, "warn", "", true);
  }
  error() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return this.forward(args, "error", "");
  }
  deprecate() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
  }
  forward(args, lvl, prefix, debugOnly) {
    if (debugOnly && !this.debug)
      return null;
    if (typeof args[0] === "string")
      args[0] = `${prefix}${this.prefix} ${args[0]}`;
    return this.logger[lvl](args);
  }
  create(moduleName) {
    return new Logger(this.logger, {
      ...{
        prefix: `${this.prefix}:${moduleName}:`
      },
      ...this.options
    });
  }
  clone(options) {
    options = options || this.options;
    options.prefix = options.prefix || this.prefix;
    return new Logger(this.logger, options);
  }
};
var baseLogger = new Logger();
var EventEmitter = class {
  constructor() {
    this.observers = {};
  }
  on(events, listener) {
    events.split(" ").forEach((event) => {
      if (!this.observers[event])
        this.observers[event] = /* @__PURE__ */ new Map();
      const numListeners = this.observers[event].get(listener) || 0;
      this.observers[event].set(listener, numListeners + 1);
    });
    return this;
  }
  off(event, listener) {
    if (!this.observers[event])
      return;
    if (!listener) {
      delete this.observers[event];
      return;
    }
    this.observers[event].delete(listener);
  }
  emit(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    if (this.observers[event]) {
      const cloned = Array.from(this.observers[event].entries());
      cloned.forEach((_ref) => {
        let [observer, numTimesAdded] = _ref;
        for (let i = 0; i < numTimesAdded; i++) {
          observer(...args);
        }
      });
    }
    if (this.observers["*"]) {
      const cloned = Array.from(this.observers["*"].entries());
      cloned.forEach((_ref2) => {
        let [observer, numTimesAdded] = _ref2;
        for (let i = 0; i < numTimesAdded; i++) {
          observer.apply(observer, [event, ...args]);
        }
      });
    }
  }
};
var defer = () => {
  let res;
  let rej;
  const promise = new Promise((resolve, reject) => {
    res = resolve;
    rej = reject;
  });
  promise.resolve = res;
  promise.reject = rej;
  return promise;
};
var makeString = (object) => {
  if (object == null)
    return "";
  return "" + object;
};
var copy = (a, s, t2) => {
  a.forEach((m) => {
    if (s[m])
      t2[m] = s[m];
  });
};
var lastOfPathSeparatorRegExp = /###/g;
var cleanKey = (key) => key && key.indexOf("###") > -1 ? key.replace(lastOfPathSeparatorRegExp, ".") : key;
var canNotTraverseDeeper = (object) => !object || typeof object === "string";
var getLastOfPath = (object, path3, Empty) => {
  const stack = typeof path3 !== "string" ? path3 : path3.split(".");
  let stackIndex = 0;
  while (stackIndex < stack.length - 1) {
    if (canNotTraverseDeeper(object))
      return {};
    const key = cleanKey(stack[stackIndex]);
    if (!object[key] && Empty)
      object[key] = new Empty();
    if (Object.prototype.hasOwnProperty.call(object, key)) {
      object = object[key];
    } else {
      object = {};
    }
    ++stackIndex;
  }
  if (canNotTraverseDeeper(object))
    return {};
  return {
    obj: object,
    k: cleanKey(stack[stackIndex])
  };
};
var setPath = (object, path3, newValue) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path3, Object);
  if (obj !== void 0 || path3.length === 1) {
    obj[k] = newValue;
    return;
  }
  let e = path3[path3.length - 1];
  let p = path3.slice(0, path3.length - 1);
  let last = getLastOfPath(object, p, Object);
  while (last.obj === void 0 && p.length) {
    e = `${p[p.length - 1]}.${e}`;
    p = p.slice(0, p.length - 1);
    last = getLastOfPath(object, p, Object);
    if (last && last.obj && typeof last.obj[`${last.k}.${e}`] !== "undefined") {
      last.obj = void 0;
    }
  }
  last.obj[`${last.k}.${e}`] = newValue;
};
var pushPath = (object, path3, newValue, concat) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path3, Object);
  obj[k] = obj[k] || [];
  obj[k].push(newValue);
};
var getPath = (object, path3) => {
  const {
    obj,
    k
  } = getLastOfPath(object, path3);
  if (!obj)
    return void 0;
  return obj[k];
};
var getPathWithDefaults = (data, defaultData, key) => {
  const value = getPath(data, key);
  if (value !== void 0) {
    return value;
  }
  return getPath(defaultData, key);
};
var deepExtend = (target, source, overwrite) => {
  for (const prop in source) {
    if (prop !== "__proto__" && prop !== "constructor") {
      if (prop in target) {
        if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
          if (overwrite)
            target[prop] = source[prop];
        } else {
          deepExtend(target[prop], source[prop], overwrite);
        }
      } else {
        target[prop] = source[prop];
      }
    }
  }
  return target;
};
var regexEscape = (str) => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
var _entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
var escape = (data) => {
  if (typeof data === "string") {
    return data.replace(/[&<>"'\/]/g, (s) => _entityMap[s]);
  }
  return data;
};
var RegExpCache = class {
  constructor(capacity) {
    this.capacity = capacity;
    this.regExpMap = /* @__PURE__ */ new Map();
    this.regExpQueue = [];
  }
  getRegExp(pattern) {
    const regExpFromCache = this.regExpMap.get(pattern);
    if (regExpFromCache !== void 0) {
      return regExpFromCache;
    }
    const regExpNew = new RegExp(pattern);
    if (this.regExpQueue.length === this.capacity) {
      this.regExpMap.delete(this.regExpQueue.shift());
    }
    this.regExpMap.set(pattern, regExpNew);
    this.regExpQueue.push(pattern);
    return regExpNew;
  }
};
var chars = [" ", ",", "?", "!", ";"];
var looksLikeObjectPathRegExpCache = new RegExpCache(20);
var looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
  nsSeparator = nsSeparator || "";
  keySeparator = keySeparator || "";
  const possibleChars = chars.filter((c) => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
  if (possibleChars.length === 0)
    return true;
  const r = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map((c) => c === "?" ? "\\?" : c).join("|")})`);
  let matched = !r.test(key);
  if (!matched) {
    const ki = key.indexOf(keySeparator);
    if (ki > 0 && !r.test(key.substring(0, ki))) {
      matched = true;
    }
  }
  return matched;
};
var deepFind = function(obj, path3) {
  let keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!obj)
    return void 0;
  if (obj[path3])
    return obj[path3];
  const tokens = path3.split(keySeparator);
  let current = obj;
  for (let i = 0; i < tokens.length; ) {
    if (!current || typeof current !== "object") {
      return void 0;
    }
    let next;
    let nextPath = "";
    for (let j = i; j < tokens.length; ++j) {
      if (j !== i) {
        nextPath += keySeparator;
      }
      nextPath += tokens[j];
      next = current[nextPath];
      if (next !== void 0) {
        if (["string", "number", "boolean"].indexOf(typeof next) > -1 && j < tokens.length - 1) {
          continue;
        }
        i += j - i + 1;
        break;
      }
    }
    current = next;
  }
  return current;
};
var getCleanedCode = (code) => {
  if (code && code.indexOf("_") > 0)
    return code.replace("_", "-");
  return code;
};
var ResourceStore = class extends EventEmitter {
  constructor(data) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super();
    this.data = data || {};
    this.options = options;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    if (this.options.ignoreJSONStructure === void 0) {
      this.options.ignoreJSONStructure = true;
    }
  }
  addNamespaces(ns) {
    if (this.options.ns.indexOf(ns) < 0) {
      this.options.ns.push(ns);
    }
  }
  removeNamespaces(ns) {
    const index = this.options.ns.indexOf(ns);
    if (index > -1) {
      this.options.ns.splice(index, 1);
    }
  }
  getResource(lng, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
    const ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let path3;
    if (lng.indexOf(".") > -1) {
      path3 = lng.split(".");
    } else {
      path3 = [lng, ns];
      if (key) {
        if (Array.isArray(key)) {
          path3.push(...key);
        } else if (typeof key === "string" && keySeparator) {
          path3.push(...key.split(keySeparator));
        } else {
          path3.push(key);
        }
      }
    }
    const result = getPath(this.data, path3);
    if (!result && !ns && !key && lng.indexOf(".") > -1) {
      lng = path3[0];
      ns = path3[1];
      key = path3.slice(2).join(".");
    }
    if (result || !ignoreJSONStructure || typeof key !== "string")
      return result;
    return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
  }
  addResource(lng, ns, key, value) {
    let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: false
    };
    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
    let path3 = [lng, ns];
    if (key)
      path3 = path3.concat(keySeparator ? key.split(keySeparator) : key);
    if (lng.indexOf(".") > -1) {
      path3 = lng.split(".");
      value = ns;
      ns = path3[1];
    }
    this.addNamespaces(ns);
    setPath(this.data, path3, value);
    if (!options.silent)
      this.emit("added", lng, ns, key, value);
  }
  addResources(lng, ns, resources) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: false
    };
    for (const m in resources) {
      if (typeof resources[m] === "string" || Array.isArray(resources[m]))
        this.addResource(lng, ns, m, resources[m], {
          silent: true
        });
    }
    if (!options.silent)
      this.emit("added", lng, ns, resources);
  }
  addResourceBundle(lng, ns, resources, deep, overwrite) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: false,
      skipCopy: false
    };
    let path3 = [lng, ns];
    if (lng.indexOf(".") > -1) {
      path3 = lng.split(".");
      deep = resources;
      resources = ns;
      ns = path3[1];
    }
    this.addNamespaces(ns);
    let pack = getPath(this.data, path3) || {};
    if (!options.skipCopy)
      resources = JSON.parse(JSON.stringify(resources));
    if (deep) {
      deepExtend(pack, resources, overwrite);
    } else {
      pack = {
        ...pack,
        ...resources
      };
    }
    setPath(this.data, path3, pack);
    if (!options.silent)
      this.emit("added", lng, ns, resources);
  }
  removeResourceBundle(lng, ns) {
    if (this.hasResourceBundle(lng, ns)) {
      delete this.data[lng][ns];
    }
    this.removeNamespaces(ns);
    this.emit("removed", lng, ns);
  }
  hasResourceBundle(lng, ns) {
    return this.getResource(lng, ns) !== void 0;
  }
  getResourceBundle(lng, ns) {
    if (!ns)
      ns = this.options.defaultNS;
    if (this.options.compatibilityAPI === "v1")
      return {
        ...{},
        ...this.getResource(lng, ns)
      };
    return this.getResource(lng, ns);
  }
  getDataByLanguage(lng) {
    return this.data[lng];
  }
  hasLanguageSomeTranslations(lng) {
    const data = this.getDataByLanguage(lng);
    const n = data && Object.keys(data) || [];
    return !!n.find((v) => data[v] && Object.keys(data[v]).length > 0);
  }
  toJSON() {
    return this.data;
  }
};
var postProcessor = {
  processors: {},
  addPostProcessor(module2) {
    this.processors[module2.name] = module2;
  },
  handle(processors, value, key, options, translator) {
    processors.forEach((processor) => {
      if (this.processors[processor])
        value = this.processors[processor].process(value, key, options, translator);
    });
    return value;
  }
};
var checkedLoadedFor = {};
var Translator = class extends EventEmitter {
  constructor(services) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super();
    copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, this);
    this.options = options;
    if (this.options.keySeparator === void 0) {
      this.options.keySeparator = ".";
    }
    this.logger = baseLogger.create("translator");
  }
  changeLanguage(lng) {
    if (lng)
      this.language = lng;
  }
  exists(key) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (key === void 0 || key === null) {
      return false;
    }
    const resolved = this.resolve(key, options);
    return resolved && resolved.res !== void 0;
  }
  extractFromKey(key, options) {
    let nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
    if (nsSeparator === void 0)
      nsSeparator = ":";
    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
    let namespaces = options.ns || this.options.defaultNS || [];
    const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
    const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
    if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
      const m = key.match(this.interpolator.nestingRegexp);
      if (m && m.length > 0) {
        return {
          key,
          namespaces
        };
      }
      const parts = key.split(nsSeparator);
      if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
        namespaces = parts.shift();
      key = parts.join(keySeparator);
    }
    if (typeof namespaces === "string")
      namespaces = [namespaces];
    return {
      key,
      namespaces
    };
  }
  translate(keys, options, lastKey) {
    if (typeof options !== "object" && this.options.overloadTranslationOptionHandler) {
      options = this.options.overloadTranslationOptionHandler(arguments);
    }
    if (typeof options === "object")
      options = {
        ...options
      };
    if (!options)
      options = {};
    if (keys === void 0 || keys === null)
      return "";
    if (!Array.isArray(keys))
      keys = [String(keys)];
    const returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
    const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
    const {
      key,
      namespaces
    } = this.extractFromKey(keys[keys.length - 1], options);
    const namespace = namespaces[namespaces.length - 1];
    const lng = options.lng || this.language;
    const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (lng && lng.toLowerCase() === "cimode") {
      if (appendNamespaceToCIMode) {
        const nsSeparator = options.nsSeparator || this.options.nsSeparator;
        if (returnDetails) {
          return {
            res: `${namespace}${nsSeparator}${key}`,
            usedKey: key,
            exactUsedKey: key,
            usedLng: lng,
            usedNS: namespace,
            usedParams: this.getUsedParamsDetails(options)
          };
        }
        return `${namespace}${nsSeparator}${key}`;
      }
      if (returnDetails) {
        return {
          res: key,
          usedKey: key,
          exactUsedKey: key,
          usedLng: lng,
          usedNS: namespace,
          usedParams: this.getUsedParamsDetails(options)
        };
      }
      return key;
    }
    const resolved = this.resolve(keys, options);
    let res = resolved && resolved.res;
    const resUsedKey = resolved && resolved.usedKey || key;
    const resExactUsedKey = resolved && resolved.exactUsedKey || key;
    const resType = Object.prototype.toString.apply(res);
    const noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
    const joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
    const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
    const handleAsObject = typeof res !== "string" && typeof res !== "boolean" && typeof res !== "number";
    if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === "string" && Array.isArray(res))) {
      if (!options.returnObjects && !this.options.returnObjects) {
        if (!this.options.returnedObjectHandler) {
          this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        }
        const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
          ...options,
          ns: namespaces
        }) : `key '${key} (${this.language})' returned an object instead of string.`;
        if (returnDetails) {
          resolved.res = r;
          resolved.usedParams = this.getUsedParamsDetails(options);
          return resolved;
        }
        return r;
      }
      if (keySeparator) {
        const resTypeIsArray = Array.isArray(res);
        const copy2 = resTypeIsArray ? [] : {};
        const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
        for (const m in res) {
          if (Object.prototype.hasOwnProperty.call(res, m)) {
            const deepKey = `${newKeyToUse}${keySeparator}${m}`;
            copy2[m] = this.translate(deepKey, {
              ...options,
              ...{
                joinArrays: false,
                ns: namespaces
              }
            });
            if (copy2[m] === deepKey)
              copy2[m] = res[m];
          }
        }
        res = copy2;
      }
    } else if (handleAsObjectInI18nFormat && typeof joinArrays === "string" && Array.isArray(res)) {
      res = res.join(joinArrays);
      if (res)
        res = this.extendTranslation(res, keys, options, lastKey);
    } else {
      let usedDefault = false;
      let usedKey = false;
      const needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
      const hasDefaultValue = Translator.hasDefaultValue(options);
      const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
      const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {
        ordinal: false
      }) : "";
      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const defaultValue = needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] || options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;
      if (!this.isValidLookup(res) && hasDefaultValue) {
        usedDefault = true;
        res = defaultValue;
      }
      if (!this.isValidLookup(res)) {
        usedKey = true;
        res = key;
      }
      const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
      const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
      const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
      if (usedKey || usedDefault || updateMissing) {
        this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
        if (keySeparator) {
          const fk = this.resolve(key, {
            ...options,
            keySeparator: false
          });
          if (fk && fk.res)
            this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let lngs = [];
        const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
          for (let i = 0; i < fallbackLngs.length; i++) {
            lngs.push(fallbackLngs[i]);
          }
        } else if (this.options.saveMissingTo === "all") {
          lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
        } else {
          lngs.push(options.lng || this.language);
        }
        const send = (l, k, specificDefaultValue) => {
          const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
          if (this.options.missingKeyHandler) {
            this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
          } else if (this.backendConnector && this.backendConnector.saveMissing) {
            this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
          }
          this.emit("missingKey", l, namespace, k, res);
        };
        if (this.options.saveMissing) {
          if (this.options.saveMissingPlurals && needsPluralHandling) {
            lngs.forEach((language) => {
              const suffixes = this.pluralResolver.getSuffixes(language, options);
              if (needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                suffixes.push(`${this.options.pluralSeparator}zero`);
              }
              suffixes.forEach((suffix) => {
                send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);
              });
            });
          } else {
            send(lngs, key, defaultValue);
          }
        }
      }
      res = this.extendTranslation(res, keys, options, resolved, lastKey);
      if (usedKey && res === key && this.options.appendNamespaceToMissingKey)
        res = `${namespace}:${key}`;
      if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
        if (this.options.compatibilityAPI !== "v1") {
          res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : void 0);
        } else {
          res = this.options.parseMissingKeyHandler(res);
        }
      }
    }
    if (returnDetails) {
      resolved.res = res;
      resolved.usedParams = this.getUsedParamsDetails(options);
      return resolved;
    }
    return res;
  }
  extendTranslation(res, key, options, resolved, lastKey) {
    var _this = this;
    if (this.i18nFormat && this.i18nFormat.parse) {
      res = this.i18nFormat.parse(res, {
        ...this.options.interpolation.defaultVariables,
        ...options
      }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
        resolved
      });
    } else if (!options.skipInterpolation) {
      if (options.interpolation)
        this.interpolator.init({
          ...options,
          ...{
            interpolation: {
              ...this.options.interpolation,
              ...options.interpolation
            }
          }
        });
      const skipOnVariables = typeof res === "string" && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let nestBef;
      if (skipOnVariables) {
        const nb = res.match(this.interpolator.nestingRegexp);
        nestBef = nb && nb.length;
      }
      let data = options.replace && typeof options.replace !== "string" ? options.replace : options;
      if (this.options.interpolation.defaultVariables)
        data = {
          ...this.options.interpolation.defaultVariables,
          ...data
        };
      res = this.interpolator.interpolate(res, data, options.lng || this.language || resolved.usedLng, options);
      if (skipOnVariables) {
        const na = res.match(this.interpolator.nestingRegexp);
        const nestAft = na && na.length;
        if (nestBef < nestAft)
          options.nest = false;
      }
      if (!options.lng && this.options.compatibilityAPI !== "v1" && resolved && resolved.res)
        options.lng = this.language || resolved.usedLng;
      if (options.nest !== false)
        res = this.interpolator.nest(res, function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          if (lastKey && lastKey[0] === args[0] && !options.context) {
            _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
            return null;
          }
          return _this.translate(...args, key);
        }, options);
      if (options.interpolation)
        this.interpolator.reset();
    }
    const postProcess = options.postProcess || this.options.postProcess;
    const postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
    if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
      res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
        i18nResolved: {
          ...resolved,
          usedParams: this.getUsedParamsDetails(options)
        },
        ...options
      } : options, this);
    }
    return res;
  }
  resolve(keys) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    let found;
    let usedKey;
    let exactUsedKey;
    let usedLng;
    let usedNS;
    if (typeof keys === "string")
      keys = [keys];
    keys.forEach((k) => {
      if (this.isValidLookup(found))
        return;
      const extracted = this.extractFromKey(k, options);
      const key = extracted.key;
      usedKey = key;
      let namespaces = extracted.namespaces;
      if (this.options.fallbackNS)
        namespaces = namespaces.concat(this.options.fallbackNS);
      const needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
      const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
      const needsContextHandling = options.context !== void 0 && (typeof options.context === "string" || typeof options.context === "number") && options.context !== "";
      const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
      namespaces.forEach((ns) => {
        if (this.isValidLookup(found))
          return;
        usedNS = ns;
        if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
          checkedLoadedFor[`${codes[0]}-${ns}`] = true;
          this.logger.warn(`key "${usedKey}" for languages "${codes.join(", ")}" won't get resolved as namespace "${usedNS}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
        }
        codes.forEach((code) => {
          if (this.isValidLookup(found))
            return;
          usedLng = code;
          const finalKeys = [key];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
            this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
          } else {
            let pluralSuffix;
            if (needsPluralHandling)
              pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);
            const zeroSuffix = `${this.options.pluralSeparator}zero`;
            const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (needsPluralHandling) {
              finalKeys.push(key + pluralSuffix);
              if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
              }
              if (needsZeroSuffixLookup) {
                finalKeys.push(key + zeroSuffix);
              }
            }
            if (needsContextHandling) {
              const contextKey = `${key}${this.options.contextSeparator}${options.context}`;
              finalKeys.push(contextKey);
              if (needsPluralHandling) {
                finalKeys.push(contextKey + pluralSuffix);
                if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                  finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                }
                if (needsZeroSuffixLookup) {
                  finalKeys.push(contextKey + zeroSuffix);
                }
              }
            }
          }
          let possibleKey;
          while (possibleKey = finalKeys.pop()) {
            if (!this.isValidLookup(found)) {
              exactUsedKey = possibleKey;
              found = this.getResource(code, ns, possibleKey, options);
            }
          }
        });
      });
    });
    return {
      res: found,
      usedKey,
      exactUsedKey,
      usedLng,
      usedNS
    };
  }
  isValidLookup(res) {
    return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
  }
  getResource(code, ns, key) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    if (this.i18nFormat && this.i18nFormat.getResource)
      return this.i18nFormat.getResource(code, ns, key, options);
    return this.resourceStore.getResource(code, ns, key, options);
  }
  getUsedParamsDetails() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const optionsKeys = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"];
    const useOptionsReplaceForData = options.replace && typeof options.replace !== "string";
    let data = useOptionsReplaceForData ? options.replace : options;
    if (useOptionsReplaceForData && typeof options.count !== "undefined") {
      data.count = options.count;
    }
    if (this.options.interpolation.defaultVariables) {
      data = {
        ...this.options.interpolation.defaultVariables,
        ...data
      };
    }
    if (!useOptionsReplaceForData) {
      data = {
        ...data
      };
      for (const key of optionsKeys) {
        delete data[key];
      }
    }
    return data;
  }
  static hasDefaultValue(options) {
    const prefix = "defaultValue";
    for (const option in options) {
      if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && void 0 !== options[option]) {
        return true;
      }
    }
    return false;
  }
};
var capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1);
var LanguageUtil = class {
  constructor(options) {
    this.options = options;
    this.supportedLngs = this.options.supportedLngs || false;
    this.logger = baseLogger.create("languageUtils");
  }
  getScriptPartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf("-") < 0)
      return null;
    const p = code.split("-");
    if (p.length === 2)
      return null;
    p.pop();
    if (p[p.length - 1].toLowerCase() === "x")
      return null;
    return this.formatLanguageCode(p.join("-"));
  }
  getLanguagePartFromCode(code) {
    code = getCleanedCode(code);
    if (!code || code.indexOf("-") < 0)
      return code;
    const p = code.split("-");
    return this.formatLanguageCode(p[0]);
  }
  formatLanguageCode(code) {
    if (typeof code === "string" && code.indexOf("-") > -1) {
      const specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
      let p = code.split("-");
      if (this.options.lowerCaseLng) {
        p = p.map((part) => part.toLowerCase());
      } else if (p.length === 2) {
        p[0] = p[0].toLowerCase();
        p[1] = p[1].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1)
          p[1] = capitalize(p[1].toLowerCase());
      } else if (p.length === 3) {
        p[0] = p[0].toLowerCase();
        if (p[1].length === 2)
          p[1] = p[1].toUpperCase();
        if (p[0] !== "sgn" && p[2].length === 2)
          p[2] = p[2].toUpperCase();
        if (specialCases.indexOf(p[1].toLowerCase()) > -1)
          p[1] = capitalize(p[1].toLowerCase());
        if (specialCases.indexOf(p[2].toLowerCase()) > -1)
          p[2] = capitalize(p[2].toLowerCase());
      }
      return p.join("-");
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
  }
  isSupportedCode(code) {
    if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
      code = this.getLanguagePartFromCode(code);
    }
    return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
  }
  getBestMatchFromCodes(codes) {
    if (!codes)
      return null;
    let found;
    codes.forEach((code) => {
      if (found)
        return;
      const cleanedLng = this.formatLanguageCode(code);
      if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng))
        found = cleanedLng;
    });
    if (!found && this.options.supportedLngs) {
      codes.forEach((code) => {
        if (found)
          return;
        const lngOnly = this.getLanguagePartFromCode(code);
        if (this.isSupportedCode(lngOnly))
          return found = lngOnly;
        found = this.options.supportedLngs.find((supportedLng) => {
          if (supportedLng === lngOnly)
            return supportedLng;
          if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0)
            return;
          if (supportedLng.indexOf("-") > 0 && lngOnly.indexOf("-") < 0 && supportedLng.substring(0, supportedLng.indexOf("-")) === lngOnly)
            return supportedLng;
          if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1)
            return supportedLng;
        });
      });
    }
    if (!found)
      found = this.getFallbackCodes(this.options.fallbackLng)[0];
    return found;
  }
  getFallbackCodes(fallbacks, code) {
    if (!fallbacks)
      return [];
    if (typeof fallbacks === "function")
      fallbacks = fallbacks(code);
    if (typeof fallbacks === "string")
      fallbacks = [fallbacks];
    if (Array.isArray(fallbacks))
      return fallbacks;
    if (!code)
      return fallbacks.default || [];
    let found = fallbacks[code];
    if (!found)
      found = fallbacks[this.getScriptPartFromCode(code)];
    if (!found)
      found = fallbacks[this.formatLanguageCode(code)];
    if (!found)
      found = fallbacks[this.getLanguagePartFromCode(code)];
    if (!found)
      found = fallbacks.default;
    return found || [];
  }
  toResolveHierarchy(code, fallbackCode) {
    const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
    const codes = [];
    const addCode = (c) => {
      if (!c)
        return;
      if (this.isSupportedCode(c)) {
        codes.push(c);
      } else {
        this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
      }
    };
    if (typeof code === "string" && (code.indexOf("-") > -1 || code.indexOf("_") > -1)) {
      if (this.options.load !== "languageOnly")
        addCode(this.formatLanguageCode(code));
      if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly")
        addCode(this.getScriptPartFromCode(code));
      if (this.options.load !== "currentOnly")
        addCode(this.getLanguagePartFromCode(code));
    } else if (typeof code === "string") {
      addCode(this.formatLanguageCode(code));
    }
    fallbackCodes.forEach((fc) => {
      if (codes.indexOf(fc) < 0)
        addCode(this.formatLanguageCode(fc));
    });
    return codes;
  }
};
var sets = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}];
var _rulesPluralsTypes = {
  1: (n) => Number(n > 1),
  2: (n) => Number(n != 1),
  3: (n) => 0,
  4: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  5: (n) => Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5),
  6: (n) => Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2),
  7: (n) => Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  8: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3),
  9: (n) => Number(n >= 2),
  10: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4),
  11: (n) => Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3),
  12: (n) => Number(n % 10 != 1 || n % 100 == 11),
  13: (n) => Number(n !== 0),
  14: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3),
  15: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
  16: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2),
  17: (n) => Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1),
  18: (n) => Number(n == 0 ? 0 : n == 1 ? 1 : 2),
  19: (n) => Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3),
  20: (n) => Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2),
  21: (n) => Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0),
  22: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3)
};
var nonIntlVersions = ["v1", "v2", "v3"];
var intlVersions = ["v4"];
var suffixesOrder = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
var createRules = () => {
  const rules = {};
  sets.forEach((set) => {
    set.lngs.forEach((l) => {
      rules[l] = {
        numbers: set.nr,
        plurals: _rulesPluralsTypes[set.fc]
      };
    });
  });
  return rules;
};
var PluralResolver = class {
  constructor(languageUtils) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = languageUtils;
    this.options = options;
    this.logger = baseLogger.create("pluralResolver");
    if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === "undefined" || !Intl.PluralRules)) {
      this.options.compatibilityJSON = "v3";
      this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
    }
    this.rules = createRules();
    this.pluralRulesCache = {};
  }
  addRule(lng, obj) {
    this.rules[lng] = obj;
  }
  clearCache() {
    this.pluralRulesCache = {};
  }
  getRule(code) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (this.shouldUseIntlApi()) {
      try {
        const cleanedCode = getCleanedCode(code === "dev" ? "en" : code);
        const type = options.ordinal ? "ordinal" : "cardinal";
        const cacheKey = JSON.stringify({
          cleanedCode,
          type
        });
        if (cacheKey in this.pluralRulesCache) {
          return this.pluralRulesCache[cacheKey];
        }
        const rule = new Intl.PluralRules(cleanedCode, {
          type
        });
        this.pluralRulesCache[cacheKey] = rule;
        return rule;
      } catch (err) {
        return;
      }
    }
    return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
  }
  needsPlural(code) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const rule = this.getRule(code, options);
    if (this.shouldUseIntlApi()) {
      return rule && rule.resolvedOptions().pluralCategories.length > 1;
    }
    return rule && rule.numbers.length > 1;
  }
  getPluralFormsOfKey(code, key) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(code, options).map((suffix) => `${key}${suffix}`);
  }
  getSuffixes(code) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const rule = this.getRule(code, options);
    if (!rule) {
      return [];
    }
    if (this.shouldUseIntlApi()) {
      return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ""}${pluralCategory}`);
    }
    return rule.numbers.map((number) => this.getSuffix(code, number, options));
  }
  getSuffix(code, count) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const rule = this.getRule(code, options);
    if (rule) {
      if (this.shouldUseIntlApi()) {
        return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ""}${rule.select(count)}`;
      }
      return this.getSuffixRetroCompatible(rule, count);
    }
    this.logger.warn(`no plural rule found for: ${code}`);
    return "";
  }
  getSuffixRetroCompatible(rule, count) {
    const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
    let suffix = rule.numbers[idx];
    if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      if (suffix === 2) {
        suffix = "plural";
      } else if (suffix === 1) {
        suffix = "";
      }
    }
    const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
    if (this.options.compatibilityJSON === "v1") {
      if (suffix === 1)
        return "";
      if (typeof suffix === "number")
        return `_plural_${suffix.toString()}`;
      return returnSuffix();
    } else if (this.options.compatibilityJSON === "v2") {
      return returnSuffix();
    } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
      return returnSuffix();
    }
    return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
  }
  shouldUseIntlApi() {
    return !nonIntlVersions.includes(this.options.compatibilityJSON);
  }
};
var deepFindWithDefaults = function(data, defaultData, key) {
  let keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
  let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
  let path3 = getPathWithDefaults(data, defaultData, key);
  if (!path3 && ignoreJSONStructure && typeof key === "string") {
    path3 = deepFind(data, key, keySeparator);
    if (path3 === void 0)
      path3 = deepFind(defaultData, key, keySeparator);
  }
  return path3;
};
var regexSafe = (val) => val.replace(/\$/g, "$$$$");
var Interpolator = class {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = baseLogger.create("interpolator");
    this.options = options;
    this.format = options.interpolation && options.interpolation.format || ((value) => value);
    this.init(options);
  }
  init() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (!options.interpolation)
      options.interpolation = {
        escapeValue: true
      };
    const {
      escape: escape$1,
      escapeValue,
      useRawValueToEscape,
      prefix,
      prefixEscaped,
      suffix,
      suffixEscaped,
      formatSeparator,
      unescapeSuffix,
      unescapePrefix,
      nestingPrefix,
      nestingPrefixEscaped,
      nestingSuffix,
      nestingSuffixEscaped,
      nestingOptionsSeparator,
      maxReplaces,
      alwaysFormat
    } = options.interpolation;
    this.escape = escape$1 !== void 0 ? escape$1 : escape;
    this.escapeValue = escapeValue !== void 0 ? escapeValue : true;
    this.useRawValueToEscape = useRawValueToEscape !== void 0 ? useRawValueToEscape : false;
    this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || "{{";
    this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || "}}";
    this.formatSeparator = formatSeparator || ",";
    this.unescapePrefix = unescapeSuffix ? "" : unescapePrefix || "-";
    this.unescapeSuffix = this.unescapePrefix ? "" : unescapeSuffix || "";
    this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape("$t(");
    this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(")");
    this.nestingOptionsSeparator = nestingOptionsSeparator || ",";
    this.maxReplaces = maxReplaces || 1e3;
    this.alwaysFormat = alwaysFormat !== void 0 ? alwaysFormat : false;
    this.resetRegExp();
  }
  reset() {
    if (this.options)
      this.init(this.options);
  }
  resetRegExp() {
    const getOrResetRegExp = (existingRegExp, pattern) => {
      if (existingRegExp && existingRegExp.source === pattern) {
        existingRegExp.lastIndex = 0;
        return existingRegExp;
      }
      return new RegExp(pattern, "g");
    };
    this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
    this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
    this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
  }
  interpolate(str, data, lng, options) {
    let match;
    let value;
    let replaces;
    const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    const handleFormat = (key) => {
      if (key.indexOf(this.formatSeparator) < 0) {
        const path3 = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(path3, void 0, lng, {
          ...options,
          ...data,
          interpolationkey: key
        }) : path3;
      }
      const p = key.split(this.formatSeparator);
      const k = p.shift().trim();
      const f = p.join(this.formatSeparator).trim();
      return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
        ...options,
        ...data,
        interpolationkey: k
      });
    };
    this.resetRegExp();
    const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
    const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    const todos = [{
      regex: this.regexpUnescape,
      safeValue: (val) => regexSafe(val)
    }, {
      regex: this.regexp,
      safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
    }];
    todos.forEach((todo) => {
      replaces = 0;
      while (match = todo.regex.exec(str)) {
        const matchedVar = match[1].trim();
        value = handleFormat(matchedVar);
        if (value === void 0) {
          if (typeof missingInterpolationHandler === "function") {
            const temp = missingInterpolationHandler(str, match, options);
            value = typeof temp === "string" ? temp : "";
          } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
            value = "";
          } else if (skipOnVariables) {
            value = match[0];
            continue;
          } else {
            this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
            value = "";
          }
        } else if (typeof value !== "string" && !this.useRawValueToEscape) {
          value = makeString(value);
        }
        const safeValue = todo.safeValue(value);
        str = str.replace(match[0], safeValue);
        if (skipOnVariables) {
          todo.regex.lastIndex += value.length;
          todo.regex.lastIndex -= match[0].length;
        } else {
          todo.regex.lastIndex = 0;
        }
        replaces++;
        if (replaces >= this.maxReplaces) {
          break;
        }
      }
    });
    return str;
  }
  nest(str, fc) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let match;
    let value;
    let clonedOptions;
    const handleHasOptions = (key, inheritedOptions) => {
      const sep = this.nestingOptionsSeparator;
      if (key.indexOf(sep) < 0)
        return key;
      const c = key.split(new RegExp(`${sep}[ ]*{`));
      let optionsString = `{${c[1]}`;
      key = c[0];
      optionsString = this.interpolate(optionsString, clonedOptions);
      const matchedSingleQuotes = optionsString.match(/'/g);
      const matchedDoubleQuotes = optionsString.match(/"/g);
      if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
        optionsString = optionsString.replace(/'/g, '"');
      }
      try {
        clonedOptions = JSON.parse(optionsString);
        if (inheritedOptions)
          clonedOptions = {
            ...inheritedOptions,
            ...clonedOptions
          };
      } catch (e) {
        this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
        return `${key}${sep}${optionsString}`;
      }
      if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1)
        delete clonedOptions.defaultValue;
      return key;
    };
    while (match = this.nestingRegexp.exec(str)) {
      let formatters = [];
      clonedOptions = {
        ...options
      };
      clonedOptions = clonedOptions.replace && typeof clonedOptions.replace !== "string" ? clonedOptions.replace : clonedOptions;
      clonedOptions.applyPostProcessor = false;
      delete clonedOptions.defaultValue;
      let doReduce = false;
      if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
        const r = match[1].split(this.formatSeparator).map((elem) => elem.trim());
        match[1] = r.shift();
        formatters = r;
        doReduce = true;
      }
      value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
      if (value && match[0] === str && typeof value !== "string")
        return value;
      if (typeof value !== "string")
        value = makeString(value);
      if (!value) {
        this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
        value = "";
      }
      if (doReduce) {
        value = formatters.reduce((v, f) => this.format(v, f, options.lng, {
          ...options,
          interpolationkey: match[1].trim()
        }), value.trim());
      }
      str = str.replace(match[0], value);
      this.regexp.lastIndex = 0;
    }
    return str;
  }
};
var parseFormatStr = (formatStr) => {
  let formatName = formatStr.toLowerCase().trim();
  const formatOptions = {};
  if (formatStr.indexOf("(") > -1) {
    const p = formatStr.split("(");
    formatName = p[0].toLowerCase().trim();
    const optStr = p[1].substring(0, p[1].length - 1);
    if (formatName === "currency" && optStr.indexOf(":") < 0) {
      if (!formatOptions.currency)
        formatOptions.currency = optStr.trim();
    } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
      if (!formatOptions.range)
        formatOptions.range = optStr.trim();
    } else {
      const opts = optStr.split(";");
      opts.forEach((opt) => {
        if (opt) {
          const [key, ...rest] = opt.split(":");
          const val = rest.join(":").trim().replace(/^'+|'+$/g, "");
          const trimmedKey = key.trim();
          if (!formatOptions[trimmedKey])
            formatOptions[trimmedKey] = val;
          if (val === "false")
            formatOptions[trimmedKey] = false;
          if (val === "true")
            formatOptions[trimmedKey] = true;
          if (!isNaN(val))
            formatOptions[trimmedKey] = parseInt(val, 10);
        }
      });
    }
  }
  return {
    formatName,
    formatOptions
  };
};
var createCachedFormatter = (fn2) => {
  const cache = {};
  return (val, lng, options) => {
    let optForCache = options;
    if (options && options.interpolationkey && options.formatParams && options.formatParams[options.interpolationkey] && options[options.interpolationkey]) {
      optForCache = {
        ...optForCache,
        [options.interpolationkey]: void 0
      };
    }
    const key = lng + JSON.stringify(optForCache);
    let formatter = cache[key];
    if (!formatter) {
      formatter = fn2(getCleanedCode(lng), options);
      cache[key] = formatter;
    }
    return formatter(val);
  };
};
var Formatter = class {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = baseLogger.create("formatter");
    this.options = options;
    this.formats = {
      number: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      currency: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.NumberFormat(lng, {
          ...opt,
          style: "currency"
        });
        return (val) => formatter.format(val);
      }),
      datetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.DateTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      }),
      relativetime: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.RelativeTimeFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val, opt.range || "day");
      }),
      list: createCachedFormatter((lng, opt) => {
        const formatter = new Intl.ListFormat(lng, {
          ...opt
        });
        return (val) => formatter.format(val);
      })
    };
    this.init(options);
  }
  init(services) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    const iOpts = options.interpolation;
    this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
  }
  add(name, fc) {
    this.formats[name.toLowerCase().trim()] = fc;
  }
  addCached(name, fc) {
    this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
  }
  format(value, format, lng) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const formats = format.split(this.formatSeparator);
    if (formats.length > 1 && formats[0].indexOf("(") > 1 && formats[0].indexOf(")") < 0 && formats.find((f) => f.indexOf(")") > -1)) {
      const lastIndex = formats.findIndex((f) => f.indexOf(")") > -1);
      formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
    }
    const result = formats.reduce((mem, f) => {
      const {
        formatName,
        formatOptions
      } = parseFormatStr(f);
      if (this.formats[formatName]) {
        let formatted = mem;
        try {
          const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
          const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
          formatted = this.formats[formatName](mem, l, {
            ...formatOptions,
            ...options,
            ...valOptions
          });
        } catch (error) {
          this.logger.warn(error);
        }
        return formatted;
      } else {
        this.logger.warn(`there was no format function for ${formatName}`);
      }
      return mem;
    }, value);
    return result;
  }
};
var removePending = (q, name) => {
  if (q.pending[name] !== void 0) {
    delete q.pending[name];
    q.pendingCount--;
  }
};
var Connector = class extends EventEmitter {
  constructor(backend, store, services) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super();
    this.backend = backend;
    this.store = store;
    this.services = services;
    this.languageUtils = services.languageUtils;
    this.options = options;
    this.logger = baseLogger.create("backendConnector");
    this.waitingReads = [];
    this.maxParallelReads = options.maxParallelReads || 10;
    this.readingCalls = 0;
    this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
    this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
    this.state = {};
    this.queue = [];
    if (this.backend && this.backend.init) {
      this.backend.init(services, options.backend, options);
    }
  }
  queueLoad(languages, namespaces, options, callback) {
    const toLoad = {};
    const pending = {};
    const toLoadLanguages = {};
    const toLoadNamespaces = {};
    languages.forEach((lng) => {
      let hasAllNamespaces = true;
      namespaces.forEach((ns) => {
        const name = `${lng}|${ns}`;
        if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
          this.state[name] = 2;
        } else if (this.state[name] < 0)
          ;
        else if (this.state[name] === 1) {
          if (pending[name] === void 0)
            pending[name] = true;
        } else {
          this.state[name] = 1;
          hasAllNamespaces = false;
          if (pending[name] === void 0)
            pending[name] = true;
          if (toLoad[name] === void 0)
            toLoad[name] = true;
          if (toLoadNamespaces[ns] === void 0)
            toLoadNamespaces[ns] = true;
        }
      });
      if (!hasAllNamespaces)
        toLoadLanguages[lng] = true;
    });
    if (Object.keys(toLoad).length || Object.keys(pending).length) {
      this.queue.push({
        pending,
        pendingCount: Object.keys(pending).length,
        loaded: {},
        errors: [],
        callback
      });
    }
    return {
      toLoad: Object.keys(toLoad),
      pending: Object.keys(pending),
      toLoadLanguages: Object.keys(toLoadLanguages),
      toLoadNamespaces: Object.keys(toLoadNamespaces)
    };
  }
  loaded(name, err, data) {
    const s = name.split("|");
    const lng = s[0];
    const ns = s[1];
    if (err)
      this.emit("failedLoading", lng, ns, err);
    if (!err && data) {
      this.store.addResourceBundle(lng, ns, data, void 0, void 0, {
        skipCopy: true
      });
    }
    this.state[name] = err ? -1 : 2;
    if (err && data)
      this.state[name] = 0;
    const loaded = {};
    this.queue.forEach((q) => {
      pushPath(q.loaded, [lng], ns);
      removePending(q, name);
      if (err)
        q.errors.push(err);
      if (q.pendingCount === 0 && !q.done) {
        Object.keys(q.loaded).forEach((l) => {
          if (!loaded[l])
            loaded[l] = {};
          const loadedKeys = q.loaded[l];
          if (loadedKeys.length) {
            loadedKeys.forEach((n) => {
              if (loaded[l][n] === void 0)
                loaded[l][n] = true;
            });
          }
        });
        q.done = true;
        if (q.errors.length) {
          q.callback(q.errors);
        } else {
          q.callback();
        }
      }
    });
    this.emit("loaded", loaded);
    this.queue = this.queue.filter((q) => !q.done);
  }
  read(lng, ns, fcName) {
    let tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
    let wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
    let callback = arguments.length > 5 ? arguments[5] : void 0;
    if (!lng.length)
      return callback(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng,
        ns,
        fcName,
        tried,
        wait,
        callback
      });
      return;
    }
    this.readingCalls++;
    const resolver = (err, data) => {
      this.readingCalls--;
      if (this.waitingReads.length > 0) {
        const next = this.waitingReads.shift();
        this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
      }
      if (err && data && tried < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
        }, wait);
        return;
      }
      callback(err, data);
    };
    const fc = this.backend[fcName].bind(this.backend);
    if (fc.length === 2) {
      try {
        const r = fc(lng, ns);
        if (r && typeof r.then === "function") {
          r.then((data) => resolver(null, data)).catch(resolver);
        } else {
          resolver(null, r);
        }
      } catch (err) {
        resolver(err);
      }
      return;
    }
    return fc(lng, ns, resolver);
  }
  prepareLoading(languages, namespaces) {
    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    let callback = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend) {
      this.logger.warn("No backend was added via i18next.use. Will not load resources.");
      return callback && callback();
    }
    if (typeof languages === "string")
      languages = this.languageUtils.toResolveHierarchy(languages);
    if (typeof namespaces === "string")
      namespaces = [namespaces];
    const toLoad = this.queueLoad(languages, namespaces, options, callback);
    if (!toLoad.toLoad.length) {
      if (!toLoad.pending.length)
        callback();
      return null;
    }
    toLoad.toLoad.forEach((name) => {
      this.loadOne(name);
    });
  }
  load(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {}, callback);
  }
  reload(languages, namespaces, callback) {
    this.prepareLoading(languages, namespaces, {
      reload: true
    }, callback);
  }
  loadOne(name) {
    let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const s = name.split("|");
    const lng = s[0];
    const ns = s[1];
    this.read(lng, ns, "read", void 0, void 0, (err, data) => {
      if (err)
        this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
      if (!err && data)
        this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
      this.loaded(name, err, data);
    });
  }
  saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
    let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
    let clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
      this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (key === void 0 || key === null || key === "")
      return;
    if (this.backend && this.backend.create) {
      const opts = {
        ...options,
        isUpdate
      };
      const fc = this.backend.create.bind(this.backend);
      if (fc.length < 6) {
        try {
          let r;
          if (fc.length === 5) {
            r = fc(languages, namespace, key, fallbackValue, opts);
          } else {
            r = fc(languages, namespace, key, fallbackValue);
          }
          if (r && typeof r.then === "function") {
            r.then((data) => clb(null, data)).catch(clb);
          } else {
            clb(null, r);
          }
        } catch (err) {
          clb(err);
        }
      } else {
        fc(languages, namespace, key, fallbackValue, clb, opts);
      }
    }
    if (!languages || !languages[0])
      return;
    this.store.addResource(languages[0], namespace, key, fallbackValue);
  }
};
var get = () => ({
  debug: false,
  initImmediate: true,
  ns: ["translation"],
  defaultNS: ["translation"],
  fallbackLng: ["dev"],
  fallbackNS: false,
  supportedLngs: false,
  nonExplicitSupportedLngs: false,
  load: "all",
  preload: false,
  simplifyPluralSuffix: true,
  keySeparator: ".",
  nsSeparator: ":",
  pluralSeparator: "_",
  contextSeparator: "_",
  partialBundledLanguages: false,
  saveMissing: false,
  updateMissing: false,
  saveMissingTo: "fallback",
  saveMissingPlurals: true,
  missingKeyHandler: false,
  missingInterpolationHandler: false,
  postProcess: false,
  postProcessPassResolved: false,
  returnNull: false,
  returnEmptyString: true,
  returnObjects: false,
  joinArrays: false,
  returnedObjectHandler: false,
  parseMissingKeyHandler: false,
  appendNamespaceToMissingKey: false,
  appendNamespaceToCIMode: false,
  overloadTranslationOptionHandler: (args) => {
    let ret = {};
    if (typeof args[1] === "object")
      ret = args[1];
    if (typeof args[1] === "string")
      ret.defaultValue = args[1];
    if (typeof args[2] === "string")
      ret.tDescription = args[2];
    if (typeof args[2] === "object" || typeof args[3] === "object") {
      const options = args[3] || args[2];
      Object.keys(options).forEach((key) => {
        ret[key] = options[key];
      });
    }
    return ret;
  },
  interpolation: {
    escapeValue: true,
    format: (value) => value,
    prefix: "{{",
    suffix: "}}",
    formatSeparator: ",",
    unescapePrefix: "-",
    nestingPrefix: "$t(",
    nestingSuffix: ")",
    nestingOptionsSeparator: ",",
    maxReplaces: 1e3,
    skipOnVariables: true
  }
});
var transformOptions = (options) => {
  if (typeof options.ns === "string")
    options.ns = [options.ns];
  if (typeof options.fallbackLng === "string")
    options.fallbackLng = [options.fallbackLng];
  if (typeof options.fallbackNS === "string")
    options.fallbackNS = [options.fallbackNS];
  if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
    options.supportedLngs = options.supportedLngs.concat(["cimode"]);
  }
  return options;
};
var noop = () => {
};
var bindMemberFunctions = (inst) => {
  const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
  mems.forEach((mem) => {
    if (typeof inst[mem] === "function") {
      inst[mem] = inst[mem].bind(inst);
    }
  });
};
var I18n = class extends EventEmitter {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    super();
    this.options = transformOptions(options);
    this.services = {};
    this.logger = baseLogger;
    this.modules = {
      external: []
    };
    bindMemberFunctions(this);
    if (callback && !this.isInitialized && !options.isClone) {
      if (!this.options.initImmediate) {
        this.init(options, callback);
        return this;
      }
      setTimeout(() => {
        this.init(options, callback);
      }, 0);
    }
  }
  init() {
    var _this = this;
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    this.isInitializing = true;
    if (typeof options === "function") {
      callback = options;
      options = {};
    }
    if (!options.defaultNS && options.defaultNS !== false && options.ns) {
      if (typeof options.ns === "string") {
        options.defaultNS = options.ns;
      } else if (options.ns.indexOf("translation") < 0) {
        options.defaultNS = options.ns[0];
      }
    }
    const defOpts = get();
    this.options = {
      ...defOpts,
      ...this.options,
      ...transformOptions(options)
    };
    if (this.options.compatibilityAPI !== "v1") {
      this.options.interpolation = {
        ...defOpts.interpolation,
        ...this.options.interpolation
      };
    }
    if (options.keySeparator !== void 0) {
      this.options.userDefinedKeySeparator = options.keySeparator;
    }
    if (options.nsSeparator !== void 0) {
      this.options.userDefinedNsSeparator = options.nsSeparator;
    }
    const createClassOnDemand = (ClassOrObject) => {
      if (!ClassOrObject)
        return null;
      if (typeof ClassOrObject === "function")
        return new ClassOrObject();
      return ClassOrObject;
    };
    if (!this.options.isClone) {
      if (this.modules.logger) {
        baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
      } else {
        baseLogger.init(null, this.options);
      }
      let formatter;
      if (this.modules.formatter) {
        formatter = this.modules.formatter;
      } else if (typeof Intl !== "undefined") {
        formatter = Formatter;
      }
      const lu = new LanguageUtil(this.options);
      this.store = new ResourceStore(this.options.resources, this.options);
      const s = this.services;
      s.logger = baseLogger;
      s.resourceStore = this.store;
      s.languageUtils = lu;
      s.pluralResolver = new PluralResolver(lu, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      });
      if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
        s.formatter = createClassOnDemand(formatter);
        s.formatter.init(s, this.options);
        this.options.interpolation.format = s.formatter.format.bind(s.formatter);
      }
      s.interpolator = new Interpolator(this.options);
      s.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      };
      s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
      s.backendConnector.on("*", function(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _this.emit(event, ...args);
      });
      if (this.modules.languageDetector) {
        s.languageDetector = createClassOnDemand(this.modules.languageDetector);
        if (s.languageDetector.init)
          s.languageDetector.init(s, this.options.detection, this.options);
      }
      if (this.modules.i18nFormat) {
        s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
        if (s.i18nFormat.init)
          s.i18nFormat.init(this);
      }
      this.translator = new Translator(this.services, this.options);
      this.translator.on("*", function(event) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        _this.emit(event, ...args);
      });
      this.modules.external.forEach((m) => {
        if (m.init)
          m.init(this);
      });
    }
    this.format = this.options.interpolation.format;
    if (!callback)
      callback = noop;
    if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      if (codes.length > 0 && codes[0] !== "dev")
        this.options.lng = codes[0];
    }
    if (!this.services.languageDetector && !this.options.lng) {
      this.logger.warn("init: no languageDetector is used and no lng is defined");
    }
    const storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
    storeApi.forEach((fcName) => {
      this[fcName] = function() {
        return _this.store[fcName](...arguments);
      };
    });
    const storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
    storeApiChained.forEach((fcName) => {
      this[fcName] = function() {
        _this.store[fcName](...arguments);
        return _this;
      };
    });
    const deferred = defer();
    const load = () => {
      const finish = (err, t2) => {
        this.isInitializing = false;
        if (this.isInitialized && !this.initializedStoreOnce)
          this.logger.warn("init: i18next is already initialized. You should call init just once!");
        this.isInitialized = true;
        if (!this.options.isClone)
          this.logger.log("initialized", this.options);
        this.emit("initialized", this.options);
        deferred.resolve(t2);
        callback(err, t2);
      };
      if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized)
        return finish(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, finish);
    };
    if (this.options.resources || !this.options.initImmediate) {
      load();
    } else {
      setTimeout(load, 0);
    }
    return deferred;
  }
  loadResources(language) {
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
    let usedCallback = callback;
    const usedLng = typeof language === "string" ? language : this.language;
    if (typeof language === "function")
      usedCallback = language;
    if (!this.options.resources || this.options.partialBundledLanguages) {
      if (usedLng && usedLng.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0))
        return usedCallback();
      const toLoad = [];
      const append = (lng) => {
        if (!lng)
          return;
        if (lng === "cimode")
          return;
        const lngs = this.services.languageUtils.toResolveHierarchy(lng);
        lngs.forEach((l) => {
          if (l === "cimode")
            return;
          if (toLoad.indexOf(l) < 0)
            toLoad.push(l);
        });
      };
      if (!usedLng) {
        const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
        fallbacks.forEach((l) => append(l));
      } else {
        append(usedLng);
      }
      if (this.options.preload) {
        this.options.preload.forEach((l) => append(l));
      }
      this.services.backendConnector.load(toLoad, this.options.ns, (e) => {
        if (!e && !this.resolvedLanguage && this.language)
          this.setResolvedLanguage(this.language);
        usedCallback(e);
      });
    } else {
      usedCallback(null);
    }
  }
  reloadResources(lngs, ns, callback) {
    const deferred = defer();
    if (typeof lngs === "function") {
      callback = lngs;
      lngs = void 0;
    }
    if (typeof ns === "function") {
      callback = ns;
      ns = void 0;
    }
    if (!lngs)
      lngs = this.languages;
    if (!ns)
      ns = this.options.ns;
    if (!callback)
      callback = noop;
    this.services.backendConnector.reload(lngs, ns, (err) => {
      deferred.resolve();
      callback(err);
    });
    return deferred;
  }
  use(module2) {
    if (!module2)
      throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!module2.type)
      throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    if (module2.type === "backend") {
      this.modules.backend = module2;
    }
    if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
      this.modules.logger = module2;
    }
    if (module2.type === "languageDetector") {
      this.modules.languageDetector = module2;
    }
    if (module2.type === "i18nFormat") {
      this.modules.i18nFormat = module2;
    }
    if (module2.type === "postProcessor") {
      postProcessor.addPostProcessor(module2);
    }
    if (module2.type === "formatter") {
      this.modules.formatter = module2;
    }
    if (module2.type === "3rdParty") {
      this.modules.external.push(module2);
    }
    return this;
  }
  setResolvedLanguage(l) {
    if (!l || !this.languages)
      return;
    if (["cimode", "dev"].indexOf(l) > -1)
      return;
    for (let li = 0; li < this.languages.length; li++) {
      const lngInLngs = this.languages[li];
      if (["cimode", "dev"].indexOf(lngInLngs) > -1)
        continue;
      if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
        this.resolvedLanguage = lngInLngs;
        break;
      }
    }
  }
  changeLanguage(lng, callback) {
    var _this2 = this;
    this.isLanguageChangingTo = lng;
    const deferred = defer();
    this.emit("languageChanging", lng);
    const setLngProps = (l) => {
      this.language = l;
      this.languages = this.services.languageUtils.toResolveHierarchy(l);
      this.resolvedLanguage = void 0;
      this.setResolvedLanguage(l);
    };
    const done = (err, l) => {
      if (l) {
        setLngProps(l);
        this.translator.changeLanguage(l);
        this.isLanguageChangingTo = void 0;
        this.emit("languageChanged", l);
        this.logger.log("languageChanged", l);
      } else {
        this.isLanguageChangingTo = void 0;
      }
      deferred.resolve(function() {
        return _this2.t(...arguments);
      });
      if (callback)
        callback(err, function() {
          return _this2.t(...arguments);
        });
    };
    const setLng = (lngs) => {
      if (!lng && !lngs && this.services.languageDetector)
        lngs = [];
      const l = typeof lngs === "string" ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
      if (l) {
        if (!this.language) {
          setLngProps(l);
        }
        if (!this.translator.language)
          this.translator.changeLanguage(l);
        if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage)
          this.services.languageDetector.cacheUserLanguage(l);
      }
      this.loadResources(l, (err) => {
        done(err, l);
      });
    };
    if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
      setLng(this.services.languageDetector.detect());
    } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
      if (this.services.languageDetector.detect.length === 0) {
        this.services.languageDetector.detect().then(setLng);
      } else {
        this.services.languageDetector.detect(setLng);
      }
    } else {
      setLng(lng);
    }
    return deferred;
  }
  getFixedT(lng, ns, keyPrefix) {
    var _this3 = this;
    const fixedT = function(key, opts) {
      let options;
      if (typeof opts !== "object") {
        for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          rest[_key3 - 2] = arguments[_key3];
        }
        options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
      } else {
        options = {
          ...opts
        };
      }
      options.lng = options.lng || fixedT.lng;
      options.lngs = options.lngs || fixedT.lngs;
      options.ns = options.ns || fixedT.ns;
      if (options.keyPrefix !== "")
        options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
      const keySeparator = _this3.options.keySeparator || ".";
      let resultKey;
      if (options.keyPrefix && Array.isArray(key)) {
        resultKey = key.map((k) => `${options.keyPrefix}${keySeparator}${k}`);
      } else {
        resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;
      }
      return _this3.t(resultKey, options);
    };
    if (typeof lng === "string") {
      fixedT.lng = lng;
    } else {
      fixedT.lngs = lng;
    }
    fixedT.ns = ns;
    fixedT.keyPrefix = keyPrefix;
    return fixedT;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(ns) {
    this.options.defaultNS = ns;
  }
  hasLoadedNamespace(ns) {
    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized) {
      this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
      return false;
    }
    if (!this.languages || !this.languages.length) {
      this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
      return false;
    }
    const lng = options.lng || this.resolvedLanguage || this.languages[0];
    const fallbackLng = this.options ? this.options.fallbackLng : false;
    const lastLng = this.languages[this.languages.length - 1];
    if (lng.toLowerCase() === "cimode")
      return true;
    const loadNotPending = (l, n) => {
      const loadState = this.services.backendConnector.state[`${l}|${n}`];
      return loadState === -1 || loadState === 0 || loadState === 2;
    };
    if (options.precheck) {
      const preResult = options.precheck(this, loadNotPending);
      if (preResult !== void 0)
        return preResult;
    }
    if (this.hasResourceBundle(lng, ns))
      return true;
    if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages)
      return true;
    if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns)))
      return true;
    return false;
  }
  loadNamespaces(ns, callback) {
    const deferred = defer();
    if (!this.options.ns) {
      if (callback)
        callback();
      return Promise.resolve();
    }
    if (typeof ns === "string")
      ns = [ns];
    ns.forEach((n) => {
      if (this.options.ns.indexOf(n) < 0)
        this.options.ns.push(n);
    });
    this.loadResources((err) => {
      deferred.resolve();
      if (callback)
        callback(err);
    });
    return deferred;
  }
  loadLanguages(lngs, callback) {
    const deferred = defer();
    if (typeof lngs === "string")
      lngs = [lngs];
    const preloaded = this.options.preload || [];
    const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
    if (!newLngs.length) {
      if (callback)
        callback();
      return Promise.resolve();
    }
    this.options.preload = preloaded.concat(newLngs);
    this.loadResources((err) => {
      deferred.resolve();
      if (callback)
        callback(err);
    });
    return deferred;
  }
  dir(lng) {
    if (!lng)
      lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
    if (!lng)
      return "rtl";
    const rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
    const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
    return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 ? arguments[1] : void 0;
    return new I18n(options, callback);
  }
  cloneInstance() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
    const forkResourceStore = options.forkResourceStore;
    if (forkResourceStore)
      delete options.forkResourceStore;
    const mergedOptions = {
      ...this.options,
      ...options,
      ...{
        isClone: true
      }
    };
    const clone = new I18n(mergedOptions);
    if (options.debug !== void 0 || options.prefix !== void 0) {
      clone.logger = clone.logger.clone(options);
    }
    const membersToCopy = ["store", "services", "language"];
    membersToCopy.forEach((m) => {
      clone[m] = this[m];
    });
    clone.services = {
      ...this.services
    };
    clone.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    if (forkResourceStore) {
      clone.store = new ResourceStore(this.store.data, mergedOptions);
      clone.services.resourceStore = clone.store;
    }
    clone.translator = new Translator(clone.services, mergedOptions);
    clone.translator.on("*", function(event) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      clone.emit(event, ...args);
    });
    clone.init(mergedOptions, callback);
    clone.translator.options = mergedOptions;
    clone.translator.backendConnector.services.utils = {
      hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
    };
    return clone;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
};
var instance = I18n.createInstance();
instance.createInstance = I18n.createInstance;
var createInstance = instance.createInstance;
var dir = instance.dir;
var init = instance.init;
var loadResources = instance.loadResources;
var reloadResources = instance.reloadResources;
var use = instance.use;
var changeLanguage = instance.changeLanguage;
var getFixedT = instance.getFixedT;
var t = instance.t;
var exists = instance.exists;
var setDefaultNamespace = instance.setDefaultNamespace;
var hasLoadedNamespace = instance.hasLoadedNamespace;
var loadNamespaces = instance.loadNamespaces;
var loadLanguages = instance.loadLanguages;

// src/common/types.ts
var globalSettingsKeys = [
  "presetFolderPath",
  "GlobalPreset",
  "lastActivePreset",
  "autoApplyPresets",
  "autoApplyFolderPresets",
  "folderPresets",
  "activeFolderPresets",
  "useSelectedFolder",
  "selectedFolder"
];
var DEFAULT_SETTINGS = {
  useSelectedFolder: false,
  selectedFolder: null,
  sortCriterion: "fileName",
  sortOrder: "asc",
  renderContentAsHtml: false,
  dragDropContent: false,
  centerActiveCardOnOpen: true,
  defaultLayout: "auto",
  cardWidthThreshold: 250,
  alignCardHeight: true,
  cardsPerView: 4,
  gridColumns: 4,
  gridCardHeight: 200,
  masonryColumns: 4,
  showFileName: true,
  showFirstHeader: true,
  showBody: true,
  bodyLengthLimit: true,
  bodyLength: 501,
  fileNameFontSize: 17,
  firstHeaderFontSize: 17,
  bodyFontSize: 15,
  presetFolderPath: "CardNavigatorPresets",
  GlobalPreset: "default",
  lastActivePreset: "default",
  autoApplyPresets: false,
  autoApplyFolderPresets: false,
  folderPresets: {},
  activeFolderPresets: {}
};
var rangeSettingConfigs = {
  cardWidthThreshold: { min: 150, max: 600, step: 10 },
  gridColumns: { min: 1, max: 10, step: 1 },
  gridCardHeight: { min: 100, max: 500, step: 10 },
  masonryColumns: { min: 1, max: 10, step: 1 },
  cardsPerView: { min: 1, max: 10, step: 1 },
  fileNameFontSize: { min: 10, max: 25, step: 1 },
  firstHeaderFontSize: { min: 10, max: 25, step: 1 },
  bodyFontSize: { min: 10, max: 25, step: 1 },
  bodyLength: { min: 1, max: 1001, step: 50 }
};
var sortOptions = [
  { value: "fileName_asc", label: "SORT_FILE_NAME_ASC" },
  { value: "fileName_desc", label: "SORT_FILE_NAME_DESC" },
  { value: "lastModified_desc", label: "SORT_LAST_MODIFIED_DESC" },
  { value: "lastModified_asc", label: "SORT_LAST_MODIFIED_ASC" },
  { value: "created_desc", label: "SORT_CREATED_DESC" },
  { value: "created_asc", label: "SORT_CREATED_ASC" }
];
var contentSettings = [
  { name: "SHOW_FILE_NAME", key: "showFileName", description: "TOGGLE_FILE_NAME_DISPLAY" },
  { name: "SHOW_FIRST_HEADER", key: "showFirstHeader", description: "TOGGLE_FIRST_HEADER_DISPLAY" },
  { name: "SHOW_BODY", key: "showBody", description: "TOGGLE_BODY_DISPLAY" }
];
var fontSizeSettings = [
  { name: "FILE_NAME_FONT_SIZE", key: "fileNameFontSize", description: "SET_FILE_NAME_FONT_SIZE" },
  { name: "FIRST_HEADER_FONT_SIZE", key: "firstHeaderFontSize", description: "SET_FIRST_HEADER_FONT_SIZE" },
  { name: "BODY_FONT_SIZE", key: "bodyFontSize", description: "SET_BODY_FONT_SIZE" }
];
var keyboardShortcuts = [
  { name: "SCROLL_UP_ONE_CARD", description: "MOVE_UP_ONE_CARD" },
  { name: "SCROLL_DOWN_ONE_CARD", description: "MOVE_DOWN_ONE_CARD" },
  { name: "SCROLL_LEFT_ONE_CARD", description: "MOVE_LEFT_ONE_CARD" },
  { name: "SCROLL_RIGHT_ONE_CARD", description: "MOVE_RIGHT_ONE_CARD" },
  { name: "SCROLL_UP_LEFT_ONE_PAGE", description: "MOVE_UP_LEFT_ONE_PAGE" },
  { name: "SCROLL_DOWN_RIGHT_ONE_PAGE", description: "MOVE_DOWN_RIGHT_ONE_PAGE" },
  { name: "CENTER_ACTIVE_CARD", description: "CENTER_CURRENTLY_ACTIVE_CARD" },
  { name: "MOVE_FOCUS_TO_CARD_NAVIGATOR", description: "SET_FOCUS_TO_CARD_NAVIGATOR" },
  { name: "OPEN_CARD_CONTEXT_MENU", description: "OPEN_CONTEXT_MENU_FOR_FOCUSED_CARD" }
];
function getTranslatedSortOptions() {
  return sortOptions.map((option) => ({
    ...option,
    label: t(option.label)
  }));
}

// src/ui/toolbar/toolbarActions.ts
var currentPopups = /* @__PURE__ */ new Map();
function handleWindowClick(event, windowObj) {
  onClickOutside(event, windowObj);
}
function onClickOutside(event, windowObj) {
  const target = event.target;
  const toolbarEl = windowObj.document.querySelector(".card-navigator-toolbar-container");
  const existingPopup = currentPopups.get(windowObj);
  if (existingPopup && !existingPopup.element.contains(target) && !(toolbarEl == null ? void 0 : toolbarEl.contains(target))) {
    if (existingPopup.type === "sort" || existingPopup.type === "settings" && !event.composedPath().some((el) => {
      var _a;
      return (_a = el.classList) == null ? void 0 : _a.contains("card-navigator-settings-popup");
    })) {
      closeCurrentPopup(windowObj);
    }
  }
}
function createPopup(className, type, windowObj) {
  closeCurrentPopup(windowObj);
  const popup = windowObj.document.createElement("div");
  popup.className = className;
  const toolbarEl = windowObj.document.querySelector(".card-navigator-toolbar-container");
  if (toolbarEl) {
    toolbarEl.insertAdjacentElement("afterend", popup);
    currentPopups.set(windowObj, { element: popup, type });
    windowObj.addEventListener("click", (e) => handleWindowClick(e, windowObj));
  }
  return popup;
}
function closeCurrentPopup(windowObj) {
  const existingPopup = currentPopups.get(windowObj);
  if (existingPopup) {
    existingPopup.element.remove();
    currentPopups.delete(windowObj);
    windowObj.removeEventListener("click", (e) => handleWindowClick(e, windowObj));
  }
}
function createCollapsibleSection(parentEl, title, collapsed = true) {
  const sectionEl = parentEl.createDiv("tree-item graph-control-section");
  const selfEl = sectionEl.createDiv("tree-item-self");
  const iconEl = selfEl.createDiv("tree-item-icon collapse-icon");
  iconEl.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="svg-icon right-triangle"><path d="M3 8L12 17L21 8"></path></svg>';
  const innerEl = selfEl.createDiv("tree-item-inner");
  innerEl.createEl("header", { text: title, cls: "graph-control-section-header" });
  const contentEl = sectionEl.createDiv("tree-item-children");
  if (collapsed) {
    sectionEl.addClass("is-collapsed");
    iconEl.addClass("is-collapsed");
    contentEl.style.display = "none";
  }
  selfEl.addEventListener("click", () => {
    const isCollapsed = sectionEl.hasClass("is-collapsed");
    sectionEl.toggleClass("is-collapsed", !isCollapsed);
    iconEl.toggleClass("is-collapsed", !isCollapsed);
    contentEl.style.display = isCollapsed ? "block" : "none";
  });
  return contentEl;
}
function createFullWidthSetting(containerEl) {
  const setting = new import_obsidian3.Setting(containerEl);
  setting.settingEl.addClass("setting-full-width");
  setting.settingEl.addClass("no-info");
  return setting;
}
function addFullWidthText(setting, callback) {
  return setting.addText((text) => {
    text.inputEl.style.width = "100%";
    callback(text);
  });
}
function toggleSort(plugin, containerEl) {
  if (!containerEl) {
    console.error("Container element is undefined in toggleSort");
    return;
  }
  const currentWindow = containerEl.ownerDocument.defaultView;
  if (!currentWindow) {
    console.error("Cannot determine the window of the container element");
    return;
  }
  const sortPopup = createPopup("card-navigator-sort-popup", "sort", currentWindow);
  const currentSort = `${plugin.settings.sortCriterion}_${plugin.settings.sortOrder}`;
  const sortOptions2 = getTranslatedSortOptions();
  sortOptions2.forEach((option) => {
    const button = createSortOption(option.value, option.label, currentSort, plugin, containerEl);
    sortPopup.appendChild(button);
  });
  sortPopup.addEventListener("click", (e) => e.stopPropagation());
}
function createSortOption(value, label, currentSort, plugin, containerEl) {
  const button = containerEl.ownerDocument.createElement("button");
  button.textContent = label;
  button.className = `sort-option${currentSort === value ? " active" : ""}`;
  button.addEventListener("click", async () => {
    const [criterion, order2] = value.split("_");
    await updateSortSettings(plugin, criterion, order2, containerEl);
  });
  return button;
}
async function updateSortSettings(plugin, criterion, order2, containerEl) {
  plugin.settings.sortCriterion = criterion;
  plugin.settings.sortOrder = order2;
  await plugin.saveSettings();
  plugin.triggerRefresh();
  const currentWindow = containerEl.ownerDocument.defaultView;
  if (currentWindow) {
    closeCurrentPopup(currentWindow);
  } else {
    console.error("Cannot determine the window of the container element in updateSortSettings");
  }
}
function toggleSettings(plugin, containerEl) {
  if (!containerEl) {
    console.error("Container element is undefined in toggleSettings");
    return;
  }
  const currentWindow = containerEl.ownerDocument.defaultView;
  if (!currentWindow) {
    console.error("Cannot determine the window of the container element");
    return;
  }
  const settingsPopup = createPopup("card-navigator-settings-popup", "settings", currentWindow);
  const settingsManager = plugin.settingsManager;
  addFolderSelectionSetting(settingsPopup, plugin, settingsManager);
  addPresetSettingsToPopup(settingsPopup, plugin);
  const layoutSection = createCollapsibleSection(settingsPopup, t("LAYOUT_SETTINGS"), true);
  const updateLayoutSettings = (layout) => {
    layoutSection.empty();
    addDropdownSetting("defaultLayout", t("DEFAULT_LAYOUT"), layoutSection, plugin, settingsManager, [
      { value: "auto", label: t("AUTO") },
      { value: "list", label: t("LIST") },
      { value: "grid", label: t("GRID") },
      { value: "masonry", label: t("MASONRY") }
    ], (value) => {
      updateLayoutSettings(value);
    });
    if (layout === "auto") {
      addSliderSetting("cardWidthThreshold", t("CARD_WIDTH_THRESHOLD"), layoutSection, plugin, settingsManager);
    }
    if (layout === "grid") {
      addSliderSetting("gridColumns", t("GRID_COLUMNS"), layoutSection, plugin, settingsManager);
    }
    if (layout === "auto" || layout === "grid") {
      addSliderSetting("gridCardHeight", t("GRID_CARD_HEIGHT"), layoutSection, plugin, settingsManager);
    }
    if (layout === "masonry") {
      addSliderSetting("masonryColumns", t("MASONRY_COLUMNS"), layoutSection, plugin, settingsManager);
    }
    if (layout === "auto" || layout === "list") {
      addToggleSetting("alignCardHeight", t("ALIGN_CARD_HEIGHT"), layoutSection, plugin, settingsManager, () => {
        updateCardsPerViewSetting();
      });
      updateCardsPerViewSetting();
    }
    settingsPopup.addEventListener("click", (e) => e.stopPropagation());
  };
  const updateCardsPerViewSetting = () => {
    const cardsPerViewSetting = layoutSection.querySelector(".setting-cards-per-view");
    if (cardsPerViewSetting) {
      cardsPerViewSetting.remove();
    }
    if (plugin.settings.alignCardHeight) {
      addSliderSetting("cardsPerView", t("CARDS_PER_VIEW"), layoutSection, plugin, settingsManager).settingEl.addClass("setting-cards-per-view");
    }
  };
  updateLayoutSettings(plugin.settings.defaultLayout);
  const displaySection = createCollapsibleSection(settingsPopup, t("CARD_CONTENT_SETTINGS"), true);
  addToggleSetting("renderContentAsHtml", t("RENDER_CONTENT_AS_HTML"), displaySection, plugin, settingsManager);
  addToggleSetting("dragDropContent", t("DRAG_AND_DROP_CONTENT"), displaySection, plugin, settingsManager);
  addToggleSetting("showFileName", t("SHOW_FILE_NAME"), displaySection, plugin, settingsManager);
  addToggleSetting("showFirstHeader", t("SHOW_FIRST_HEADER"), displaySection, plugin, settingsManager);
  addToggleSetting("showBody", t("SHOW_BODY"), displaySection, plugin, settingsManager);
  const updateBodyLengthSetting = () => {
    const bodyLengthSetting = displaySection.querySelector(".setting-body-length");
    if (bodyLengthSetting) {
      bodyLengthSetting.remove();
    }
    if (plugin.settings.bodyLengthLimit) {
      addSliderSetting("bodyLength", t("BODY_LENGTH"), displaySection, plugin, settingsManager).settingEl.addClass("setting-body-length");
    }
  };
  addToggleSetting("bodyLengthLimit", t("BODY_LENGTH_LIMIT"), displaySection, plugin, settingsManager, () => {
    updateBodyLengthSetting();
  });
  updateBodyLengthSetting();
  const stylingSection = createCollapsibleSection(settingsPopup, t("CARD_STYLING_SETTINGS"), true);
  addSliderSetting("fileNameFontSize", t("FILE_NAME_FONT_SIZE"), stylingSection, plugin, settingsManager);
  addSliderSetting("firstHeaderFontSize", t("FIRST_HEADER_FONT_SIZE"), stylingSection, plugin, settingsManager);
  addSliderSetting("bodyFontSize", t("BODY_FONT_SIZE"), stylingSection, plugin, settingsManager);
  settingsPopup.addEventListener("click", (e) => e.stopPropagation());
}
async function addPresetSettingsToPopup(settingsPopup, plugin) {
  const presetSection = createCollapsibleSection(settingsPopup, t("PRESET_SETTINGS"), true);
  presetSection.classList.add("preset-settings-section");
  new import_obsidian3.Setting(presetSection).setName(t("AUTO_APPLY_PRESETS")).addToggle(
    (toggle) => toggle.setValue(plugin.settings.autoApplyPresets).onChange(async (value) => {
      plugin.settings.autoApplyPresets = value;
      await plugin.saveSettings();
      const currentFile = plugin.app.workspace.getActiveFile();
      if (currentFile) {
        await plugin.selectAndApplyPresetForCurrentFile();
      }
    })
  );
  const presetNames = await plugin.presetManager.getPresetNames();
  new import_obsidian3.Setting(presetSection).setName(t("GLOBAL_PRESET")).addDropdown(async (dropdown) => {
    presetNames.forEach((name) => {
      dropdown.addOption(name, name);
    });
    dropdown.setValue(plugin.settings.GlobalPreset).onChange(async (value) => {
      await plugin.presetManager.applyGlobalPreset(value);
      plugin.triggerRefresh();
    });
  });
}
function addFolderSelectionSetting(parentEl, plugin, settingsManager) {
  new import_obsidian3.Setting(parentEl).setName(t("SOURCE_FOLDER")).setClass("setting-item-toggle").addToggle(
    (toggle) => toggle.setValue(plugin.settings.useSelectedFolder).onChange(async (value) => {
      await settingsManager.updateBooleanSetting("useSelectedFolder", value);
      toggleSettings(plugin, parentEl);
    })
  );
  if (plugin.settings.useSelectedFolder) {
    const setting = createFullWidthSetting(parentEl);
    addFullWidthText(setting, (text) => {
      new FolderSuggest(plugin.app, text.inputEl);
      text.setPlaceholder(t("SELECT_FOLDER")).setValue(plugin.settings.selectedFolder || "").onChange(async (newFolder) => {
        if (newFolder) {
          await settingsManager.updateSetting("selectedFolder", newFolder);
        }
      });
    });
  }
}
function addDropdownSetting(key, name, container, plugin, settingsManager, options, onChange) {
  new import_obsidian3.Setting(container).setName(name).setClass("setting-item-dropdown").addDropdown((dropdown) => {
    options.forEach((option) => {
      dropdown.addOption(option.value, option.label);
    });
    dropdown.setValue(plugin.settings[key]).onChange(async (value) => {
      await settingsManager.updateSetting(key, value);
      plugin.triggerRefresh();
      if (onChange) {
        onChange(value);
      }
    });
  });
}
function addToggleSetting(key, name, container, plugin, settingsManager, onChange) {
  new import_obsidian3.Setting(container).setName(name).addToggle(
    (toggle) => toggle.setValue(plugin.settings[key]).onChange(async (value) => {
      await settingsManager.updateBooleanSetting(key, value);
      plugin.triggerRefresh();
      if (onChange) {
        onChange();
      }
    })
  );
}
function addSliderSetting(key, name, container, plugin, settingsManager) {
  const config = settingsManager.getNumberSettingConfig(key);
  const setting = new import_obsidian3.Setting(container).setName(name).setClass("setting-item-slider");
  setting.addSlider(
    (slider) => slider.setLimits(config.min, config.max, config.step).setValue(plugin.settings[key]).setDynamicTooltip().onChange(async (value) => {
      if (key === "bodyLength" && !plugin.settings.bodyLengthLimit || key === "cardsPerView" && !plugin.settings.alignCardHeight) {
        return;
      }
      await settingsManager.updateSetting(key, value);
      if (key === "gridColumns" || key === "masonryColumns") {
        plugin.updateCardNavigatorLayout(plugin.settings.defaultLayout);
      }
      plugin.triggerRefresh();
    })
  );
  if (key === "bodyLength") {
    setting.setDisabled(!plugin.settings.bodyLengthLimit);
  }
  return setting;
}

// src/ui/toolbar/toolbar.ts
var Toolbar = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.containerEl = null;
    this.sortPopupOpen = false;
    this.settingsPopupOpen = false;
    this.sortIcon = null;
    this.settingsIcon = null;
    this.popupObserver = null;
  }
  // Initializes the toolbar with the given container element
  initialize(containerEl) {
    this.containerEl = containerEl;
    this.createToolbar();
    this.setupPopupObserver();
  }
  // Creates the toolbar UI elements
  createToolbar() {
    if (!this.containerEl)
      return;
    this.containerEl.empty();
    const toolbarContainer = this.containerEl.createDiv("card-navigator-toolbar-container");
    toolbarContainer.appendChild(this.createSearchContainer());
    toolbarContainer.appendChild(this.createSeparator());
    toolbarContainer.appendChild(this.createActionIconsContainer());
  }
  // Creates the search input container
  createSearchContainer() {
    const container = createDiv("card-navigator-search-container");
    const input = container.createEl("input", {
      type: "text",
      placeholder: t("SEARCH_PLACEHOLDER"),
      cls: "card-navigator-search-input"
    });
    input.addEventListener("input", (0, import_obsidian4.debounce)(async (e) => {
      const searchTerm = e.target.value;
      const view = this.plugin.app.workspace.getActiveViewOfType(CardNavigator);
      if (view) {
        await view.cardContainer.searchCards(searchTerm);
      }
    }, 300));
    return container;
  }
  // Creates a separator element for the toolbar
  createSeparator() {
    return createDiv("toolbar-separator");
  }
  // Creates the container for action icons (folder select, sort, settings)
  createActionIconsContainer() {
    const container = createDiv("card-navigator-action-icons-container");
    const icons = [
      { name: "folder", label: t("SELECT_FOLDER"), action: () => this.openFolderSelector() },
      { name: "arrow-up-narrow-wide", label: t("SORT_CARDS"), action: () => this.toggleSortPopup() },
      { name: "settings", label: t("SETTINGS"), action: () => this.toggleSettingsPopup() }
    ];
    icons.forEach((icon) => {
      const iconElement = this.createToolbarIcon(icon.name, icon.label, icon.action);
      if (icon.name === "arrow-up-narrow-wide") {
        this.sortIcon = iconElement;
      } else if (icon.name === "settings") {
        this.settingsIcon = iconElement;
      }
      container.appendChild(iconElement);
    });
    return container;
  }
  // Helper function to create individual toolbar icons
  createToolbarIcon(iconName, ariaLabel, action) {
    const icon = createDiv("clickable-icon");
    icon.ariaLabel = ariaLabel;
    (0, import_obsidian4.setIcon)(icon, iconName);
    icon.addEventListener("click", () => action());
    return icon;
  }
  // Opens a folder selector modal and displays cards for the selected folder
  openFolderSelector() {
    this.closeAllPopups();
    new FolderSuggestModal(this.plugin, (folder) => {
      const view = this.plugin.app.workspace.getActiveViewOfType(CardNavigator);
      if (view) {
        view.cardContainer.displayCardsForFolder(folder);
      }
    }).open();
  }
  // Toggles the sort popup
  toggleSortPopup() {
    if (this.sortPopupOpen) {
      this.closeSortPopup();
    } else {
      this.closeAllPopups();
      this.openSortPopup();
    }
    this.updateIconStates();
  }
  // Opens the sort popup
  openSortPopup() {
    this.sortPopupOpen = true;
    toggleSort(this.plugin, this.containerEl);
  }
  // Closes the sort popup
  closeSortPopup() {
    var _a;
    this.sortPopupOpen = false;
    const sortPopup = (_a = this.containerEl) == null ? void 0 : _a.querySelector(".card-navigator-sort-popup");
    if (sortPopup) {
      sortPopup.remove();
    }
  }
  // Toggles the settings popup
  toggleSettingsPopup() {
    if (this.settingsPopupOpen) {
      this.closeSettingsPopup();
    } else {
      this.closeAllPopups();
      this.openSettingsPopup();
    }
    this.updateIconStates();
  }
  // Opens the settings popup
  openSettingsPopup() {
    this.settingsPopupOpen = true;
    toggleSettings(this.plugin, this.containerEl);
  }
  // Closes the settings popup
  closeSettingsPopup() {
    var _a;
    this.settingsPopupOpen = false;
    const settingsPopup = (_a = this.containerEl) == null ? void 0 : _a.querySelector(".card-navigator-settings-popup");
    if (settingsPopup) {
      settingsPopup.remove();
    }
  }
  // Closes all open popups
  closeAllPopups() {
    this.closeSortPopup();
    this.closeSettingsPopup();
    this.updateIconStates();
  }
  // Updates the visual state of the icons based on popup open states
  updateIconStates() {
    if (this.sortIcon) {
      this.sortIcon.classList.toggle("card-navigator-icon-active", this.sortPopupOpen);
    }
    if (this.settingsIcon) {
      this.settingsIcon.classList.toggle("card-navigator-icon-active", this.settingsPopupOpen);
    }
  }
  // Sets up an observer to watch for popup removals
  setupPopupObserver() {
    if (!this.containerEl)
      return;
    this.popupObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "childList") {
          mutation.removedNodes.forEach((node) => {
            if (node instanceof HTMLElement) {
              if (node.classList.contains("card-navigator-sort-popup")) {
                this.sortPopupOpen = false;
                this.updateIconStates();
              } else if (node.classList.contains("card-navigator-settings-popup")) {
                this.settingsPopupOpen = false;
                this.updateIconStates();
              }
            }
          });
        }
      });
    });
    this.popupObserver.observe(this.containerEl, { childList: true, subtree: true });
  }
  // Refreshes the toolbar (to be implemented if needed)
  refresh() {
  }
  // Cleans up resources when the toolbar is closed
  onClose() {
    if (this.popupObserver) {
      this.popupObserver.disconnect();
    }
  }
};
var FolderSuggestModal = class extends import_obsidian4.FuzzySuggestModal {
  constructor(plugin, onSelect) {
    super(plugin.app);
    this.plugin = plugin;
    this.onSelect = onSelect;
  }
  // Retrieve all folders in the vault
  getItems() {
    return this.plugin.app.vault.getAllLoadedFiles().filter((file) => file instanceof import_obsidian4.TFolder);
  }
  // Display the folder path as the item text
  getItemText(folder) {
    return folder.path;
  }
  // Handle folder selection
  onChooseItem(folder) {
    this.onSelect(folder);
  }
};

// src/ui/cardContainer/cardContainer.ts
var import_obsidian7 = require("obsidian");

// src/ui/cardContainer/cardMaker.ts
var import_obsidian5 = require("obsidian");

// src/common/utils.ts
var frontmatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n/;
function separateFrontmatterAndBody(body) {
  const match = body.match(frontmatterRegex);
  if (match) {
    return {
      frontmatter: match[1],
      cleanBody: body.slice(match[0].length).trim()
    };
  }
  return { frontmatter: null, cleanBody: body.trim() };
}
function sortFiles(files, criterion, order2) {
  return [...files].sort((a, b) => {
    let comparison = 0;
    switch (criterion) {
      case "fileName":
        comparison = a.basename.localeCompare(b.basename, void 0, { numeric: true, sensitivity: "base" });
        break;
      case "lastModified":
        comparison = a.stat.mtime - b.stat.mtime;
        break;
      case "created":
        comparison = a.stat.ctime - b.stat.ctime;
        break;
    }
    return order2 === "asc" ? comparison : -comparison;
  });
}

// src/ui/cardContainer/cardMaker.ts
var CardMaker = class {
  constructor(plugin, copyLinkCallback, copyContentCallback) {
    this.plugin = plugin;
    this.copyLinkCallback = copyLinkCallback;
    this.copyContentCallback = copyContentCallback;
  }
  async getCardsForActiveFile(activeFile) {
    const folder = activeFile.parent;
    if (!folder)
      return [];
    const files = folder.children.filter((file) => file instanceof import_obsidian5.TFile && file.extension === "md");
    const sortedFiles = sortFiles(
      files,
      this.plugin.settings.sortCriterion,
      this.plugin.settings.sortOrder
    );
    return Promise.all(sortedFiles.map((file) => this.createCard(file)));
  }
  async createCard(file) {
    try {
      const content = await this.plugin.app.vault.cachedRead(file);
      const { cleanBody } = separateFrontmatterAndBody(content);
      const bodyWithoutHeader = this.removeFirstHeader(cleanBody);
      return {
        file,
        fileName: this.plugin.settings.showFileName ? file.basename : void 0,
        firstHeader: this.plugin.settings.showFirstHeader ? this.findFirstHeader(cleanBody) : void 0,
        body: this.plugin.settings.showBody ? this.truncateBody(bodyWithoutHeader) : void 0
      };
    } catch (error) {
      console.error(`Failed to create card for file ${file.path}:`, error);
      throw error;
    }
  }
  removeFirstHeader(body) {
    return body.replace(/^#+\s+(.+)$/m, "").trim();
  }
  findFirstHeader(body) {
    const match = body.match(/^#+\s+(.+)$/m);
    return match ? match[1].trim() : void 0;
  }
  truncateBody(body) {
    if (!this.plugin.settings.bodyLengthLimit)
      return body;
    const maxLength = this.plugin.settings.bodyLength;
    return body.length <= maxLength ? body : `${body.slice(0, maxLength)}...`;
  }
  createCardElement(card) {
    const cardElement = document.createElement("div");
    cardElement.className = "card-navigator-card";
    cardElement.dataset.cardId = card.file.path;
    this.addCardContent(cardElement, card);
    this.addCardInteractions(cardElement, card);
    return cardElement;
  }
  addCardContent(cardElement, card) {
    if (this.plugin.settings.showFileName && card.fileName) {
      this.addElement(cardElement, "h3", card.fileName, "card-navigator-filename", this.plugin.settings.fileNameFontSize);
    }
    if (this.plugin.settings.showFirstHeader && card.firstHeader) {
      this.addElement(cardElement, "h4", card.firstHeader, "card-navigator-first-header", this.plugin.settings.firstHeaderFontSize);
    }
    if (this.plugin.settings.showBody && card.body) {
      const contentEl = this.addElement(cardElement, "div", "", "card-navigator-body", this.plugin.settings.bodyFontSize);
      if (this.plugin.settings.renderContentAsHtml) {
        import_obsidian5.MarkdownRenderer.render(
          this.plugin.app,
          card.body,
          contentEl,
          card.file.path,
          this.plugin
        );
      } else {
        contentEl.textContent = card.body;
        contentEl.addClass("ellipsis");
      }
    }
  }
  addElement(parent, tag, text, className, fontSize) {
    const element = parent.createEl(tag, { text, cls: className });
    element.style.fontSize = `${fontSize}px`;
    return element;
  }
  addCardInteractions(cardElement, card) {
    cardElement.addEventListener("click", () => this.openFile(card.file));
    this.setupDragAndDrop(cardElement, card);
    this.setupContextMenu(cardElement, card.file);
  }
  setupDragAndDrop(cardElement, card) {
    cardElement.setAttribute("draggable", "true");
    cardElement.addEventListener("dragstart", (event) => {
      if (event.dataTransfer) {
        const dragContent = this.getDragContent(card);
        event.dataTransfer.setData("text/plain", dragContent);
        event.dataTransfer.setDragImage(cardElement, 0, 0);
      }
    });
  }
  getDragContent(card) {
    if (this.plugin.settings.dragDropContent) {
      let content = "";
      if (this.plugin.settings.showFileName && card.fileName) {
        content += `## ${card.fileName}

`;
      }
      if (this.plugin.settings.showFirstHeader && card.firstHeader) {
        content += `# ${card.firstHeader}

`;
      }
      if (this.plugin.settings.showBody && card.body) {
        content += `${card.body}

`;
      }
      return content.trim() || this.plugin.app.fileManager.generateMarkdownLink(card.file, "");
    }
    return this.plugin.app.fileManager.generateMarkdownLink(card.file, "");
  }
  setupContextMenu(cardElement, file) {
    cardElement.addEventListener("contextmenu", (e) => {
      e.preventDefault();
      const menu = new import_obsidian5.Menu();
      this.plugin.app.workspace.trigger("file-menu", menu, file, "more-options");
      menu.addSeparator();
      menu.addItem((item) => {
        item.setTitle(t("COPY_AS_LINK")).setIcon("link").onClick(() => this.copyLinkCallback(file));
      });
      menu.addItem((item) => {
        item.setTitle(t("COPY_CARD_CONTENT")).setIcon("file-text").onClick(() => this.copyContentCallback(file));
      });
      menu.showAtPosition({ x: e.clientX, y: e.clientY });
    });
  }
  openFile(file) {
    this.plugin.app.workspace.getLeaf().openFile(file);
  }
};

// src/ui/layouts/listLayout.ts
var ListLayout = class {
  constructor(isVertical, cardGap, alignCardHeight) {
    this.isVertical = isVertical;
    this.cardGap = cardGap;
    this.alignCardHeight = alignCardHeight;
  }
  // Arrange cards in a list layout (either vertical or horizontal)
  arrange(cards, containerWidth, containerHeight, cardsPerView) {
    const positions = [];
    let currentPosition = 0;
    const cardSize = this.isVertical ? (containerHeight - (cardsPerView - 1) * this.cardGap) / cardsPerView : (containerWidth - (cardsPerView - 1) * this.cardGap) / cardsPerView;
    cards.forEach((card) => {
      const position = {
        card,
        x: this.isVertical ? 0 : currentPosition,
        y: this.isVertical ? currentPosition : 0,
        width: this.isVertical ? containerWidth : cardSize,
        height: this.isVertical ? cardSize : containerHeight
      };
      positions.push(position);
      currentPosition += cardSize + this.cardGap;
    });
    return positions;
  }
  // Get the number of columns in the layout (always 1 for list layout)
  getColumnsCount() {
    return 1;
  }
  // Get the scroll direction based on layout orientation
  getScrollDirection() {
    return this.isVertical ? "vertical" : "horizontal";
  }
  // Get the container style for the list layout
  getContainerStyle() {
    return {
      display: "flex",
      flexDirection: this.isVertical ? "column" : "row",
      gap: `${this.cardGap}px`,
      alignItems: "stretch",
      overflow: this.isVertical ? "auto hidden" : "hidden auto",
      height: "100%",
      width: "calc(100% + var(--size-4-3))",
      paddingRight: "var(--size-4-3)"
    };
  }
  // Get the card style for the list layout
  getCardStyle() {
    return {
      flex: this.alignCardHeight ? "0 0 auto" : "1 0 auto",
      minHeight: this.isVertical ? "0" : "100%",
      minWidth: this.isVertical ? "100%" : "0"
    };
  }
};

// src/ui/layouts/gridLayout.ts
var GridLayout = class {
  constructor(columns, cardGap, settings) {
    this.columns = columns;
    this.cardGap = cardGap;
    this.settings = settings;
  }
  // Arrange cards in a grid layout
  arrange(cards, containerWidth, _containerHeight, _cardsPerView) {
    const positions = [];
    const totalGapWidth = this.cardGap * (this.columns - 1);
    const cardWidth = (containerWidth - totalGapWidth) / this.columns;
    const cardHeight = this.settings.gridCardHeight;
    cards.forEach((card, index) => {
      const column = index % this.columns;
      const row = Math.floor(index / this.columns);
      positions.push({
        card,
        x: column * (cardWidth + this.cardGap),
        y: row * (cardHeight + this.cardGap),
        width: cardWidth,
        height: cardHeight
      });
    });
    return positions;
  }
  // Get the number of columns in the grid
  getColumnsCount() {
    return this.columns;
  }
  // Get the scroll direction for the grid layout (always vertical)
  getScrollDirection() {
    return "vertical";
  }
};

// src/ui/layouts/masonryLayout.ts
var MasonryLayout = class {
  constructor(columns, cardGap, settings, cardMaker) {
    this.columns = columns;
    this.cardGap = cardGap;
    this.settings = settings;
    this.cardMaker = cardMaker;
    this.container = null;
    this.columnElements = [];
    if (columns <= 0) {
      throw new Error("The number of columns must be greater than 0");
    }
  }
  setContainer(container) {
    this.container = container;
    this.setupContainer();
  }
  setupContainer() {
    if (!this.container)
      return;
    this.container.innerHTML = "";
    this.container.className = "masonry-layout";
    this.container.style.setProperty("--column-count", this.columns.toString());
    this.container.style.setProperty("--card-gap", `${this.cardGap}px`);
    this.columnElements = [];
    for (let i = 0; i < this.columns; i++) {
      const column = document.createElement("div");
      column.className = "masonry-column";
      this.container.appendChild(column);
      this.columnElements.push(column);
    }
  }
  arrange(cards, _containerWidth, _containerHeight, _cardsPerView) {
    if (!this.container) {
      console.warn("Container is not set. Please call setContainer before arrange.");
      return [];
    }
    this.setupContainer();
    const cardPositions = [];
    const containerRect = this.container.getBoundingClientRect();
    const focusedCards = new Set(Array.from(this.container.querySelectorAll(".card-navigator-focused")).map((el) => el.dataset.cardId));
    this.columnElements.forEach((column) => column.innerHTML = "");
    cards.forEach((card, index) => {
      const columnIndex = index % this.columns;
      const cardElement = this.cardMaker.createCardElement(card);
      cardElement.classList.add("masonry-card");
      if (focusedCards.has(card.file.path)) {
        cardElement.classList.add("card-navigator-focused");
      }
      this.columnElements[columnIndex].appendChild(cardElement);
      const rect = cardElement.getBoundingClientRect();
      cardPositions.push({
        card,
        x: rect.left - containerRect.left,
        y: rect.top - containerRect.top,
        width: rect.width,
        height: rect.height
      });
    });
    return cardPositions;
  }
  getColumnsCount() {
    return this.columns;
  }
  getScrollDirection() {
    return "vertical";
  }
  destroy() {
    this.container = null;
    this.columnElements = [];
  }
};

// src/common/keyboardNavigator.ts
var import_obsidian6 = require("obsidian");
var KeyboardNavigator = class {
  constructor(plugin, cardContainer, containerEl) {
    this.plugin = plugin;
    this.cardContainer = cardContainer;
    this.containerEl = containerEl;
    this.focusedCardIndex = null;
    this.previousFocusedCardIndex = null;
    this.isFocused = false;
    // Handle keydown events for navigation
    this.handleKeyDown = (e) => {
      if (!this.isFocused)
        return;
      const keyHandlers = {
        ArrowLeft: () => {
          e.preventDefault();
          this.moveFocus(0, -1);
        },
        ArrowRight: () => {
          e.preventDefault();
          this.moveFocus(0, 1);
        },
        ArrowUp: () => {
          e.preventDefault();
          this.moveFocus(-1, 0);
        },
        ArrowDown: () => {
          e.preventDefault();
          this.moveFocus(1, 0);
        },
        PageUp: () => {
          e.preventDefault();
          this.moveFocusPage(-1);
        },
        PageDown: () => {
          e.preventDefault();
          this.moveFocusPage(1);
        },
        Home: () => {
          e.preventDefault();
          this.moveFocusToStart();
        },
        End: () => {
          e.preventDefault();
          this.moveFocusToEnd();
        },
        Enter: () => {
          e.preventDefault();
          this.openFocusedCard();
        },
        ContextMenu: () => {
          e.preventDefault();
          this.openContextMenu();
        },
        e: () => {
          if (e.metaKey && e.ctrlKey) {
            e.preventDefault();
            this.openContextMenu();
          }
        }
      };
      const handler = keyHandlers[e.key];
      if (handler) {
        handler();
      }
    };
    // Handle blur event
    this.handleBlur = () => {
      this.isFocused = false;
      this.updateFocusedCard();
    };
    // Update the focused card's visual state
    this.updateFocusedCard = (0, import_obsidian6.debounce)(() => {
      if (!this.containerEl)
        return;
      if (this.previousFocusedCardIndex !== null) {
        const prevCard = this.containerEl.children[this.previousFocusedCardIndex];
        prevCard.classList.remove("card-navigator-focused");
      }
      if (this.isFocused && this.focusedCardIndex !== null) {
        const currentCard = this.containerEl.children[this.focusedCardIndex];
        currentCard.classList.add("card-navigator-focused");
      }
      this.previousFocusedCardIndex = this.focusedCardIndex;
    }, 50);
    this.containerEl = containerEl;
    this.setupKeyboardEvents();
  }
  // Set up keyboard event listeners
  setupKeyboardEvents() {
    this.containerEl.addEventListener("keydown", this.handleKeyDown);
    this.containerEl.addEventListener("blur", this.handleBlur);
  }
  // Remove keyboard event listeners
  cleanup() {
    this.containerEl.removeEventListener("keydown", this.handleKeyDown);
    this.containerEl.removeEventListener("blur", this.handleBlur);
    this.updateFocusedCard.cancel();
  }
  // Focus the navigator
  focusNavigator() {
    if (!this.containerEl)
      return;
    this.containerEl.tabIndex = -1;
    this.containerEl.focus();
    this.isFocused = true;
    const activeCardIndex = this.findActiveCardIndex();
    if (activeCardIndex !== -1) {
      this.focusedCardIndex = this.ensureValidIndex(activeCardIndex);
    } else {
      const firstVisibleCardIndex = this.findFirstVisibleCardIndex();
      if (firstVisibleCardIndex !== null) {
        this.focusedCardIndex = this.ensureValidIndex(firstVisibleCardIndex);
      } else {
        this.focusedCardIndex = this.ensureValidIndex(0);
      }
    }
    this.updateFocusedCard();
    this.scrollToFocusedCard(true);
  }
  // Blur the navigator
  blurNavigator() {
    this.containerEl.blur();
    this.isFocused = false;
    this.focusedCardIndex = null;
    this.updateFocusedCard();
  }
  // Calculate new index for grid layout
  calculateGridIndex(rowDelta, colDelta, totalCards) {
    var _a, _b, _c, _d;
    const layoutStrategy = this.cardContainer.getLayoutStrategy();
    if (!(layoutStrategy instanceof GridLayout || layoutStrategy instanceof MasonryLayout)) {
      console.warn("The layout strategy is unexpected.");
      return (_a = this.focusedCardIndex) != null ? _a : 0;
    }
    const columns = layoutStrategy.getColumnsCount();
    const currentRow = Math.floor(((_b = this.focusedCardIndex) != null ? _b : 0) / columns);
    const currentCol = ((_c = this.focusedCardIndex) != null ? _c : 0) % columns;
    let newRow = currentRow + rowDelta;
    let newCol = currentCol + colDelta;
    if (newCol < 0) {
      newRow--;
      newCol = columns - 1;
    } else if (newCol >= columns) {
      newRow++;
      newCol = 0;
    }
    const newIndex = newRow * columns + newCol;
    return newIndex >= 0 && newIndex < totalCards ? newIndex : (_d = this.focusedCardIndex) != null ? _d : 0;
  }
  // Calculate new index for list layout
  calculateListIndex(rowDelta, colDelta, totalCards) {
    var _a, _b;
    const newIndex = ((_a = this.focusedCardIndex) != null ? _a : 0) + rowDelta + colDelta;
    return newIndex >= 0 && newIndex < totalCards ? newIndex : (_b = this.focusedCardIndex) != null ? _b : 0;
  }
  ensureValidIndex(index) {
    const totalCards = this.containerEl.children.length;
    return Math.max(0, Math.min(index, totalCards - 1));
  }
  // Move focus based on row and column deltas
  moveFocus(rowDelta, colDelta) {
    if (this.focusedCardIndex === null) {
      this.focusedCardIndex = 0;
    } else {
      const totalCards = this.containerEl.children.length;
      const layoutStrategy = this.cardContainer.getLayoutStrategy();
      if (layoutStrategy instanceof GridLayout || layoutStrategy instanceof MasonryLayout) {
        this.focusedCardIndex = this.ensureValidIndex(this.calculateGridIndex(rowDelta, colDelta, totalCards));
      } else {
        this.focusedCardIndex = this.ensureValidIndex(this.calculateListIndex(rowDelta, colDelta, totalCards));
      }
    }
    this.updateFocusedCard();
    this.scrollToFocusedCard();
  }
  // Move focus by a page (multiple cards at once)
  moveFocusPage(direction) {
    if (this.focusedCardIndex === null)
      return;
    const totalCards = this.containerEl.children.length;
    const cardsPerView = this.plugin.settings.cardsPerView;
    let newIndex;
    if (direction > 0) {
      newIndex = Math.min(totalCards - 1, this.focusedCardIndex + cardsPerView);
    } else {
      newIndex = Math.max(0, this.focusedCardIndex - cardsPerView);
    }
    this.focusedCardIndex = this.ensureValidIndex(newIndex);
    this.updateFocusedCard();
    this.scrollToFocusedCard();
  }
  // Move focus to the first card
  moveFocusToStart() {
    this.focusedCardIndex = this.ensureValidIndex(0);
    this.updateFocusedCard();
    this.scrollToFocusedCard();
  }
  // Move focus to the last card
  moveFocusToEnd() {
    this.focusedCardIndex = this.ensureValidIndex(this.containerEl.children.length - 1);
    this.updateFocusedCard();
    this.scrollToFocusedCard();
  }
  // Scroll to ensure the focused card is visible
  scrollToFocusedCard(immediate = false) {
    if (this.focusedCardIndex === null || !this.containerEl)
      return;
    const focusedCard = this.containerEl.children[this.focusedCardIndex];
    this.cardContainer.centerCard(focusedCard, !immediate);
  }
  // Open the focused card
  openFocusedCard() {
    try {
      if (this.focusedCardIndex === null)
        return;
      const focusedCard = this.containerEl.children[this.focusedCardIndex];
      const file = this.cardContainer.getFileFromCard(focusedCard);
      if (file) {
        this.plugin.app.workspace.getLeaf().openFile(file);
      }
    } catch (error) {
      console.error("An error occurred while opening the card:", error);
    }
  }
  // Open the context menu for the focused card
  openContextMenu() {
    if (this.focusedCardIndex === null)
      return;
    const focusedCard = this.containerEl.children[this.focusedCardIndex];
    const file = this.cardContainer.getFileFromCard(focusedCard);
    if (file) {
      const menu = new import_obsidian6.Menu();
      this.plugin.app.workspace.trigger("file-menu", menu, file, "more-options");
      menu.addItem((item) => {
        item.setTitle(t("COPY_AS_LINK")).setIcon("link").onClick(() => {
          this.cardContainer.copyLink(file);
        });
      });
      menu.addItem((item) => {
        item.setTitle(t("COPY_CARD_CONTENT")).setIcon("file-text").onClick(() => {
          this.cardContainer.copyCardContent(file);
        });
      });
      const rect = focusedCard.getBoundingClientRect();
      menu.showAtPosition({ x: rect.left, y: rect.bottom });
    }
  }
  // Find the index of the active card
  findActiveCardIndex() {
    return Array.from(this.containerEl.children).findIndex(
      (child) => child.classList.contains("card-navigator-active")
    );
  }
  // Find the index of the first visible card
  findFirstVisibleCardIndex() {
    const containerRect = this.containerEl.getBoundingClientRect();
    for (let i = 0; i < this.containerEl.children.length; i++) {
      const cardRect = this.containerEl.children[i].getBoundingClientRect();
      if (this.isCardVisible(cardRect, containerRect)) {
        return i;
      }
    }
    return null;
  }
  // Check if a card is visible within the container
  isCardVisible(cardRect, containerRect) {
    return cardRect.top >= containerRect.top && cardRect.bottom <= containerRect.bottom && cardRect.left >= containerRect.left && cardRect.right <= containerRect.right;
  }
  // Update the layout strategy (currently empty, can be implemented if needed)
  updateLayout(_layoutStrategy) {
  }
};

// src/ui/cardContainer/cardContainer.ts
var CardContainer = class {
  constructor(plugin, leaf) {
    this.plugin = plugin;
    this.leaf = leaf;
    this.keyboardNavigator = null;
    this.cards = [];
    this.focusedCardId = null;
    const leafView = this.leaf.view;
    if (!leafView || !leafView.containerEl) {
      throw new Error("Invalid leaf view or container");
    }
    this.containerEl = leafView.containerEl.createDiv("card-navigator-container");
    if (!this.containerEl) {
      throw new Error("Failed to create container element");
    }
    this.cardMaker = new CardMaker(
      this.plugin,
      (file) => this.copyLink(file),
      (file) => this.copyCardContent(file)
    );
    this.isVertical = this.calculateIsVertical();
    this.cardGap = this.getCSSVariable("--card-navigator-gap", 10);
    try {
      this.layoutStrategy = this.determineAutoLayout();
    } catch (error) {
      console.error("Failed to determine layout strategy:", error);
      this.layoutStrategy = new ListLayout(this.isVertical, this.cardGap, this.plugin.settings.alignCardHeight);
    }
    if (this.layoutStrategy instanceof MasonryLayout && this.containerEl) {
      this.layoutStrategy.setContainer(this.containerEl);
    }
    this.resizeObserver = new ResizeObserver((0, import_obsidian7.debounce)(() => {
      this.handleResize();
    }, 100));
    this.setupResizeObserver();
    this.initializeKeyboardNavigator();
    this.currentLayout = this.plugin.settings.defaultLayout;
  }
  setupResizeObserver() {
    this.resizeObserver = new ResizeObserver(() => {
      this.updateLayout();
    });
    this.resizeObserver.observe(this.containerEl);
    this.updateLayout();
  }
  initializeKeyboardNavigator() {
    if (this.containerEl) {
      this.keyboardNavigator = new KeyboardNavigator(this.plugin, this, this.containerEl);
    } else {
      console.warn("Container element not available for KeyboardNavigator");
    }
  }
  // Determines whether the container should be considered vertical
  calculateIsVertical() {
    if (!this.containerEl)
      return true;
    const { width, height } = this.containerEl.getBoundingClientRect();
    return height > width;
  }
  // Retrieves the value of a CSS variable, or returns a default value if not found
  getCSSVariable(variableName, defaultValue) {
    if (!this.containerEl)
      return defaultValue;
    const valueStr = getComputedStyle(this.containerEl).getPropertyValue(variableName).trim();
    return parseInt(valueStr) || defaultValue;
  }
  // Initializes the card container with necessary settings and prepares it for use
  async initialize(containerEl) {
    this.containerEl = containerEl;
    await this.waitForContainerSize();
    this.updateContainerStyle();
    this.keyboardNavigator = new KeyboardNavigator(this.plugin, this, this.containerEl);
    this.setupResizeObserver();
    this.layoutStrategy = this.determineAutoLayout();
    await this.refresh();
  }
  waitForContainerSize() {
    return new Promise((resolve) => {
      const checkSize = () => {
        if (this.containerEl && this.containerEl.offsetWidth > 0 && this.containerEl.offsetHeight > 0) {
          resolve();
        } else {
          requestAnimationFrame(checkSize);
        }
      };
      checkSize();
    });
  }
  // Updates the container's styles based on the current plugin settings
  updateContainerStyle() {
    if (this.containerEl) {
      this.containerEl.classList.add("card-navigator-container");
      this.containerEl.classList.toggle("vertical", this.isVertical);
      this.containerEl.classList.toggle("horizontal", !this.isVertical);
      this.containerEl.classList.toggle("align-height", this.plugin.settings.alignCardHeight);
      this.containerEl.classList.toggle("flexible-height", !this.plugin.settings.alignCardHeight);
      this.containerEl.style.setProperty("--cards-per-view", this.plugin.settings.cardsPerView.toString());
    }
  }
  // Refreshes the card container by fetching the current folder, sorting files, and rendering the cards
  async refresh() {
    const folder = await this.getCurrentFolder();
    if (!folder || !this.containerEl)
      return;
    this.updateContainerStyle();
    const files = folder.children.filter((file) => file instanceof import_obsidian7.TFile);
    const sortedFiles = this.sortFiles(files);
    const cardsData = await this.createCardsData(sortedFiles);
    await this.renderCards(cardsData);
  }
  // Updates the container settings based on the provided partial settings
  updateSettings(settings) {
    if (settings.alignCardHeight !== void 0) {
      this.plugin.settings.alignCardHeight = settings.alignCardHeight;
    }
    if (settings.bodyLengthLimit !== void 0) {
      this.plugin.settings.bodyLengthLimit = settings.bodyLengthLimit;
    }
    if (settings.bodyLength !== void 0) {
      this.plugin.settings.bodyLength = settings.bodyLength;
    }
  }
  // Determines the appropriate layout strategy based on the container size and plugin settings
  determineAutoLayout() {
    if (!this.containerEl) {
      throw new Error("Container element is not initialized");
    }
    const containerStyle = window.getComputedStyle(this.containerEl);
    const containerWidth = this.containerEl.offsetWidth;
    const paddingLeft = parseFloat(containerStyle.paddingLeft) || 0;
    const paddingRight = parseFloat(containerStyle.paddingRight) || 0;
    const availableWidth = containerWidth - paddingLeft - paddingRight;
    const {
      alignCardHeight,
      cardWidthThreshold,
      defaultLayout
    } = this.plugin.settings;
    if (defaultLayout !== "auto") {
      switch (defaultLayout) {
        case "list":
          return new ListLayout(this.isVertical, this.cardGap, alignCardHeight);
        case "grid":
          return new GridLayout(this.plugin.settings.gridColumns, this.cardGap, this.plugin.settings);
        case "masonry": {
          const masonryLayout = new MasonryLayout(
            this.plugin.settings.masonryColumns,
            this.cardGap,
            this.plugin.settings,
            this.cardMaker
          );
          masonryLayout.setContainer(this.containerEl);
          return masonryLayout;
        }
      }
    }
    let columns = Math.floor((availableWidth + this.cardGap) / (cardWidthThreshold + this.cardGap));
    columns = Math.max(1, columns);
    const adjustedGap = columns === 1 ? Math.min(this.cardGap, 10) : this.cardGap;
    if (columns === 1) {
      return new ListLayout(this.isVertical, adjustedGap, alignCardHeight);
    } else if (alignCardHeight) {
      return new GridLayout(columns, this.cardGap, this.plugin.settings);
    } else {
      const masonryLayout = new MasonryLayout(columns, this.cardGap, this.plugin.settings, this.cardMaker);
      masonryLayout.setContainer(this.containerEl);
      return masonryLayout;
    }
  }
  updateLayout() {
    var _a;
    if (!this.containerEl)
      return;
    const newIsVertical = this.calculateIsVertical();
    const previousIsVertical = this.isVertical;
    this.isVertical = newIsVertical;
    if (this.plugin.settings.defaultLayout === "auto" || this.plugin.settings.defaultLayout === "list" || previousIsVertical !== this.isVertical) {
      this.layoutStrategy = this.determineAutoLayout();
    }
    (_a = this.keyboardNavigator) == null ? void 0 : _a.updateLayout(this.layoutStrategy);
    this.refresh();
  }
  handleResize() {
    this.updateLayout();
  }
  // Returns the current layout strategy
  getLayoutStrategy() {
    return this.layoutStrategy;
  }
  // Sets the layout strategy based on the provided layout type
  setLayout(layout) {
    var _a;
    const { gridColumns, alignCardHeight } = this.plugin.settings;
    this.currentLayout = layout;
    if (layout === "auto") {
      this.layoutStrategy = this.determineAutoLayout();
    } else {
      switch (layout) {
        case "list":
          this.layoutStrategy = new ListLayout(this.isVertical, this.cardGap, alignCardHeight);
          break;
        case "grid":
          this.layoutStrategy = new GridLayout(gridColumns, this.cardGap, this.plugin.settings);
          break;
        case "masonry":
          this.layoutStrategy = new MasonryLayout(
            this.plugin.settings.masonryColumns,
            this.cardGap,
            this.plugin.settings,
            this.cardMaker
          );
          if (this.containerEl) {
            this.layoutStrategy.setContainer(this.containerEl);
          }
          break;
      }
    }
    (_a = this.keyboardNavigator) == null ? void 0 : _a.updateLayout(this.layoutStrategy);
    this.refresh();
  }
  // Checks if the current layout is a grid layout
  isGridLayout() {
    return this.layoutStrategy instanceof GridLayout;
  }
  // Sets the layout orientation of the cards (vertical or horizontal)
  setOrientation(isVertical) {
    this.isVertical = isVertical;
    this.updateContainerStyle();
  }
  // Retrieves the current folder from which to display cards, either selected or active
  async getCurrentFolder() {
    if (this.plugin.settings.useSelectedFolder && this.plugin.settings.selectedFolder) {
      const abstractFile = this.plugin.app.vault.getAbstractFileByPath(this.plugin.settings.selectedFolder);
      return abstractFile instanceof import_obsidian7.TFolder ? abstractFile : null;
    } else {
      const activeFile = this.plugin.app.workspace.getActiveFile();
      return (activeFile == null ? void 0 : activeFile.parent) || null;
    }
  }
  // Sorts the files based on the plugin's current sort criteria
  sortFiles(files) {
    const mdFiles = files.filter((file) => file.extension === "md");
    return sortFiles(mdFiles, this.plugin.settings.sortCriterion, this.plugin.settings.sortOrder);
  }
  // Retrieves the file associated with a given card element
  getFileFromCard(cardElement) {
    if (!this.containerEl)
      return null;
    const cardIndex = Array.from(this.containerEl.children).indexOf(cardElement);
    if (cardIndex !== -1 && cardIndex < this.cards.length) {
      return this.cards[cardIndex].file;
    }
    return null;
  }
  // Focuses on the keyboard navigator to allow keyboard-based navigation
  focusNavigator() {
    var _a;
    (_a = this.keyboardNavigator) == null ? void 0 : _a.focusNavigator();
  }
  // Removes focus from the keyboard navigator
  blurNavigator() {
    var _a;
    (_a = this.keyboardNavigator) == null ? void 0 : _a.blurNavigator();
  }
  // Creates card data objects for a list of files
  async createCardsData(files) {
    const mdFiles = files.filter((file) => file.extension === "md");
    try {
      return await Promise.all(mdFiles.map((file) => this.cardMaker.createCard(file)));
    } catch (error) {
      console.error("\uCE74\uB4DC \uB370\uC774\uD130 \uC0DD\uC131 \uC911 \uC624\uB958 \uBC1C\uC0DD:", error);
      return [];
    }
  }
  // Renders the card elements inside the container
  async renderCards(cardsData) {
    if (!this.containerEl)
      return;
    if (!cardsData || cardsData.length === 0) {
      console.warn("The card data is empty.");
      return;
    }
    if (!this.layoutStrategy) {
      console.error("The layout strategy has not been set.");
      return;
    }
    const containerEl = this.containerEl;
    const currentScrollTop = containerEl.scrollTop;
    const currentScrollLeft = containerEl.scrollLeft;
    const focusedCardIndex = Array.from(containerEl.children).findIndex(
      (child) => child.classList.contains("card-navigator-focused")
    );
    const containerRect = containerEl.getBoundingClientRect();
    const containerStyle = window.getComputedStyle(this.containerEl);
    const paddingLeft = parseFloat(containerStyle.paddingLeft);
    const paddingRight = parseFloat(containerStyle.paddingRight);
    const paddingTop = parseFloat(containerStyle.paddingTop);
    const availableWidth = containerRect.width - paddingLeft - paddingRight;
    if (this.layoutStrategy instanceof ListLayout) {
      const listContainerStyle = this.layoutStrategy.getContainerStyle();
      Object.assign(containerEl.style, listContainerStyle);
    } else {
      containerEl.style.display = "";
      containerEl.style.flexDirection = "";
      containerEl.style.gap = "";
      containerEl.style.alignItems = "";
      containerEl.style.overflowY = "";
      containerEl.style.height = "100%";
    }
    const cardPositions = this.layoutStrategy.arrange(
      cardsData,
      availableWidth,
      containerRect.height,
      this.plugin.settings.cardsPerView
    );
    if (cardPositions.length !== cardsData.length) {
      console.warn("Card positions and card data length mismatch. Adjusting...");
      const minLength = Math.min(cardPositions.length, cardsData.length);
      cardsData = cardsData.slice(0, minLength);
      cardPositions.length = minLength;
    }
    this.focusedCardId = this.getFocusedCardId();
    containerEl.empty();
    this.cards = cardsData;
    cardPositions.forEach((position, index) => {
      const card = cardsData[index];
      const cardEl = this.cardMaker.createCardElement(card);
      if (this.layoutStrategy instanceof ListLayout) {
        const cardStyle = this.layoutStrategy.getCardStyle();
        Object.assign(cardEl.style, cardStyle);
      } else {
        const position2 = cardPositions[index];
        cardEl.style.position = "absolute";
        cardEl.style.left = `${position2.x + paddingLeft}px`;
        cardEl.style.top = `${position2.y + paddingTop}px`;
        cardEl.style.width = `${position2.width}px`;
        cardEl.style.height = typeof position2.height === "number" ? `${position2.height}px` : position2.height;
      }
      containerEl.appendChild(cardEl);
      cardEl.classList.add(this.layoutStrategy.getScrollDirection() === "vertical" ? "vertical" : "horizontal");
      cardEl.classList.toggle("align-height", this.plugin.settings.alignCardHeight);
      cardEl.classList.toggle("card-navigator-active", card.file === this.plugin.app.workspace.getActiveFile());
      if (index === focusedCardIndex) {
        cardEl.classList.add("card-navigator-focused");
      }
      if (card.file.path === this.focusedCardId) {
        cardEl.classList.add("card-navigator-focused");
      }
      containerEl.appendChild(cardEl);
    });
    containerEl.scrollTop = currentScrollTop;
    containerEl.scrollLeft = currentScrollLeft;
    const newActiveCardIndex = Array.from(containerEl.children).findIndex(
      (child) => child.classList.contains("card-navigator-active")
    );
    if (newActiveCardIndex !== -1) {
      this.scrollToActiveCard(false);
    }
    this.updateScrollDirection();
    void this.ensureCardSizesAreSet();
  }
  getFocusedCardId() {
    if (!this.containerEl)
      return null;
    const focusedCard = this.containerEl.querySelector(".card-navigator-focused");
    return focusedCard ? focusedCard.dataset.cardId || null : null;
  }
  focusCard(cardId) {
    this.focusedCardId = cardId;
    this.updateFocusedCard();
  }
  updateFocusedCard() {
    if (!this.containerEl || !this.focusedCardId)
      return;
    const cards = this.containerEl.querySelectorAll(".card-navigator-card");
    cards.forEach((card) => {
      if (card instanceof HTMLElement) {
        if (card.dataset.cardId === this.focusedCardId) {
          card.classList.add("card-navigator-focused");
        } else {
          card.classList.remove("card-navigator-focused");
        }
      }
    });
  }
  // Updates the scroll direction of the container element based on the layout strategy
  updateScrollDirection() {
    if (!this.containerEl)
      return;
    const scrollDirection = this.layoutStrategy.getScrollDirection();
    this.containerEl.style.overflowY = scrollDirection === "vertical" ? "auto" : "hidden";
    this.containerEl.style.overflowX = scrollDirection === "horizontal" ? "auto" : "hidden";
  }
  // Clears the 'focused' status from all card elements
  clearFocusedCards() {
    if (!this.containerEl)
      return;
    Array.from(this.containerEl.children).forEach((card) => {
      card.classList.remove("card-navigator-focused");
    });
  }
  // Ensures the size of the cards is properly set after rendering
  async ensureCardSizesAreSet() {
    return new Promise((resolve) => {
      const checkSizes = () => {
        var _a;
        const firstCard = (_a = this.containerEl) == null ? void 0 : _a.querySelector(".card-navigator-card");
        if (firstCard && firstCard.offsetWidth > 0 && firstCard.offsetHeight > 0) {
          resolve();
        } else {
          requestAnimationFrame(checkSizes);
        }
      };
      checkSizes();
    });
  }
  // Scrolls to the currently active card, centering it within the container
  scrollToActiveCard(animate = true) {
    if (!this.containerEl)
      return;
    const activeCard = this.containerEl.querySelector(".card-navigator-active");
    if (!activeCard)
      return;
    this.centerCard(activeCard, animate);
  }
  // Centers a specific card within the container, either horizontally or vertically
  centerCard(card, animate = true) {
    if (!this.containerEl)
      return;
    const containerRect = this.containerEl.getBoundingClientRect();
    const cardRect = card.getBoundingClientRect();
    let offset2 = 0;
    let scrollProperty;
    if (this.isVertical) {
      const containerVisibleHeight = containerRect.height;
      offset2 = cardRect.top - containerRect.top - (containerVisibleHeight - cardRect.height) / 2;
      scrollProperty = "scrollTop";
    } else {
      const containerVisibleWidth = containerRect.width;
      offset2 = cardRect.left - containerRect.left - (containerVisibleWidth - cardRect.width) / 2;
      scrollProperty = "scrollLeft";
    }
    const newScrollPosition = this.containerEl[scrollProperty] + offset2;
    if (animate) {
      this.smoothScroll(scrollProperty, newScrollPosition);
    } else {
      this.containerEl[scrollProperty] = newScrollPosition;
    }
  }
  // Smoothly scrolls to a target position in the container
  smoothScroll(scrollProperty, targetPosition) {
    if (!this.containerEl)
      return;
    const startPosition = this.containerEl[scrollProperty];
    const distance = targetPosition - startPosition;
    const duration = 300;
    let startTime = null;
    const animation = (currentTime) => {
      if (startTime === null)
        startTime = currentTime;
      const timeElapsed = currentTime - startTime;
      const progress = Math.min(timeElapsed / duration, 1);
      const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;
      if (this.containerEl) {
        this.containerEl[scrollProperty] = startPosition + distance * easeProgress;
      }
      if (timeElapsed < duration && this.containerEl) {
        requestAnimationFrame(animation);
      }
    };
    requestAnimationFrame(animation);
  }
  // Centers the currently active card
  centerActiveCard() {
    this.scrollToActiveCard(true);
  }
  // Retrieves the size of the card elements, including the gap between them
  getCardSize() {
    if (!this.containerEl)
      return { width: 0, height: 0 };
    const firstCard = this.containerEl.querySelector(".card-navigator-card");
    if (!firstCard)
      return { width: 0, height: 0 };
    const computedStyle = getComputedStyle(this.containerEl);
    const gap = parseInt(computedStyle.getPropertyValue("--card-navigator-gap") || "0", 10);
    return {
      width: firstCard.offsetWidth + gap,
      height: firstCard.offsetHeight + gap
    };
  }
  // Scrolls the container in the specified direction by a given number of cards
  scrollInDirection(direction, count = 1) {
    if (!this.containerEl)
      return;
    const { width, height } = this.getCardSize();
    const cardsPerView = this.plugin.settings.cardsPerView;
    const totalCards = this.cards.length;
    const isVertical = this.layoutStrategy.getScrollDirection() === "vertical";
    const cardSize = isVertical ? height : width;
    const currentScroll = isVertical ? this.containerEl.scrollTop : this.containerEl.scrollLeft;
    const totalSize = totalCards * cardSize;
    const containerSize = isVertical ? this.containerEl.clientHeight : this.containerEl.clientWidth;
    let targetScroll;
    if (count === cardsPerView) {
      const currentEdgeCard = Math.floor((currentScroll + (direction === "down" || direction === "right" ? containerSize : 0)) / cardSize);
      if (direction === "up" || direction === "left") {
        if (currentEdgeCard < cardsPerView) {
          targetScroll = 0;
        } else {
          targetScroll = Math.max(0, (currentEdgeCard - cardsPerView) * cardSize);
        }
      } else {
        if (totalCards - currentEdgeCard < cardsPerView) {
          targetScroll = totalSize - containerSize;
        } else {
          targetScroll = Math.min(totalSize - containerSize, (currentEdgeCard + 1) * cardSize);
        }
      }
    } else {
      const scrollAmount = cardSize * count;
      if (direction === "up" || direction === "left") {
        targetScroll = Math.max(0, currentScroll - scrollAmount);
      } else {
        targetScroll = Math.min(totalSize - containerSize, currentScroll + scrollAmount);
      }
    }
    this.containerEl.scrollTo({
      [isVertical ? "top" : "left"]: targetScroll,
      behavior: "smooth"
    });
  }
  // Scrolls the container upwards by a specified number of cards
  scrollUp(count = 1) {
    this.scrollInDirection("up", count);
  }
  // Scrolls the container downwards by a specified number of cards
  scrollDown(count = 1) {
    this.scrollInDirection("down", count);
  }
  // Scrolls the container to the left by a specified number of cards
  scrollLeft(count = 1) {
    this.scrollInDirection("left", count);
  }
  // Scrolls the container to the right by a specified number of cards
  scrollRight(count = 1) {
    this.scrollInDirection("right", count);
  }
  // Displays the cards based on the filtered files
  async displayCards(filteredFiles) {
    const sortedFiles = this.sortFiles(filteredFiles);
    const cardsData = await this.createCardsData(sortedFiles);
    await this.renderCards(cardsData);
  }
  // Searches for cards by file body or file name and displays them
  async searchCards(searchTerm) {
    const folder = await this.getCurrentFolder();
    if (!folder)
      return;
    const files = folder.children.filter((file) => file instanceof import_obsidian7.TFile);
    const filteredFiles = await this.filterFilesByContent(files, searchTerm);
    await this.displayCards(filteredFiles);
  }
  // Filters files based on their body or name
  async filterFilesByContent(files, searchTerm) {
    const lowercaseSearchTerm = searchTerm.toLowerCase();
    const filteredFiles = [];
    for (const file of files) {
      const content = await this.plugin.app.vault.cachedRead(file);
      if (file.basename.toLowerCase().includes(lowercaseSearchTerm) || content.toLowerCase().includes(lowercaseSearchTerm)) {
        filteredFiles.push(file);
      }
    }
    return filteredFiles;
  }
  // Displays cards for a specific folder
  async displayCardsForFolder(folder) {
    const files = folder.children.filter((file) => file instanceof import_obsidian7.TFile);
    await this.displayCards(files);
  }
  // Sorts the cards based on a given criterion and order
  async sortCards(criterion, order2) {
    this.plugin.settings.sortCriterion = criterion;
    this.plugin.settings.sortOrder = order2;
    await this.plugin.saveSettings();
    await this.refresh();
  }
  // Copies the link to a file to the clipboard
  copyLink(file) {
    const link = this.plugin.app.fileManager.generateMarkdownLink(file, "");
    navigator.clipboard.writeText(link).then(() => {
      new import_obsidian7.Notice(t("LINK_COPIED_TO_CLIPBOARD"));
    }).catch((err) => {
      console.error(t("FAILED_TO_COPY_LINK"), err);
      new import_obsidian7.Notice(t("FAILED_TO_COPY_LINK"));
    });
  }
  // Copies the content of a card to the clipboard
  async copyCardContent(file) {
    try {
      const content = await this.plugin.app.vault.read(file);
      const { cleanBody } = separateFrontmatterAndBody(content);
      const truncatedBody = this.truncateBody(cleanBody);
      await navigator.clipboard.writeText(truncatedBody);
      new import_obsidian7.Notice(t("CARD_CONTENT_COPIED_TO_CLIPBOARD"));
    } catch (err) {
      console.error(t("FAILED_TO_COPY_CARD_CONTENT"), err);
      new import_obsidian7.Notice(t("FAILED_TO_COPY_CARD_CONTENT"));
    }
  }
  // Truncates card body if it's longer than the allowed maximum length
  truncateBody(body) {
    if (!this.plugin.settings.bodyLengthLimit) {
      return body;
    }
    const maxLength = this.plugin.settings.bodyLength;
    return body.length <= maxLength ? body : `${body.slice(0, maxLength)}...`;
  }
  // Cleans up event listeners when the card container is closed
  onClose() {
    this.plugin.app.workspace.off("active-leaf-change", this.plugin.triggerRefresh);
    this.plugin.app.vault.off("modify", this.plugin.triggerRefresh);
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
    }
  }
};

// src/ui/cardNavigator.ts
var VIEW_TYPE_CARD_NAVIGATOR = "card-navigator-view";
var CardNavigator = class extends import_obsidian8.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.toolbar = new Toolbar(this.plugin);
    this.cardContainer = new CardContainer(this.plugin, this.leaf);
    this.isVertical = this.calculateIsVertical();
    this.resizeObserver = new ResizeObserver(this.handleResize.bind(this));
    this.keyboardNavigator = new KeyboardNavigator(this.plugin, this.cardContainer, this.containerEl.children[1]);
  }
  // Return the unique identifier for this view
  getViewType() {
    return VIEW_TYPE_CARD_NAVIGATOR;
  }
  // Return the display name for this view
  getDisplayText() {
    return t("CARD_NAVIGATOR");
  }
  // Return the icon name for this view
  getIcon() {
    return "layers-3";
  }
  // Determine if the view should be displayed vertically
  calculateIsVertical() {
    const containerEl = this.leaf.view instanceof import_obsidian8.ItemView ? this.leaf.view.containerEl : this.containerEl;
    const { width, height } = containerEl.getBoundingClientRect();
    return height > width;
  }
  // Handle resize events and update layout if necessary
  handleResize() {
    const newIsVertical = this.calculateIsVertical();
    if (newIsVertical !== this.isVertical) {
      this.isVertical = newIsVertical;
      this.updateLayoutAndRefresh();
    }
  }
  // Open the context menu for the focused card
  openContextMenu() {
    const focusedCard = this.getFocusedCard();
    if (!focusedCard)
      return;
    const file = this.cardContainer.getFileFromCard(focusedCard);
    if (!file)
      return;
    const menu = new import_obsidian8.Menu();
    this.plugin.app.workspace.trigger("file-menu", menu, file, "more-options");
    menu.addSeparator();
    menu.addItem((item) => {
      item.setTitle(t("COPY_AS_LINK")).setIcon("link").onClick(() => {
        this.cardContainer.copyLink(file);
      });
    });
    menu.addItem((item) => {
      item.setTitle(t("COPY_CARD_CONTENT")).setIcon("file-text").onClick(() => {
        this.cardContainer.copyCardContent(file);
      });
    });
    const rect = focusedCard.getBoundingClientRect();
    menu.showAtPosition({ x: rect.left, y: rect.bottom });
  }
  // Focus the keyboard navigator
  focusNavigator() {
    this.keyboardNavigator.focusNavigator();
  }
  // Get the currently focused card element
  getFocusedCard() {
    return this.containerEl.querySelector(".card-navigator-card.card-navigator-focused");
  }
  // Refresh the toolbar and card container
  async refresh() {
    await this.toolbar.refresh();
    await this.cardContainer.refresh();
    this.updateLayoutAndRefresh();
  }
  // Update layout settings and refresh the view
  updateLayoutAndRefresh() {
    const settings = this.plugin.settings;
    if (settings.defaultLayout) {
      this.cardContainer.setLayout(settings.defaultLayout);
    } else {
      this.cardContainer.setLayout("auto");
    }
    this.cardContainer.updateSettings(settings);
    this.cardContainer.refresh();
  }
  // Set up the view when it's opened
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    const navigatorEl = container.createDiv("card-navigator");
    const toolbarEl = navigatorEl.createDiv("card-navigator-toolbar");
    const cardContainerEl = navigatorEl.createDiv("card-navigator-container");
    this.toolbar.initialize(toolbarEl);
    this.cardContainer.initialize(cardContainerEl);
    requestAnimationFrame(async () => {
      this.keyboardNavigator = new KeyboardNavigator(this.plugin, this.cardContainer, cardContainerEl);
      this.isVertical = this.calculateIsVertical();
      this.updateLayoutAndRefresh();
      this.resizeObserver.observe(this.leaf.view.containerEl);
      await this.refresh();
      await this.centerActiveCardOnOpen();
      await this.plugin.loadSettings();
      await new Promise((resolve) => setTimeout(resolve, 0));
      this.updateLayoutAndRefresh();
    });
  }
  // Center the active card when opening the view, if enabled in settings
  async centerActiveCardOnOpen() {
    if (this.plugin.settings.centerActiveCardOnOpen) {
      setTimeout(() => {
        this.cardContainer.centerActiveCard();
      }, 300);
    }
  }
  // Clean up when the view is closed
  async onClose() {
    this.resizeObserver.disconnect();
    this.toolbar.onClose();
    this.cardContainer.onClose();
    this.keyboardNavigator.blurNavigator();
  }
};

// src/ui/settings/settingsTab.ts
var import_obsidian20 = require("obsidian");

// src/ui/settings/presetSettings.ts
var import_obsidian14 = require("obsidian");

// src/ui/settings/components/PresetSuggest.ts
var import_obsidian11 = require("obsidian");

// src/ui/settings/components/Log.ts
var import_obsidian9 = require("obsidian");
function log_error(e) {
  const notice = new import_obsidian9.Notice("", 8e3);
  if (e instanceof CardNavigatorError && e.console_msg) {
    notice.noticeEl.innerHTML = `<b>Card Navigator Error</b>:<br/>${e.message}<br/>Check console for more information`;
    console.error(`Card Navigator Error:`, e.message, "\n", e.console_msg);
  } else {
    notice.noticeEl.innerHTML = `<b>Card Navigator Error</b>:<br/>${e.message}`;
  }
}

// src/ui/settings/components/Error.ts
var CardNavigatorError = class extends Error {
  constructor(msg, console_msg) {
    super(msg);
    this.console_msg = console_msg;
    this.name = this.constructor.name;
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
  }
};
function errorWrapperSync(fn2, msg) {
  try {
    return fn2();
  } catch (e) {
    const error = e;
    log_error(new CardNavigatorError(msg, error.message));
    return null;
  }
}

// src/ui/settings/components/Utils.ts
var import_obsidian10 = require("obsidian");
function resolve_tfolder(app, folder_str) {
  folder_str = (0, import_obsidian10.normalizePath)(folder_str);
  const folder = app.vault.getAbstractFileByPath(folder_str);
  if (!folder) {
    throw new CardNavigatorError(`Folder "${folder_str}" doesn't exist`);
  }
  if (!(folder instanceof import_obsidian10.TFolder)) {
    throw new CardNavigatorError(`${folder_str} is a file, not a folder`);
  }
  return folder;
}
function get_tfiles_from_folder(app, folder_str) {
  const folder = resolve_tfolder(app, folder_str);
  const files = [];
  import_obsidian10.Vault.recurseChildren(folder, (file) => {
    if (file instanceof import_obsidian10.TFile) {
      files.push(file);
    }
  });
  files.sort((a, b) => {
    return a.path.localeCompare(b.path);
  });
  return files;
}

// src/ui/settings/components/PresetSuggest.ts
var path = __toESM(require("path"));
var PresetSuggest = class extends TextInputSuggest {
  constructor(app, inputEl, plugin, mode) {
    super(app, inputEl);
    this.app = app;
    this.inputEl = inputEl;
    this.plugin = plugin;
    this.mode = mode;
  }
  get_folder(mode) {
    switch (mode) {
      case 0 /* PresetsFiles */:
        return this.plugin.settings.presetFolderPath;
    }
  }
  get_error_msg(mode) {
    switch (mode) {
      case 0 /* PresetsFiles */:
        return `Presets folder doesn't exist`;
    }
  }
  getSuggestions(input_str) {
    const all_files = errorWrapperSync(
      () => get_tfiles_from_folder(this.app, this.get_folder(this.mode)),
      this.get_error_msg(this.mode)
    );
    if (!all_files) {
      return [];
    }
    const files = [];
    const lower_input_str = input_str.toLowerCase();
    all_files.forEach((file) => {
      if (file instanceof import_obsidian11.TFile && file.extension === "json" && file.path.toLowerCase().includes(lower_input_str)) {
        files.push(file);
      }
    });
    return files.slice(0, 1e3);
  }
  renderSuggestion(file, el) {
    const presetName = path.basename(file.path, ".json");
    el.setText(presetName);
  }
  selectSuggestion(file) {
    const presetName = path.basename(file.path, ".json");
    this.inputEl.value = presetName;
    this.inputEl.trigger("input");
    this.close();
  }
};

// src/ui/settings/modals/PresetEditModal.ts
var import_obsidian12 = require("obsidian");
var PresetEditModal = class extends import_obsidian12.Modal {
  constructor(app, plugin, settingsManager, mode, existingPresetName, refreshPresetList2) {
    super(app);
    this.plugin = plugin;
    this.settingsManager = settingsManager;
    this.mode = mode;
    this.existingPresetName = existingPresetName;
    this.refreshPresetList = refreshPresetList2;
    this.presetName = "";
    this.description = "";
    this.presetData = "";
    this.dataTextArea = null;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: this.getModalTitle() });
    new import_obsidian12.Setting(contentEl).setName(t("PRESET_NAME")).setDesc(t("ENTER_PRESET_NAME")).addTextArea(async (text) => {
      text.setPlaceholder(t("ENTER_PRESET_NAME_PLACEHOLDER")).setValue(this.getInitialPresetName()).onChange((value) => this.presetName = value);
      text.inputEl.rows = 1;
      text.inputEl.style.width = "350px";
    });
    new import_obsidian12.Setting(contentEl).setName(t("DESCRIPTION")).setDesc(t("ENTER_PRESET_DESCRIPTION")).addTextArea(async (text) => {
      text.setPlaceholder(t("ENTER_PRESET_DESCRIPTION_PLACEHOLDER")).setValue(await this.getInitialDescription()).onChange((value) => this.description = value);
      text.inputEl.rows = 4;
      text.inputEl.style.width = "350px";
    });
    new import_obsidian12.Setting(contentEl).setName(t("PRESET_DATA")).setDesc(t("EDIT_PRESET_DATA_DESC")).addTextArea(async (text) => {
      this.dataTextArea = text;
      const initialData = await this.getInitialPresetData();
      this.presetData = initialData;
      text.setPlaceholder(t("PRESET_DATA_PLACEHOLDER")).setValue(initialData).onChange((value) => this.presetData = value);
      text.inputEl.rows = 10;
      text.inputEl.style.width = "350px";
    });
    new import_obsidian12.Setting(contentEl).addButton((btn) => btn.setButtonText(t("UPDATE_WITH_CURRENT_SETTINGS")).onClick(() => this.updatePresetWithCurrentSettings()));
    new import_obsidian12.Setting(contentEl).addButton((btn) => btn.setButtonText(t("SAVE")).setCta().onClick(() => this.savePreset()));
  }
  getModalTitle() {
    switch (this.mode) {
      case "create":
        return t("CREATE_NEW_PRESET");
      case "edit":
        return t("EDIT_PRESET");
      case "clone":
        return t("CLONE_PRESET");
    }
  }
  getInitialPresetName() {
    switch (this.mode) {
      case "create":
        return "";
      case "edit":
        return this.existingPresetName || "";
      case "clone":
        return t("PRESET_COPY", { name: this.existingPresetName || "" });
    }
  }
  async getInitialDescription() {
    if (this.mode === "create")
      return "";
    const existingPreset = await this.plugin.presetManager.getPreset(this.existingPresetName || "");
    return (existingPreset == null ? void 0 : existingPreset.description) || "";
  }
  async getInitialPresetData() {
    if (this.mode === "create")
      return JSON.stringify(this.plugin.settingsManager.getCurrentSettings(), null, 2);
    const existingPreset = await this.plugin.presetManager.getPreset(this.existingPresetName || "");
    return JSON.stringify((existingPreset == null ? void 0 : existingPreset.settings) || {}, null, 2);
  }
  async updatePresetWithCurrentSettings() {
    const currentSettings = this.plugin.settingsManager.getCurrentSettings();
    this.presetData = JSON.stringify(currentSettings, null, 2);
    if (this.dataTextArea) {
      this.dataTextArea.setValue(this.presetData);
    }
  }
  async savePreset() {
    if (!this.presetName && this.mode !== "edit") {
      new import_obsidian12.Notice(t("ENTER_PRESET_NAME_NOTICE"));
      return;
    }
    if (!this.presetData.trim()) {
      new import_obsidian12.Notice(t("PRESET_DATA_EMPTY"));
      return;
    }
    try {
      const presetSettings = JSON.parse(this.presetData);
      const saveName = this.mode === "edit" ? this.existingPresetName || this.presetName : this.presetName;
      switch (this.mode) {
        case "create":
        case "clone":
          await this.plugin.presetManager.savePreset(saveName, this.description, presetSettings);
          await this.plugin.presetManager.applyGlobalPreset(saveName);
          break;
        case "edit":
          if (this.existingPresetName) {
            if (this.existingPresetName !== saveName) {
              await this.plugin.presetManager.deletePreset(this.existingPresetName);
            }
            await this.plugin.presetManager.savePreset(saveName, this.description, presetSettings);
          }
          break;
      }
      this.close();
      this.settingsManager.applyChanges();
      new import_obsidian12.Notice(t("PRESET_SAVED", { name: saveName }));
      if (this.refreshPresetList) {
        this.refreshPresetList();
      }
    } catch (error) {
      console.error(t("FAILED_TO_SAVE_PRESET"), error);
      new import_obsidian12.Notice(t("PRESET_SAVE_FAILED", { error: error instanceof Error ? error.message : String(error) }));
    }
  }
};

// src/ui/settings/modals/PresetImportExportModal.ts
var import_obsidian13 = require("obsidian");
var PresetImportExportModal = class extends import_obsidian13.Modal {
  constructor(app, plugin, settingsManager, mode, presetName, refreshPresetList2) {
    super(app);
    this.plugin = plugin;
    this.settingsManager = settingsManager;
    this.mode = mode;
    this.presetName = presetName;
    this.refreshPresetList = refreshPresetList2;
    this.importText = "";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    if (this.mode === "import") {
      this.setupImportUI();
    } else {
      this.setupExportUI();
    }
  }
  setupImportUI() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: t("IMPORT_PRESET") });
    const textAreaContainer = contentEl.createDiv("preset-import-textarea-container");
    const textArea = textAreaContainer.createEl("textarea", {
      attr: {
        placeholder: t("PASTE_PRESET_JSON_HERE")
      }
    });
    textArea.rows = 20;
    textArea.style.width = "100%";
    textArea.addEventListener("input", (e) => {
      this.importText = e.target.value;
    });
    new import_obsidian13.Setting(contentEl).addButton((btn) => btn.setButtonText(t("IMPORT")).setCta().onClick(async () => {
      try {
        const presetData = JSON.parse(this.importText);
        if (!presetData.name || !presetData.settings || typeof presetData.description !== "string") {
          throw new Error(t("INVALID_PRESET_DATA"));
        }
        await this.plugin.presetManager.savePreset(presetData.name, presetData.description, presetData.settings);
        this.settingsManager.applyChanges();
        new import_obsidian13.Notice(t("PRESET_IMPORTED_SUCCESSFULLY", { name: presetData.name }));
        this.close();
        if (this.refreshPresetList) {
          this.refreshPresetList();
        }
      } catch (error) {
        if (error instanceof Error) {
          new import_obsidian13.Notice(t("PRESET_IMPORT_FAILED", { error: error.message }));
        } else {
          new import_obsidian13.Notice(t("UNKNOWN_ERROR_DURING_IMPORT"));
        }
      }
    }));
  }
  async setupExportUI() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: t("EXPORT_PRESET") });
    if (this.presetName) {
      try {
        const preset = await this.plugin.presetManager.getPreset(this.presetName);
        if (preset) {
          const jsonString = JSON.stringify(preset, null, 2);
          const textAreaContainer = contentEl.createDiv("preset-export-textarea-container");
          const textArea = textAreaContainer.createEl("textarea", {
            text: jsonString,
            attr: {
              readonly: "true"
            }
          });
          textArea.rows = 20;
          textArea.style.width = "100%";
          new import_obsidian13.Setting(contentEl).addButton((btn) => btn.setButtonText(t("COPY")).setCta().onClick(() => {
            navigator.clipboard.writeText(jsonString);
            new import_obsidian13.Notice(t("PRESET_JSON_COPIED"));
          }));
        } else {
          contentEl.createEl("p", { text: t("PRESET_NOT_FOUND") });
        }
      } catch (error) {
        console.error(t("ERROR_LOADING_PRESET"), error);
        contentEl.createEl("p", { text: t("ERROR_LOADING_PRESET") });
      }
    } else {
      contentEl.createEl("p", { text: t("NO_PRESET_SELECTED") });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/ui/settings/presetSettings.ts
var presetListContainer;
function addPresetSettings(containerEl, plugin, settingsManager, settingTab) {
  const debouncedRefreshAllSettings = (0, import_obsidian14.debounce)(() => refreshAllSettings(), 200);
  const refreshAllSettings = () => {
    settingTab.updateAllSections();
  };
  addAutoApplyPresetsSection(containerEl, plugin, settingsManager, debouncedRefreshAllSettings);
  if (plugin.settings.autoApplyPresets) {
    addGlobalPresetSection(containerEl, plugin, debouncedRefreshAllSettings);
    addFolderPresetSection(containerEl, plugin, settingsManager, debouncedRefreshAllSettings);
    addPresetManagementSection(containerEl, plugin, settingsManager, debouncedRefreshAllSettings);
    presetListContainer = containerEl.createDiv("preset-list-container");
    refreshPresetList(plugin, settingsManager, debouncedRefreshAllSettings);
  }
}
function addAutoApplyPresetsSection(containerEl, plugin, settingsManager, debouncedRefreshAllSettings) {
  new import_obsidian14.Setting(containerEl).setName(t("AUTO_APPLY_PRESETS")).setDesc(t("AUTO_APPLY_PRESETS_DESC")).addToggle(
    (toggle) => toggle.setValue(plugin.settings.autoApplyPresets).onChange(async (value) => {
      plugin.settings.autoApplyPresets = value;
      await plugin.saveSettings();
      debouncedRefreshAllSettings();
    })
  );
}
async function refreshPresetList(plugin, settingsManager, debouncedRefreshAllSettings) {
  if (!presetListContainer)
    return;
  presetListContainer.empty();
  await addPresetListSection(presetListContainer, plugin, settingsManager, debouncedRefreshAllSettings);
}
function addGlobalPresetSection(containerEl, plugin, debouncedRefreshAllSettings) {
  new import_obsidian14.Setting(containerEl).setName(t("PRESET_FOLDER")).setDesc(t("SELECT_PRESET_FOLDER")).addSearch((cb) => {
    new FolderSuggest(plugin.app, cb.inputEl, async () => {
      const newFolder = cb.inputEl.value;
      if (newFolder !== plugin.settings.presetFolderPath) {
        plugin.settings.presetFolderPath = newFolder;
        await plugin.saveSettings();
        await plugin.presetManager.updatePresetFolder(newFolder);
        debouncedRefreshAllSettings();
      }
    });
    cb.setPlaceholder(t("PRESET_FOLDER_PLACEHOLDER")).setValue(plugin.settings.presetFolderPath);
    const parentEl = cb.inputEl.parentElement;
    if (parentEl) {
      parentEl.classList.add("wide-input-container");
    }
    cb.inputEl.removeAttribute("autofocus");
    setTimeout(() => {
      cb.inputEl.blur();
    }, 0);
  });
}
function addFolderPresetSection(containerEl, plugin, settingsManager, debouncedRefreshAllSettings) {
  var _a;
  new import_obsidian14.Setting(containerEl).setName(t("AUTO_APPLY_FOLDER_PRESET")).setDesc(t("AUTO_APPLY_FOLDER_PRESET_DESC")).addToggle(
    (toggle) => toggle.setValue(plugin.settings.autoApplyFolderPresets).onChange(async (value) => {
      await settingsManager.toggleAutoApplyPresets(value);
      const currentFile = plugin.app.workspace.getActiveFile();
      if (currentFile) {
        await plugin.selectAndApplyPresetForCurrentFile();
      }
    })
  );
  new import_obsidian14.Setting(containerEl).setName(t("ADD_NEW_FOLDER_PRESET")).setDesc(t("ADD_NEW_FOLDER_PRESET_DESC")).addButton(
    (button) => button.setTooltip(t("ADD_NEW_FOLDER_PRESET")).setIcon("plus").setCta().onClick(async () => {
      const newFolderPath = "";
      plugin.settings.folderPresets = plugin.settings.folderPresets || {};
      plugin.settings.activeFolderPresets = plugin.settings.activeFolderPresets || {};
      if (!plugin.settings.folderPresets[newFolderPath]) {
        plugin.settings.folderPresets[newFolderPath] = [];
        plugin.settings.activeFolderPresets[newFolderPath] = "";
        await settingsManager.saveSettings();
        debouncedRefreshAllSettings();
      } else {
        new import_obsidian14.Notice(t("PRESET_ALREADY_EXISTS"));
      }
    })
  );
  plugin.settings.folderPresets = plugin.settings.folderPresets || {};
  plugin.settings.activeFolderPresets = plugin.settings.activeFolderPresets || {};
  for (const [folderPath, presets] of Object.entries(plugin.settings.folderPresets)) {
    const s = new import_obsidian14.Setting(containerEl).addSearch((cb) => {
      new FolderSuggest(plugin.app, cb.inputEl);
      cb.setPlaceholder(t("FOLDER")).setValue(folderPath).onChange((_newFolder) => {
      });
      cb.inputEl.addEventListener("blur", () => {
        var _a2, _b;
        const newFolder = cb.inputEl.value;
        if (newFolder && ((_a2 = plugin.settings.folderPresets) == null ? void 0 : _a2[newFolder])) {
          new import_obsidian14.Notice(t("PRESET_ALREADY_EXISTS_FOR_FOLDER"));
          return;
        }
        if (plugin.settings.folderPresets) {
          delete plugin.settings.folderPresets[folderPath];
          plugin.settings.folderPresets[newFolder] = presets;
        }
        if ((_b = plugin.settings.activeFolderPresets) == null ? void 0 : _b[folderPath]) {
          plugin.settings.activeFolderPresets[newFolder] = plugin.settings.activeFolderPresets[folderPath];
          delete plugin.settings.activeFolderPresets[folderPath];
        }
        settingsManager.saveSettings();
        debouncedRefreshAllSettings();
      });
    });
    const presetInput = s.controlEl.createEl("input", {
      cls: "preset-suggest-input",
      type: "text",
      value: ((_a = plugin.settings.activeFolderPresets) == null ? void 0 : _a[folderPath]) || "",
      placeholder: t("PRESET")
    });
    new PresetSuggest(
      plugin.app,
      presetInput,
      plugin,
      0 /* PresetsFiles */
    );
    presetInput.onblur = async () => {
      const newValue = presetInput.value;
      plugin.settings.activeFolderPresets = plugin.settings.activeFolderPresets || {};
      plugin.settings.folderPresets = plugin.settings.folderPresets || {};
      if (newValue !== plugin.settings.activeFolderPresets[folderPath]) {
        plugin.settings.activeFolderPresets[folderPath] = newValue;
        plugin.settings.folderPresets[folderPath] = [newValue];
        await settingsManager.saveSettings();
        debouncedRefreshAllSettings();
      }
    };
    s.addExtraButton((cb) => {
      cb.setIcon("down-chevron-glyph").setTooltip(t("MOVE_DOWN")).onClick(() => {
        const entries = Object.entries(plugin.settings.folderPresets || {});
        const index = entries.findIndex(([path3]) => path3 === folderPath);
        if (index < entries.length - 1) {
          [entries[index], entries[index + 1]] = [entries[index + 1], entries[index]];
          plugin.settings.folderPresets = Object.fromEntries(entries);
          settingsManager.saveSettings();
          debouncedRefreshAllSettings();
        }
      });
    }).addExtraButton((cb) => {
      cb.setIcon("cross").setTooltip(t("DELETE")).onClick(() => {
        if (plugin.settings.folderPresets) {
          delete plugin.settings.folderPresets[folderPath];
        }
        if (plugin.settings.activeFolderPresets) {
          delete plugin.settings.activeFolderPresets[folderPath];
        }
        settingsManager.saveSettings();
        debouncedRefreshAllSettings();
      });
    });
    s.infoEl.remove();
  }
}
function addPresetManagementSection(containerEl, plugin, settingsManager, debouncedRefreshAllSettings) {
  addPresetManagementSectionContent(containerEl, plugin, settingsManager, debouncedRefreshAllSettings);
}
function addPresetManagementSectionContent(containerEl, plugin, settingsManager, debouncedRefreshAllSettings) {
  new import_obsidian14.Setting(containerEl).setName(t("PRESET_MANAGEMENT_AND_GLOBAL_SETTINGS")).setDesc(t("PRESET_MANAGEMENT_DESC")).addButton(
    (button) => button.setTooltip(t("CREATE_NEW_PRESET")).setIcon("plus").setCta().onClick(async () => {
      const modal = new PresetEditModal(
        plugin.app,
        plugin,
        settingsManager,
        "create",
        void 0,
        debouncedRefreshAllSettings
      );
      await modal.open();
    })
  ).addButton(
    (button) => button.setTooltip(t("IMPORT_PRESET")).setIcon("upload").onClick(async () => {
      const modal = new PresetImportExportModal(
        plugin.app,
        plugin,
        settingsManager,
        "import",
        void 0,
        () => refreshPresetList(plugin, settingsManager, debouncedRefreshAllSettings)
      );
      await modal.open();
    })
  );
}
async function addPresetListSection(containerEl, plugin, settingsManager, debouncedRefreshAllSettings) {
  const presetNames = await plugin.presetManager.getPresetNames();
  const presets = await Promise.all(presetNames.map((name) => plugin.presetManager.getPreset(name)));
  presets.forEach((preset, index) => {
    if (!preset)
      return;
    const presetName = presetNames[index];
    const setting = new import_obsidian14.Setting(containerEl).setName(presetName).setDesc(preset.description || t("NO_DESCRIPTION"));
    if (presetName !== "default") {
      setting.addButton(
        (button) => button.setTooltip(t("EDIT")).setIcon("pencil").onClick(() => {
          new PresetEditModal(
            plugin.app,
            plugin,
            settingsManager,
            "edit",
            presetName,
            debouncedRefreshAllSettings
          ).open();
        })
      );
      setting.addButton(
        (button) => button.setTooltip(t("CLONE")).setIcon("copy").onClick(() => {
          new PresetEditModal(
            plugin.app,
            plugin,
            settingsManager,
            "clone",
            presetName,
            debouncedRefreshAllSettings
          ).open();
        })
      );
      setting.addButton(
        (button) => button.setTooltip(t("DELETE")).setIcon("trash").onClick(async () => {
          if (await settingsManager.confirmDelete(t("PRESET_NAME", { name: presetName }))) {
            await plugin.presetManager.deletePreset(presetName);
            await plugin.presetManager.removePresetFromAllFolders(presetName);
            if (plugin.settings.GlobalPreset === presetName) {
              await plugin.presetManager.applyGlobalPreset("default");
              new import_obsidian14.Notice(t("PRESET_DELETED_NOTICE"));
            }
            settingsManager.applyChanges();
            debouncedRefreshAllSettings();
          }
        })
      );
    }
    setting.addButton(
      (button) => button.setTooltip(t("EXPORT")).setIcon("download").onClick(() => {
        new PresetImportExportModal(plugin.app, plugin, settingsManager, "export", presetName).open();
      })
    ).addToggle((toggle) => {
      toggle.setTooltip(t("SET_AS_GLOBAL_PRESET")).setValue(plugin.settings.GlobalPreset === presetName).onChange(async (value) => {
        if (value) {
          await plugin.presetManager.applyGlobalPreset(presetName);
          debouncedRefreshAllSettings();
        } else if (plugin.settings.GlobalPreset === presetName) {
          toggle.setValue(true);
        }
      });
    });
  });
}

// src/ui/settings/layoutSettings.ts
var import_obsidian15 = require("obsidian");
function addLayoutSettings(containerEl, plugin, settingsManager, settingTab) {
  containerEl.createEl("div", { cls: "settings-section-margin" });
  new import_obsidian15.Setting(containerEl).setName(t("LAYOUT_SETTINGS")).setHeading();
  const settings = {};
  settings.defaultLayout = new import_obsidian15.Setting(containerEl).setName(t("DEFAULT_LAYOUT")).setDesc(t("DEFAULT_LAYOUT_DESC")).addDropdown((dropdown) => {
    dropdown.addOption("auto", t("AUTO")).addOption("list", t("LIST")).addOption("grid", t("GRID")).addOption("masonry", t("MASONRY")).setValue(plugin.settings.defaultLayout).onChange(async (value) => {
      const layout = value;
      await settingsManager.updateSetting("defaultLayout", layout);
      updateSettingsState(layout, plugin.settings.alignCardHeight);
    });
  });
  settings.cardWidthThreshold = settingTab.addSliderSetting(
    containerEl,
    "cardWidthThreshold",
    t("CARD_WIDTH_THRESHOLD"),
    t("CARD_WIDTH_THRESHOLD_DESC")
  );
  settings.alignCardHeight = new import_obsidian15.Setting(containerEl).setName(t("ALIGN_CARD_HEIGHT")).setDesc(t("ALIGN_CARD_HEIGHT_DESC")).addToggle(
    (toggle) => toggle.setValue(plugin.settings.alignCardHeight).onChange(async (value) => {
      await settingsManager.updateSetting("alignCardHeight", value);
      updateSettingsState(plugin.settings.defaultLayout, value);
    })
  );
  settings.cardsPerView = settingTab.addSliderSetting(
    containerEl,
    "cardsPerView",
    t("CARDS_PER_VIEW"),
    t("CARDS_PER_VIEW_DESC")
  );
  settings.gridColumns = settingTab.addSliderSetting(
    containerEl,
    "gridColumns",
    t("GRID_COLUMNS"),
    t("GRID_COLUMNS_DESC")
  );
  settings.gridCardHeight = settingTab.addSliderSetting(
    containerEl,
    "gridCardHeight",
    t("GRID_CARD_HEIGHT"),
    t("GRID_CARD_HEIGHT_DESC")
  );
  settings.masonryColumns = settingTab.addSliderSetting(
    containerEl,
    "masonryColumns",
    t("MASONRY_COLUMNS"),
    t("MASONRY_COLUMNS_DESC")
  );
  function updateSettingsState(layout, alignCardHeight) {
    const updateSettingState = (setting, isEnabled) => {
      setting.setDisabled(!isEnabled);
      if (isEnabled) {
        setting.settingEl.removeClass("setting-disabled");
      } else {
        setting.settingEl.addClass("setting-disabled");
      }
    };
    updateSettingState(settings.cardWidthThreshold, layout === "auto");
    updateSettingState(settings.gridColumns, layout === "grid");
    updateSettingState(settings.gridCardHeight, layout === "auto" || layout === "grid");
    updateSettingState(settings.masonryColumns, layout === "masonry");
    updateSettingState(settings.alignCardHeight, layout === "auto" || layout === "list");
    updateSettingState(settings.cardsPerView, (layout === "auto" || layout === "list") && alignCardHeight);
  }
  updateSettingsState(plugin.settings.defaultLayout, plugin.settings.alignCardHeight);
}

// src/ui/settings/containerSettings.ts
var import_obsidian16 = require("obsidian");
function addContainerSettings(containerEl, plugin, settingsManager, settingTab) {
  containerEl.createEl("div", { cls: "settings-section-margin" });
  new import_obsidian16.Setting(containerEl).setName(t("CONTAINER_SETTINGS")).setHeading();
  settingTab.addToggleSetting(
    containerEl,
    "useSelectedFolder",
    t("SOURCE_FOLDER"),
    t("SOURCE_FOLDER_DESC")
  );
  new import_obsidian16.Setting(containerEl).setName(t("SELECT_FOLDER")).setDesc(t("SELECT_FOLDER_DESC")).addText((cb) => {
    new FolderSuggest(plugin.app, cb.inputEl);
    cb.setPlaceholder(t("SELECT_FOLDER_PLACEHOLDER")).setValue(plugin.settings.selectedFolder || "").onChange(async (newFolder) => {
      if (newFolder) {
        await settingsManager.updateSetting("selectedFolder", newFolder);
      }
    });
    cb.inputEl.addClass("card-navigator-folder-search");
  });
  settingTab.addDropdownSetting(
    containerEl,
    "sortMethod",
    t("DEFAULT_SORT_METHOD"),
    t("DEFAULT_SORT_METHOD_DESC")
  );
}

// src/ui/settings/cardStyleSettings.ts
var import_obsidian17 = require("obsidian");
function addCardStylingSettings(containerEl, plugin, settingsManager, settingTab) {
  containerEl.createEl("div", { cls: "settings-section-margin" });
  new import_obsidian17.Setting(containerEl).setName(t("CARD_STYLING_SETTINGS")).setHeading();
  fontSizeSettings.forEach(({ key, name, description }) => {
    if (key === "fileNameFontSize" || key === "firstHeaderFontSize" || key === "bodyFontSize") {
      settingTab.addSliderSetting(
        containerEl,
        key,
        t(name),
        t(description)
      );
    }
  });
}

// src/ui/settings/cardContentSettings.ts
var import_obsidian18 = require("obsidian");
function addCardContentSettings(containerEl, plugin, settingsManager, settingTab) {
  containerEl.createEl("div", { cls: "settings-section-margin" });
  new import_obsidian18.Setting(containerEl).setName(t("CARD_CONTENT_SETTINGS")).setHeading();
  settingTab.addToggleSetting(
    containerEl,
    "renderContentAsHtml",
    t("RENDER_CONTENT_AS_HTML"),
    t("RENDER_CONTENT_AS_HTML_DESC")
  );
  settingTab.addToggleSetting(
    containerEl,
    "dragDropContent",
    t("DRAG_AND_DROP_CONTENT"),
    t("DRAG_AND_DROP_CONTENT_DESC")
  );
  contentSettings.forEach(({ key, name, description }) => {
    settingTab.addToggleSetting(
      containerEl,
      key,
      t(name),
      t(description)
    );
  });
  settingTab.addToggleSetting(
    containerEl,
    "bodyLengthLimit",
    t("BODY_LENGTH_LIMIT"),
    t("BODY_LENGTH_LIMIT_DESC")
  );
  const bodyLengthSetting = settingTab.addSliderSetting(
    containerEl,
    "bodyLength",
    t("BODY_LENGTH"),
    t("BODY_LENGTH_DESC")
  );
  const updateBodyLengthState = (isLimited) => {
    bodyLengthSetting.setDisabled(!isLimited);
    if (isLimited) {
      bodyLengthSetting.settingEl.removeClass("setting-disabled");
    } else {
      bodyLengthSetting.settingEl.addClass("setting-disabled");
    }
  };
  updateBodyLengthState(plugin.settings.bodyLengthLimit);
}

// src/ui/settings/keyboardShortcutsInfo.ts
var import_obsidian19 = require("obsidian");
function addKeyboardShortcutsInfo(containerEl) {
  containerEl.createEl("div", { cls: "settings-section-margin" });
  new import_obsidian19.Setting(containerEl).setName(t("KEYBOARD_SHORTCUTS")).setHeading();
  new import_obsidian19.Setting(containerEl).setDesc(t("KEYBOARD_SHORTCUTS_DESC"));
  const tableContainer = containerEl.createEl("div", { cls: "keyboard-shortcuts-table-container" });
  const table = tableContainer.createEl("table", { cls: "keyboard-shortcuts-table" });
  const thead = table.createEl("thead");
  const headerRow = thead.createEl("tr");
  headerRow.createEl("th", { text: t("COMMAND") });
  headerRow.createEl("th", { text: t("DESCRIPTION") });
  const tbody = table.createEl("tbody");
  keyboardShortcuts.forEach(({ name, description }) => {
    const row = tbody.createEl("tr");
    row.createEl("td", { text: t(name), cls: "keyboard-shortcut-name" });
    row.createEl("td", { text: t(description), cls: "keyboard-shortcut-description" });
  });
  const customizeNote = containerEl.createEl("p", { cls: "keyboard-shortcuts-note" });
  customizeNote.setText(t("KEYBOARD_SHORTCUTS_CUSTOMIZE_NOTE"));
  const additionalNote = containerEl.createEl("p", { cls: "keyboard-shortcuts-note" });
  additionalNote.setText(t("KEYBOARD_SHORTCUTS_ADDITIONAL_NOTE"));
}

// src/ui/settings/settingsTab.ts
var SettingTab = class extends import_obsidian20.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.sections = {};
    this.settingsManager = plugin.settingsManager;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    this.sections = {
      preset: containerEl.createDiv("preset-section"),
      container: containerEl.createDiv("container-section"),
      layout: containerEl.createDiv("layout-section"),
      cardContent: containerEl.createDiv("card-content-section"),
      cardStyling: containerEl.createDiv("card-styling-section"),
      keyboardShortcuts: containerEl.createDiv("keyboard-shortcuts-section")
    };
    this.updateAllSections();
  }
  updateAllSections() {
    this.updatePresetSettings();
    this.updateContainerSettings();
    this.updateLayoutSettings();
    this.updateCardContentSettings();
    this.updateCardStylingSettings();
    this.updateKeyboardShortcutsInfo();
  }
  updatePresetSettings() {
    this.sections.preset.empty();
    addPresetSettings(this.sections.preset, this.plugin, this.settingsManager, this);
  }
  updateContainerSettings() {
    this.sections.container.empty();
    addContainerSettings(this.sections.container, this.plugin, this.settingsManager, this);
  }
  updateLayoutSettings() {
    this.sections.layout.empty();
    addLayoutSettings(this.sections.layout, this.plugin, this.settingsManager, this);
  }
  updateCardContentSettings() {
    this.sections.cardContent.empty();
    addCardContentSettings(this.sections.cardContent, this.plugin, this.settingsManager, this);
  }
  updateCardStylingSettings() {
    this.sections.cardStyling.empty();
    addCardStylingSettings(this.sections.cardStyling, this.plugin, this.settingsManager, this);
  }
  updateKeyboardShortcutsInfo() {
    this.sections.keyboardShortcuts.empty();
    addKeyboardShortcutsInfo(this.sections.keyboardShortcuts);
  }
  refreshSettingsUI(changedSetting) {
    switch (changedSetting) {
      case "lastActivePreset":
      case "folderPresets":
      case "activeFolderPresets":
        this.updatePresetSettings();
        break;
      case "useSelectedFolder":
      case "selectedFolder":
      case "sortCriterion":
      case "sortOrder":
      case "centerActiveCardOnOpen":
        this.updateContainerSettings();
        break;
      case "defaultLayout":
      case "cardWidthThreshold":
      case "alignCardHeight":
      case "cardsPerView":
      case "gridColumns":
      case "gridCardHeight":
      case "masonryColumns":
        this.updateLayoutSettings();
        break;
      case "renderContentAsHtml":
      case "dragDropContent":
      case "showFileName":
      case "showFirstHeader":
      case "showBody":
      case "bodyLengthLimit":
      case "bodyLength":
        this.updateCardContentSettings();
        break;
      case "fileNameFontSize":
      case "firstHeaderFontSize":
      case "bodyFontSize":
        this.updateCardStylingSettings();
        break;
      default:
        this.updateAllSections();
    }
  }
  addToggleSetting(containerEl, key, name, desc) {
    return new import_obsidian20.Setting(containerEl).setName(name).setDesc(desc).addToggle(
      (toggle) => toggle.setValue(this.plugin.settings[key]).onChange(async (value) => {
        await this.settingsManager.updateBooleanSetting(key, value);
      })
    );
  }
  addSliderSetting(containerEl, key, name, desc) {
    const config = this.settingsManager.getNumberSettingConfig(key);
    return new import_obsidian20.Setting(containerEl).setName(name).setDesc(desc).addSlider(
      (slider) => slider.setLimits(config.min, config.max, config.step).setValue(this.plugin.settings[key]).setDynamicTooltip().onChange(async (value) => {
        await this.settingsManager.updateSetting(key, value);
      })
    );
  }
  addDropdownSetting(containerEl, key, name, desc) {
    return new import_obsidian20.Setting(containerEl).setName(t(name)).setDesc(t(desc)).addDropdown((dropdown) => {
      sortOptions.forEach((option) => {
        dropdown.addOption(option.value, t(option.label));
      });
      dropdown.setValue(`${this.plugin.settings.sortCriterion}_${this.plugin.settings.sortOrder}`).onChange(async (value) => {
        const [criterion, order2] = value.split("_");
        await this.settingsManager.updateSetting("sortCriterion", criterion);
        await this.settingsManager.updateSetting("sortOrder", order2);
      });
    });
  }
};

// src/ui/settings/settingsManager.ts
var import_obsidian21 = require("obsidian");
var SettingsManager = class {
  constructor(plugin, presetManager) {
    this.plugin = plugin;
    this.presetManager = presetManager;
    this.saveSettingsDebounced = (0, import_obsidian21.debounce)(async () => {
      try {
        await this.plugin.saveSettings();
      } catch (error) {
        console.error("Error saving settings:", error);
      }
    }, 500);
  }
  async saveSettings() {
    try {
      await this.plugin.saveSettings();
    } catch (error) {
      console.error(t("ERROR_SAVING_SETTINGS"), error);
    }
  }
  async loadSettings() {
    const loadedData = await this.plugin.loadData();
    if (loadedData) {
      this.plugin.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
    } else {
      this.plugin.settings = { ...DEFAULT_SETTINGS };
    }
    for (const key in DEFAULT_SETTINGS) {
      if (!(key in this.plugin.settings)) {
        this.plugin.settings[key] = DEFAULT_SETTINGS[key];
      }
    }
    if (!this.plugin.settings.folderPresets) {
      this.plugin.settings.folderPresets = {};
    }
    if (!this.plugin.settings.activeFolderPresets) {
      this.plugin.settings.activeFolderPresets = {};
    }
    await this.saveSettings();
    await this.saveDefaultPreset();
  }
  async saveDefaultPreset() {
    const presetFolderPath = this.plugin.settings.presetFolderPath;
    const filePath = `${presetFolderPath}/default.json`;
    try {
      await this.plugin.app.vault.adapter.write(filePath, JSON.stringify(DEFAULT_SETTINGS, null, 2));
    } catch (error) {
      console.error(t("ERROR_SAVING_DEFAULT_PRESET"), error);
    }
  }
  async updateSetting(key, value) {
    this.plugin.settings[key] = value;
    this.saveSettingsDebounced();
    this.plugin.triggerRefresh();
  }
  async confirmDelete(itemName) {
    return new Promise((resolve) => {
      new ConfirmDeleteModal(this.plugin.app, itemName, (result) => {
        resolve(result);
      }).open();
    });
  }
  applyChanges() {
    this.plugin.triggerRefresh();
  }
  getCurrentSettings() {
    const currentSettings = { ...this.plugin.settings };
    globalSettingsKeys.forEach((key) => delete currentSettings[key]);
    return currentSettings;
  }
  getActiveFolder() {
    return this.plugin.settings.selectedFolder;
  }
  async updateSelectedFolder(folder) {
    await this.updateSetting("selectedFolder", folder ? folder.path : null);
  }
  getNumberSettingConfig(key) {
    return rangeSettingConfigs[key];
  }
  async updateBooleanSetting(key, value) {
    await this.updateSetting(key, value);
  }
  async getPresetFiles() {
    const presetFolderPath = this.plugin.settings.presetFolderPath;
    const presetFolder = this.plugin.app.vault.getAbstractFileByPath(presetFolderPath);
    if (presetFolder instanceof import_obsidian21.TFolder) {
      return presetFolder.children.filter((file) => file instanceof import_obsidian21.TFile && file.extension === "json");
    }
    return [];
  }
  async loadPresetFromFile(fileName) {
    const presetFolderPath = this.plugin.settings.presetFolderPath;
    const filePath = `${presetFolderPath}/${fileName}`;
    try {
      const content = await this.plugin.app.vault.adapter.read(filePath);
      return JSON.parse(content);
    } catch (error) {
      console.error(t("ERROR_LOADING_PRESET_FROM_FILE", { fileName }), error);
      return null;
    }
  }
  async saveAsNewPreset(presetName, settings) {
    const presetFolderPath = this.plugin.settings.presetFolderPath;
    const filePath = `${presetFolderPath}/${presetName}.json`;
    const presetSettings = settings || this.getCurrentSettings();
    try {
      await this.plugin.app.vault.adapter.write(filePath, JSON.stringify(presetSettings, null, 2));
      return true;
    } catch (error) {
      console.error(t("ERROR_SAVING_NEW_PRESET", { presetName }), error);
      return false;
    }
  }
  getFolderPresets() {
    return this.plugin.settings.folderPresets || {};
  }
  getPresetsForFolder(folderPath) {
    var _a;
    return ((_a = this.plugin.settings.folderPresets) == null ? void 0 : _a[folderPath]) || [];
  }
  async addPresetToFolder(folderPath, presetName) {
    if (!this.plugin.settings.folderPresets) {
      this.plugin.settings.folderPresets = {};
    }
    if (!this.plugin.settings.folderPresets[folderPath]) {
      this.plugin.settings.folderPresets[folderPath] = [];
    }
    if (!this.plugin.settings.folderPresets[folderPath].includes(presetName)) {
      this.plugin.settings.folderPresets[folderPath].push(presetName);
      await this.saveSettings();
    }
  }
  async removePresetFromFolder(folderPath, presetName) {
    if (this.plugin.settings.folderPresets && this.plugin.settings.folderPresets[folderPath]) {
      this.plugin.settings.folderPresets[folderPath] = this.plugin.settings.folderPresets[folderPath].filter((name) => name !== presetName);
      if (this.plugin.settings.folderPresets[folderPath].length === 0) {
        delete this.plugin.settings.folderPresets[folderPath];
      }
      await this.saveSettings();
    }
  }
  async setDefaultPresetForFolder(folderPath, presetName) {
    if (!this.plugin.settings.folderPresets) {
      this.plugin.settings.folderPresets = {};
    }
    if (!this.plugin.settings.folderPresets[folderPath]) {
      this.plugin.settings.folderPresets[folderPath] = [];
    }
    this.plugin.settings.folderPresets[folderPath] = [
      presetName,
      ...this.plugin.settings.folderPresets[folderPath].filter((name) => name !== presetName)
    ];
    await this.saveSettings();
  }
  async toggleAutoApplyPresets(value) {
    await this.updateSetting("autoApplyFolderPresets", value);
  }
  async updateLastActivePreset(presetName) {
    await this.updateSetting("lastActivePreset", presetName);
  }
  async updateGlobalPreset(presetName) {
    await this.updateSetting("GlobalPreset", presetName);
  }
  async updateAutoApplyFolderPresets(value) {
    await this.updateSetting("autoApplyFolderPresets", value);
  }
};
var ConfirmDeleteModal = class extends import_obsidian21.Modal {
  constructor(app, itemName, onChoice) {
    super(app);
    this.itemName = itemName;
    this.onChoice = onChoice;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: t("CONFIRM_DELETE") });
    contentEl.createEl("p", { text: t("CONFIRM_DELETE_ITEM") });
    const buttonContainer = contentEl.createDiv("button-container");
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.marginTop = "20px";
    const cancelButton = buttonContainer.createEl("button", { text: t("CANCEL") });
    cancelButton.style.marginRight = "10px";
    cancelButton.onclick = () => {
      this.close();
      this.onChoice(false);
    };
    const deleteButton = buttonContainer.createEl("button", { text: t("DELETE") });
    deleteButton.onclick = () => {
      this.close();
      this.onChoice(true);
    };
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/ui/settings/PresetManager.ts
var path2 = __toESM(require("path"));
var PresetManager = class {
  constructor(app, plugin, settings) {
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.presetCache = /* @__PURE__ */ new Map();
    this.presetFolder = this.settings.presetFolderPath || "CardNavigatorPresets";
    if (!this.settings.folderPresets) {
      this.settings.folderPresets = {};
    }
    if (!this.settings.activeFolderPresets) {
      this.settings.activeFolderPresets = {};
    }
  }
  updatePresetFolder(newFolder) {
    this.presetFolder = newFolder;
    this.presetCache.clear();
  }
  async ensurePresetFolder() {
    if (!await this.app.vault.adapter.exists(this.presetFolder)) {
      await this.app.vault.createFolder(this.presetFolder);
    }
  }
  async initialize() {
    await this.ensurePresetFolder();
    await this.loadPresetsFromFiles();
    if (!await this.presetExists("default")) {
      const defaultPresetSettings = Object.fromEntries(
        Object.entries(DEFAULT_SETTINGS).filter(([key]) => !globalSettingsKeys.includes(key))
      );
      const defaultPreset = {
        name: "default",
        settings: defaultPresetSettings,
        isDefault: true,
        description: "Default preset"
      };
      await this.savePresetToFile("default", defaultPreset);
    }
  }
  async loadPreset(name) {
    const preset = await this.getPreset(name);
    if (!preset) {
      throw new Error(t("PRESET_NOT_FOUND", { name }));
    }
    this.settings = {
      ...this.settings,
      ...preset.settings
    };
    this.settings.lastActivePreset = name;
    await this.plugin.saveSettings();
    this.plugin.refreshCardNavigator();
  }
  async savePreset(name, description, settings) {
    const currentSettings = settings || this.getCurrentSettings();
    const preset = {
      name,
      settings: currentSettings,
      isDefault: false,
      description
    };
    await this.savePresetToFile(name, preset);
    this.presetCache.set(name, preset);
  }
  getCurrentSettings() {
    const currentSettings = { ...this.plugin.settings };
    globalSettingsKeys.forEach((key) => delete currentSettings[key]);
    return currentSettings;
  }
  async loadPresetFromFile(name) {
    const filePath = `${this.presetFolder}/${name}.json`;
    try {
      const content = await this.app.vault.adapter.read(filePath);
      const preset = JSON.parse(content);
      this.presetCache.set(name, preset);
      return preset;
    } catch (error) {
      console.error(`Error loading preset ${name}:`, error);
      return null;
    }
  }
  async savePresetToFile(name, preset) {
    const filePath = `${this.presetFolder}/${name}.json`;
    await this.app.vault.adapter.write(filePath, JSON.stringify(preset, null, 2));
    this.presetCache.set(name, preset);
  }
  async deletePreset(name) {
    const filePath = `${this.presetFolder}/${name}.json`;
    await this.app.vault.adapter.remove(filePath);
    this.presetCache.delete(name);
  }
  async renamePreset(oldName, newName) {
    const preset = await this.getPreset(oldName);
    if (!preset) {
      throw new Error(t("PRESET_NOT_FOUND", { name: oldName }));
    }
    preset.name = newName;
    await this.savePresetToFile(newName, preset);
    await this.deletePreset(oldName);
  }
  async exportPresets() {
    const presets = await this.getPresets();
    return JSON.stringify(presets, null, 2);
  }
  async importPresets(jsonString) {
    const importedPresets = JSON.parse(jsonString);
    for (const [name, preset] of Object.entries(importedPresets)) {
      await this.savePresetToFile(name, preset);
    }
  }
  async getPresets() {
    const presetNames = await this.getPresetNames();
    const presets = {};
    for (const name of presetNames) {
      const preset = await this.getPreset(name);
      if (preset) {
        presets[name] = preset;
      }
    }
    return presets;
  }
  async removeFolderPreset(folderPath, presetName) {
    if (this.settings.folderPresets && this.settings.folderPresets[folderPath]) {
      this.settings.folderPresets[folderPath] = this.settings.folderPresets[folderPath].filter((name) => name !== presetName);
      if (this.settings.folderPresets[folderPath].length === 0) {
        delete this.settings.folderPresets[folderPath];
      }
      await this.plugin.saveSettings();
    }
  }
  async getPresetNames() {
    const presetFiles = await this.app.vault.adapter.list(this.presetFolder);
    return presetFiles.files.filter((file) => file.endsWith(".json")).map((file) => path2.basename(file, ".json"));
  }
  async clonePreset(sourceName, newName) {
    const sourcePreset = await this.getPreset(sourceName);
    if (!sourcePreset) {
      throw new Error(t("SOURCE_PRESET_NOT_FOUND", { name: sourceName }));
    }
    if (await this.presetExists(newName)) {
      throw new Error(t("PRESET_ALREADY_EXISTS_WITH_NAME", { name: newName }));
    }
    const clonedPreset = { ...sourcePreset, name: newName, isDefault: false };
    await this.savePresetToFile(newName, clonedPreset);
  }
  async exportPreset(name) {
    const preset = await this.getPreset(name);
    if (!preset) {
      throw new Error(t("PRESET_NOT_FOUND", { name }));
    }
    return JSON.stringify(preset, null, 2);
  }
  async importPreset(jsonString) {
    try {
      const importedPreset = JSON.parse(jsonString);
      if (!importedPreset.name || !importedPreset.settings) {
        throw new Error(t("INVALID_PRESET_FORMAT"));
      }
      await this.savePresetToFile(importedPreset.name, importedPreset);
    } catch (error) {
      throw new Error(t("PRESET_IMPORT_FAILED", { error: error instanceof Error ? error.message : String(error) }));
    }
  }
  async getPreset(presetName) {
    if (this.presetCache.has(presetName)) {
      return this.presetCache.get(presetName);
    }
    const preset = await this.loadPresetFromFile(presetName);
    return preset || void 0;
  }
  getFolderPresets() {
    return this.settings.folderPresets || {};
  }
  async deleteAllPresets() {
    const presetNames = await this.getPresetNames();
    for (const name of presetNames) {
      await this.deletePreset(name);
    }
  }
  async removePresetFromAllFolders(presetName) {
    if (this.plugin.settings.folderPresets) {
      for (const folderPath in this.plugin.settings.folderPresets) {
        this.plugin.settings.folderPresets[folderPath] = this.plugin.settings.folderPresets[folderPath].filter((name) => name !== presetName);
        if (this.plugin.settings.folderPresets[folderPath].length === 0) {
          delete this.plugin.settings.folderPresets[folderPath];
        }
      }
      await this.plugin.saveSettings();
    }
  }
  async resetToDefaultPresets() {
    await this.deleteAllPresets();
    const defaultPreset = {
      name: "default",
      settings: DEFAULT_SETTINGS,
      isDefault: true,
      description: "Default preset"
    };
    await this.savePresetToFile("default", defaultPreset);
  }
  async presetExists(name) {
    const filePath = `${this.presetFolder}/${name}.json`;
    return await this.app.vault.adapter.exists(filePath);
  }
  async loadPresetsFromFiles() {
    const presetFiles = await this.app.vault.adapter.list(this.presetFolder);
    for (const file of presetFiles.files) {
      if (file.endsWith(".json")) {
        const presetName = path2.basename(file, ".json");
        await this.loadPresetFromFile(presetName);
      }
    }
  }
  async applyGlobalPreset(presetName) {
    const globalPresetName = presetName || this.plugin.settings.GlobalPreset;
    if (!globalPresetName) {
      console.error(t("GLOBAL_PRESET_NOT_SET"));
      return;
    }
    await this.applyPreset(globalPresetName);
    this.plugin.settings.GlobalPreset = globalPresetName;
    await this.plugin.saveSettings();
  }
  async applyFolderPreset(folderPath) {
    let currentPath = folderPath;
    let presetApplied = false;
    while (currentPath && !presetApplied) {
      if (!this.plugin.settings.activeFolderPresets) {
        this.plugin.settings.activeFolderPresets = {};
      }
      const presetName = this.plugin.settings.activeFolderPresets[currentPath];
      if (presetName) {
        await this.applyPreset(presetName);
        presetApplied = true;
      } else {
        currentPath = currentPath.includes("/") ? currentPath.substring(0, currentPath.lastIndexOf("/")) : null;
      }
    }
    if (!presetApplied) {
      await this.applyGlobalPreset();
    }
  }
  async applyPreset(presetName) {
    const preset = await this.getPreset(presetName);
    if (preset) {
      const globalSettings = globalSettingsKeys.reduce((acc, key) => {
        if (key in this.plugin.settings && this.plugin.settings[key] !== void 0) {
          acc[key] = this.plugin.settings[key];
        }
        return acc;
      }, {});
      this.plugin.settings = {
        ...DEFAULT_SETTINGS,
        // 기본 설정으로 시작
        ...preset.settings,
        // 프리셋 설정 적용
        ...globalSettings,
        // 글로벌 설정값 복원
        lastActivePreset: presetName
      };
      await this.plugin.saveSettings();
      this.plugin.refreshCardNavigator();
    } else {
      console.error(t("PRESET_NOT_FOUND", { name: presetName }));
    }
  }
  async setFolderPreset(folderPath, presetName) {
    if (!this.settings.folderPresets) {
      this.settings.folderPresets = {};
    }
    this.settings.folderPresets[folderPath] = [presetName];
    await this.plugin.saveSettings();
  }
  async toggleAutoApplyFolderPresets(value) {
    this.settings.autoApplyFolderPresets = value;
    await this.plugin.saveSettings();
  }
};

// src/main.ts
var languageResources = {
  en: () => Promise.resolve().then(() => __toESM(require_en())),
  ko: () => Promise.resolve().then(() => __toESM(require_ko()))
};
var translationLanguage = Object.keys(languageResources).includes(import_obsidian22.moment.locale()) ? import_obsidian22.moment.locale() : "en";
var CardNavigatorPlugin = class extends import_obsidian22.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.selectedFolder = null;
    this.refreshDebounced = (0, import_obsidian22.debounce)(() => this.refreshViews(), 200);
    this.ribbonIconEl = null;
    this.events = new import_obsidian22.Events();
  }
  async onload() {
    await this.loadSettings();
    this.presetManager = new PresetManager(this.app, this, this.settings);
    this.settingsManager = new SettingsManager(this, this.presetManager);
    await this.presetManager.initialize();
    await this.initializePlugin();
    this.addRibbonIcon("layers-3", t("OPEN_CARD_NAVIGATOR"), () => {
      this.activateView();
    });
    this.registerEvent(
      this.app.workspace.on("file-open", (file) => {
        if (file instanceof import_obsidian22.TFile) {
          this.selectAndApplyPreset(file);
        }
      })
    );
    this.refreshViews();
  }
  // Plugin cleanup
  async onunload() {
    this.events.off("settings-updated", this.refreshDebounced);
    if (this.ribbonIconEl) {
      this.ribbonIconEl.detach();
    }
  }
  // Load plugin settings
  async loadSettings() {
    const loadedData = await this.loadData();
    this.settings = Object.assign({}, DEFAULT_SETTINGS, loadedData);
  }
  // Save plugin settings
  async saveSettings() {
    await this.saveData(this.settings);
    this.events.trigger("settings-updated");
  }
  // Initialize plugin components and functionality
  async initializePlugin() {
    await this.initializeI18n();
    this.settingTab = new SettingTab(this.app, this);
    this.addSettingTab(this.settingTab);
    this.registerView(
      VIEW_TYPE_CARD_NAVIGATOR,
      (leaf) => new CardNavigator(leaf, this)
    );
    this.addCommands();
    this.addScrollCommands();
    this.refreshDebounced = (0, import_obsidian22.debounce)(() => this.refreshViews(), 200);
    this.registerCentralizedEvents();
  }
  // Initialize internationalization
  async initializeI18n() {
    const resources = await this.loadLanguageResources();
    await instance.init({
      lng: translationLanguage,
      fallbackLng: "en",
      resources
    });
  }
  // Load language resources
  async loadLanguageResources() {
    const [en, ko] = await Promise.all([
      languageResources.en(),
      languageResources.ko()
    ]);
    return {
      en: { translation: en.default },
      ko: { translation: ko.default }
    };
  }
  addCommands() {
    this.addCommand({
      id: "open-card-navigator",
      name: t("OPEN_CARD_NAVIGATOR"),
      callback: () => this.activateView()
    });
    this.addCommand({
      id: "focus-card-navigator",
      name: t("MOVE_FOCUS_TO_CARD_NAVIGATOR"),
      callback: async () => {
        const cardNavigator = this.getFirstCardNavigator();
        if (cardNavigator) {
          const leaf = this.app.workspace.getLeaf();
          if (leaf) {
            leaf.view.containerEl.focus();
            await new Promise((resolve) => setTimeout(resolve, 0));
            cardNavigator.focusNavigator();
          }
        }
      }
    });
    this.addCommand({
      id: "open-card-context-menu",
      name: t("OPEN_CARD_CONTEXT_MENU"),
      callback: () => {
        const cardNavigator = this.getActiveCardNavigator();
        if (cardNavigator) {
          cardNavigator.openContextMenu();
        }
      }
    });
  }
  // Refresh all Card Navigator views
  refreshViews() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        leaf.view.refresh();
      }
    });
  }
  // Activate or create a Card Navigator view
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const existingLeaf = workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR)[0];
    if (existingLeaf) {
      leaf = existingLeaf;
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_CARD_NAVIGATOR, active: true });
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
      if (workspace.activeLeaf) {
        await workspace.activeLeaf.setViewState(leaf.getViewState());
      }
    } else {
      console.error("Failed to activate Card Navigator view");
    }
  }
  getFirstCardNavigator() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    for (const leaf of leaves) {
      if (leaf.view instanceof CardNavigator) {
        return leaf.view;
      }
    }
    return null;
  }
  // Display filtered cards in the active Card Navigator
  displayFilteredCards(filteredFiles) {
    const cardNavigator = this.app.workspace.getActiveViewOfType(CardNavigator);
    if (cardNavigator) {
      cardNavigator.cardContainer.displayCards(filteredFiles);
    }
  }
  // Sort cards based on the specified criterion and order
  sortCards(criterion, order2) {
    const cardNavigator = this.app.workspace.getActiveViewOfType(CardNavigator);
    if (cardNavigator) {
      cardNavigator.cardContainer.sortCards(criterion, order2);
    }
  }
  // Get the active Card Navigator view
  getActiveCardNavigator() {
    return this.app.workspace.getActiveViewOfType(CardNavigator);
  }
  async selectAndApplyPreset(file) {
    if (this.settings.autoApplyPresets) {
      if (this.settings.autoApplyFolderPresets && file.parent) {
        await this.presetManager.applyFolderPreset(file.parent.path);
      } else {
        await this.presetManager.applyGlobalPreset(this.settings.GlobalPreset);
      }
    } else {
    }
  }
  async selectAndApplyPresetForCurrentFile() {
    const currentFile = this.app.workspace.getActiveFile();
    if (currentFile) {
      await this.selectAndApplyPreset(currentFile);
    }
  }
  // Refreshes the Card Navigator settings tab
  refreshSettingsTab() {
    if (this.settingTab instanceof SettingTab) {
      this.settingTab.display();
    }
  }
  // Refresh Card Navigator instances
  refreshCardNavigator() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        leaf.view.cardContainer.handleResize();
        leaf.view.refresh();
      }
    });
  }
  // Update layout for all Card Navigator instances
  updateCardNavigatorLayout(layout) {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        leaf.view.cardContainer.setLayout(layout);
        leaf.view.refresh();
      }
    });
    this.saveSettings();
  }
  // Center the active card in all Card Navigator views
  centerActiveCard() {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        leaf.view.cardContainer.centerActiveCard();
      }
    });
  }
  // Add scroll-related commands
  addScrollCommands() {
    const scrollCommands = [
      { id: "scroll-up-one-card", name: t("SCROLL_UP_ONE_CARD"), direction: "up", count: 1 },
      { id: "scroll-down-one-card", name: t("SCROLL_DOWN_ONE_CARD"), direction: "down", count: 1 },
      { id: "scroll-left-one-card", name: t("SCROLL_LEFT_ONE_CARD"), direction: "left", count: 1 },
      { id: "scroll-right-one-card", name: t("SCROLL_RIGHT_ONE_CARD"), direction: "right", count: 1 },
      { id: "scroll-up-page", name: t("SCROLL_UP_LEFT_ONE_PAGE"), direction: "up", count: this.settings.cardsPerView },
      { id: "scroll-down-page", name: t("SCROLL_DOWN_RIGHT_ONE_PAGE"), direction: "down", count: this.settings.cardsPerView },
      { id: "center-active-card", name: t("CENTER_ACTIVE_CARD"), direction: "", count: 0 }
    ];
    scrollCommands.forEach(({ id, name, direction, count }) => {
      this.addCommand({
        id,
        name,
        callback: () => {
          if (id === "center-active-card") {
            this.centerActiveCard();
          } else {
            this.scrollCards(direction, count);
          }
        }
      });
    });
  }
  // Scroll cards in the specified direction
  scrollCards(direction, count) {
    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_CARD_NAVIGATOR);
    leaves.forEach((leaf) => {
      if (leaf.view instanceof CardNavigator) {
        const { cardContainer } = leaf.view;
        const isVertical = cardContainer.isVertical;
        switch (direction) {
          case "up":
            isVertical ? cardContainer.scrollUp(count) : cardContainer.scrollLeft(count);
            break;
          case "down":
            isVertical ? cardContainer.scrollDown(count) : cardContainer.scrollRight(count);
            break;
          case "left":
            cardContainer.scrollLeft(count);
            break;
          case "right":
            cardContainer.scrollRight(count);
            break;
        }
      }
    });
  }
  // Set up event listeners for file and workspace changes
  registerCentralizedEvents() {
    const debouncedRefresh = (0, import_obsidian22.debounce)(() => {
      this.refreshViews();
    }, 200);
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        this.refreshCardNavigator();
      })
    );
    this.events.on("settings-updated", () => {
      debouncedRefresh();
    });
    this.registerEvent(
      this.app.vault.on("rename", (file) => {
        if (file instanceof import_obsidian22.TFile) {
          debouncedRefresh();
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", () => {
        debouncedRefresh();
      })
    );
  }
  // Manually trigger a refresh of the views
  triggerRefresh() {
    this.refreshDebounced();
    this.app.workspace.trigger("layout-change");
  }
};
//# sourceMappingURL=data:application/json;base64,
